//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/GitProjects/Righthand/C64/retro-dbg-data-provider/src/Righthand.RetroDbgDataProvider/Righthand.RetroDbgDataProvider/KickAssembler/Grammar/KickAssemblerParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Righthand.RetroDbgDataProvider.KickAssembler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class KickAssemblerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, EOL=2, HASH=3, HASHDEFINE=4, HASHUNDEF=5, HASHIF=6, HASHENDIF=7, 
		HASHELSE=8, HASHELIF=9, HASHIMPORT=10, HASHIMPORTONCE=11, HASHIMPORTIF=12, 
		ONLYA=13, ABS=14, BINARY=15, C64=16, DOTTEXT=17, TEXT=18, SOURCE=19, DOTENCODING=20, 
		DOTFILL=21, DOTFILLWORD=22, DOTLOHIFILL=23, BYTE=24, WORD=25, DWORD=26, 
		DOTCPU=27, DOTBYTE=28, DOTWORD=29, DOTDWORD=30, CPU6502NOILLEGALS=31, 
		CPU6502=32, DTV=33, CPU65C02=34, ASSERT=35, ASSERTERROR=36, PRINT=37, 
		PRINTNOW=38, DOTVAR=39, VAR=40, DOTIMPORT=41, CONST=42, IF=43, ELSE=44, 
		ERRORIF=45, EVAL=46, ENUM=47, FOR=48, WHILE=49, STRUCT=50, DEFINE=51, 
		FUNCTION=52, RETURN=53, MACRO=54, PSEUDOCOMMAND=55, PSEUDOPC=56, NAMESPACE=57, 
		SEGMENT=58, SEGMENTDEF=59, SEGMENTOUT=60, MODIFY=61, FILEMODIFY=62, PLUGIN=63, 
		LABEL=64, FILE=65, DISK=66, PC=67, BREAK=68, WATCH=69, ZP=70, BLACK=71, 
		WHITE=72, RED=73, CYAN=74, PURPLE=75, GREEN=76, BLUE=77, YELLOW=78, ORANGE=79, 
		BROWN=80, LIGHT_RED=81, DARK_GRAY=82, DARK_GREY=83, GRAY=84, GREY=85, 
		LIGHT_GREEN=86, LIGHT_BLUE=87, LIGHT_GRAY=88, LIGHT_GREY=89, OPEN_BRACE=90, 
		CLOSE_BRACE=91, OPEN_BRACKET=92, CLOSE_BRACKET=93, OPEN_PARENS=94, CLOSE_PARENS=95, 
		DOT=96, COMMA=97, COLON=98, SEMICOLON=99, PLUS=100, MINUS=101, STAR=102, 
		DIV=103, PERCENT=104, AMP=105, BITWISE_OR=106, CARET=107, BANG=108, TILDE=109, 
		AT=110, ASSIGNMENT=111, LT=112, GT=113, INTERR=114, DOUBLE_COLON=115, 
		OP_COALESCING=116, OP_INC=117, OP_DEC=118, OP_AND=119, OP_OR=120, OP_PTR=121, 
		OP_EQ=122, OP_NE=123, OP_LE=124, OP_GE=125, OP_ADD_ASSIGNMENT=126, OP_SUB_ASSIGNMENT=127, 
		OP_MULT_ASSIGNMENT=128, OP_DIV_ASSIGNMENT=129, OP_MOD_ASSIGNMENT=130, 
		OP_AND_ASSIGNMENT=131, OP_OR_ASSIGNMENT=132, OP_XOR_ASSIGNMENT=133, OP_LEFT_SHIFT=134, 
		OP_RIGHT_SHIFT=135, OP_LEFT_SHIFT_ASSIGNMENT=136, OP_COALESCING_ASSIGNMENT=137, 
		OP_RANGE=138, TRUE=139, FALSE=140, DEC_NUMBER=141, HEX_NUMBER=142, BIN_NUMBER=143, 
		CHAR=144, STRING=145, OPEN_STRING=146, SINGLE_LINE_COMMENT=147, MULTI_LINE_COMMENT=148, 
		ADC=149, AND=150, ASL=151, BCC=152, BCS=153, BEQ=154, BIT=155, BMI=156, 
		BNE=157, BPL=158, BRA=159, BRK=160, BVC=161, BVS=162, CLC=163, CLD=164, 
		CLI=165, CLV=166, CMP=167, CPX=168, CPY=169, DEC=170, DEX=171, DEY=172, 
		EOR=173, INC=174, INX=175, INY=176, JMP=177, JSR=178, LDA=179, LDY=180, 
		LDX=181, LSR=182, NOP=183, ORA=184, PHA=185, PHX=186, PHY=187, PHP=188, 
		PLA=189, PLP=190, PLY=191, ROL=192, ROR=193, RTI=194, RTS=195, SBC=196, 
		SEC=197, SED=198, SEI=199, STA=200, STX=201, STY=202, STZ=203, TAX=204, 
		TAY=205, TSX=206, TXA=207, TXS=208, TYA=209, ADC_ABS_CONST=210, ADC_ABSX_CONST=211, 
		ADC_ABSY_CONST=212, ADC_IMM_CONST=213, ADC_IZPX_CONST=214, ADC_IZPY_CONST=215, 
		ADC_ZP_CONST=216, ADC_ZPX_CONST=217, AHX_ABSY_CONST=218, AHX_IZPY_CONST=219, 
		ALR_IMM_CONST=220, ANC_IMM_CONST=221, ANC2_IMM_CONST=222, AND_ABS_CONST=223, 
		AND_ABSX_CONST=224, AND_ABSY_CONST=225, AND_IMM_CONST=226, AND_IZPX_CONST=227, 
		AND_IZPY_CONST=228, AND_ZP_CONST=229, AND_ZPX_CONST=230, ANE_IMM_CONST=231, 
		ARR_IMM_CONST=232, ASL_CONST=233, ASL_ABS_CONST=234, ASL_ABSX_CONST=235, 
		ASL_ZP_CONST=236, ASL_ZPX_CONST=237, ASR_IMM_CONST=238, AXS_IMM_CONST=239, 
		BCC_REL_CONST=240, BCS_REL_CONST=241, BEQ_REL_CONST=242, BIT_ABS_CONST=243, 
		BIT_ABSX_CONST=244, BIT_IMM_CONST=245, BIT_ZP_CONST=246, BIT_ZPX_CONST=247, 
		BMI_REL_CONST=248, BNE_REL_CONST=249, BPL_REL_CONST=250, BRA_REL_CONST=251, 
		BRK_CONST=252, BVC_REL_CONST=253, BVS_REL_CONST=254, CLC_CONST=255, CLD_CONST=256, 
		CLI_CONST=257, CLV_CONST=258, CMP_ABS_CONST=259, CMP_ABSX_CONST=260, CMP_ABSY_CONST=261, 
		CMP_IMM_CONST=262, CMP_IZPX_CONST=263, CMP_IZPY_CONST=264, CMP_ZP_CONST=265, 
		CMP_ZPX_CONST=266, CPX_ABS_CONST=267, CPX_IMM_CONST=268, CPX_ZP_CONST=269, 
		CPY_ABS_CONST=270, CPY_IMM_CONST=271, CPY_ZP_CONST=272, DCM_ABS_CONST=273, 
		DCM_ABSX_CONST=274, DCM_ABSY_CONST=275, DCM_IZPX_CONST=276, DCM_IZPY_CONST=277, 
		DCM_ZP_CONST=278, DCM_ZPX_CONST=279, DCP_ABS_CONST=280, DCP_ABSX_CONST=281, 
		DCP_ABSY_CONST=282, DCP_IZPX_CONST=283, DCP_IZPY_CONST=284, DCP_ZP_CONST=285, 
		DCP_ZPX_CONST=286, DEC_CONST=287, DEC_ABS_CONST=288, DEC_ABSX_CONST=289, 
		DEC_ZP_CONST=290, DEC_ZPX_CONST=291, DEX_CONST=292, DEY_CONST=293, EOR_ABS_CONST=294, 
		EOR_ABSX_CONST=295, EOR_ABSY_CONST=296, EOR_IMM_CONST=297, EOR_IZPX_CONST=298, 
		EOR_IZPY_CONST=299, EOR_ZP_CONST=300, EOR_ZPX_CONST=301, INC_CONST=302, 
		INC_ABS_CONST=303, INC_ABSX_CONST=304, INC_ZP_CONST=305, INC_ZPX_CONST=306, 
		INS_ABS_CONST=307, INS_ABSX_CONST=308, INS_ABSY_CONST=309, INS_IZPX_CONST=310, 
		INS_IZPY_CONST=311, INS_ZP_CONST=312, INS_ZPX_CONST=313, INX_CONST=314, 
		INY_CONST=315, ISB_ABS_CONST=316, ISB_ABSX_CONST=317, ISB_ABSY_CONST=318, 
		ISB_IZPX_CONST=319, ISB_IZPY_CONST=320, ISB_ZP_CONST=321, ISB_ZPX_CONST=322, 
		ISC_ABS_CONST=323, ISC_ABSX_CONST=324, ISC_ABSY_CONST=325, ISC_IZPX_CONST=326, 
		ISC_IZPY_CONST=327, ISC_ZP_CONST=328, ISC_ZPX_CONST=329, JMP_ABS_CONST=330, 
		JMP_IND_CONST=331, JSR_ABS_CONST=332, LAE_ABSY_CONST=333, LAS_ABSY_CONST=334, 
		LAX_ABS_CONST=335, LAX_ABSY_CONST=336, LAX_IMM_CONST=337, LAX_IZPX_CONST=338, 
		LAX_IZPY_CONST=339, LAX_ZP_CONST=340, LAX_ZPY_CONST=341, LDA_ABS_CONST=342, 
		LDA_ABSX_CONST=343, LDA_ABSY_CONST=344, LDA_IMM_CONST=345, LDA_IZPX_CONST=346, 
		LDA_IZPY_CONST=347, LDA_ZP_CONST=348, LDA_ZPX_CONST=349, LDS_ABSY_CONST=350, 
		LDX_ABS_CONST=351, LDX_ABSY_CONST=352, LDX_IMM_CONST=353, LDX_ZP_CONST=354, 
		LDX_ZPY_CONST=355, LDY_ABS_CONST=356, LDY_ABSX_CONST=357, LDY_IMM_CONST=358, 
		LDY_ZP_CONST=359, LDY_ZPX_CONST=360, LSR_CONST=361, LSR_ABS_CONST=362, 
		LSR_ABSX_CONST=363, LSR_ZP_CONST=364, LSR_ZPX_CONST=365, LXA_ABS_CONST=366, 
		LXA_ABSY_CONST=367, LXA_IMM_CONST=368, LXA_IZPX_CONST=369, LXA_IZPY_CONST=370, 
		LXA_ZP_CONST=371, LXA_ZPY_CONST=372, NOP_CONST=373, NOP_ABS_CONST=374, 
		NOP_ABSX_CONST=375, NOP_IMM_CONST=376, NOP_ZP_CONST=377, NOP_ZPX_CONST=378, 
		ORA_ABS_CONST=379, ORA_ABSX_CONST=380, ORA_ABSY_CONST=381, ORA_IMM_CONST=382, 
		ORA_IZPX_CONST=383, ORA_IZPY_CONST=384, ORA_ZP_CONST=385, ORA_ZPX_CONST=386, 
		PHA_CONST=387, PHP_CONST=388, PHX_CONST=389, PHY_CONST=390, PLA_CONST=391, 
		PLP_CONST=392, PLX_CONST=393, PLY_CONST=394, RLA_ABS_CONST=395, RLA_ABSX_CONST=396, 
		RLA_ABSY_CONST=397, RLA_IZPX_CONST=398, RLA_IZPY_CONST=399, RLA_ZP_CONST=400, 
		RLA_ZPX_CONST=401, RMB0_ZP_CONST=402, RMB1_ZP_CONST=403, RMB2_ZP_CONST=404, 
		RMB3_ZP_CONST=405, RMB4_ZP_CONST=406, RMB5_ZP_CONST=407, RMB6_ZP_CONST=408, 
		RMB7_ZP_CONST=409, ROL_CONST=410, ROL_ABS_CONST=411, ROL_ABSX_CONST=412, 
		ROL_ZP_CONST=413, ROL_ZPX_CONST=414, ROR_CONST=415, ROR_ABS_CONST=416, 
		ROR_ABSX_CONST=417, ROR_ZP_CONST=418, ROR_ZPX_CONST=419, RRA_ABS_CONST=420, 
		RRA_ABSX_CONST=421, RRA_ABSY_CONST=422, RRA_IZPX_CONST=423, RRA_IZPY_CONST=424, 
		RRA_ZP_CONST=425, RRA_ZPX_CONST=426, RTI_CONST=427, RTS_CONST=428, SAC_IMM_CONST=429, 
		SAX_ABS_CONST=430, SAX_IZPX_CONST=431, SAX_ZP_CONST=432, SAX_ZPY_CONST=433, 
		SBC_ABS_CONST=434, SBC_ABSX_CONST=435, SBC_ABSY_CONST=436, SBC_IMM_CONST=437, 
		SBC_IZPX_CONST=438, SBC_IZPY_CONST=439, SBC_ZP_CONST=440, SBC_ZPX_CONST=441, 
		SBC2_IMM_CONST=442, SBX_IMM_CONST=443, SEC_CONST=444, SED_CONST=445, SEI_CONST=446, 
		SHA_ABSY_CONST=447, SHA_IZPY_CONST=448, SHS_ABSY_CONST=449, SHX_ABSY_CONST=450, 
		SHY_ABSX_CONST=451, SIR_IMM_CONST=452, SLO_ABS_CONST=453, SLO_ABSX_CONST=454, 
		SLO_ABSY_CONST=455, SLO_IZPX_CONST=456, SLO_IZPY_CONST=457, SLO_ZP_CONST=458, 
		SLO_ZPX_CONST=459, SMB0_ZP_CONST=460, SMB1_ZP_CONST=461, SMB2_ZP_CONST=462, 
		SMB3_ZP_CONST=463, SMB4_ZP_CONST=464, SMB5_ZP_CONST=465, SMB6_ZP_CONST=466, 
		SMB7_ZP_CONST=467, SRE_ABS_CONST=468, SRE_ABSX_CONST=469, SRE_ABSY_CONST=470, 
		SRE_IZPX_CONST=471, SRE_IZPY_CONST=472, SRE_ZP_CONST=473, SRE_ZPX_CONST=474, 
		STA_ABS_CONST=475, STA_ABSX_CONST=476, STA_ABSY_CONST=477, STA_IZPX_CONST=478, 
		STA_IZPY_CONST=479, STA_ZP_CONST=480, STA_ZPX_CONST=481, STP_CONST=482, 
		STX_ABS_CONST=483, STX_ZP_CONST=484, STX_ZPY_CONST=485, STY_ABS_CONST=486, 
		STY_ZP_CONST=487, STY_ZPX_CONST=488, STZ_ABS_CONST=489, STZ_ABSX_CONST=490, 
		STZ_ZP_CONST=491, STZ_ZPX_CONST=492, TAS_ABSY_CONST=493, TAX_CONST=494, 
		TAY_CONST=495, TRB_ABS_CONST=496, TRB_ZP_CONST=497, TSB_ABS_CONST=498, 
		TSB_ZP_CONST=499, TSX_CONST=500, TXA_CONST=501, TXS_CONST=502, TYA_CONST=503, 
		WAI_CONST=504, XAA_IMM_CONST=505, UNQUOTED_STRING=506, DEFINED_TOKEN=507, 
		HD_WS=508, UNDEFINED_TOKEN=509, HU_WS=510, IF_CONDITION=511, I_INTENTIONALLY_IGNORED=512, 
		IA_INTENTIONALLY_IGNORED=513, IIF_CONDITION=514;
	public const int
		RULE_program = 0, RULE_units = 1, RULE_unit = 2, RULE_label = 3, RULE_instruction = 4, 
		RULE_scope = 5, RULE_argumentList = 6, RULE_argument = 7, RULE_labelOffsetReference = 8, 
		RULE_expression = 9, RULE_binaryop = 10, RULE_assignment_expression = 11, 
		RULE_shorthand_assignment_expression = 12, RULE_unary_operator = 13, RULE_compareop = 14, 
		RULE_classFunction = 15, RULE_function = 16, RULE_condition = 17, RULE_compiler_statement = 18, 
		RULE_print = 19, RULE_printnow = 20, RULE_forInit = 21, RULE_forVar = 22, 
		RULE_var = 23, RULE_const = 24, RULE_if = 25, RULE_errorif = 26, RULE_eval = 27, 
		RULE_break = 28, RULE_watch = 29, RULE_watchArguments = 30, RULE_enum = 31, 
		RULE_enumValues = 32, RULE_enumValue = 33, RULE_for = 34, RULE_while = 35, 
		RULE_struct = 36, RULE_variableList = 37, RULE_variable = 38, RULE_define = 39, 
		RULE_functionDefine = 40, RULE_return = 41, RULE_macroDefine = 42, RULE_pseudoCommandDefine = 43, 
		RULE_pseudoCommandDefineArguments = 44, RULE_namespace = 45, RULE_labelDirective = 46, 
		RULE_plugin = 47, RULE_segment = 48, RULE_segmentDef = 49, RULE_segmentOut = 50, 
		RULE_fileDirective = 51, RULE_diskDirective = 52, RULE_diskDirectiveContent = 53, 
		RULE_parameterMap = 54, RULE_parameterMapItems = 55, RULE_parameterMapItem = 56, 
		RULE_modify = 57, RULE_fileModify = 58, RULE_assert = 59, RULE_assertError = 60, 
		RULE_pseudopc = 61, RULE_zp = 62, RULE_zpArgumentList = 63, RULE_zpArgument = 64, 
		RULE_fileName = 65, RULE_preprocessorDirective = 66, RULE_preprocessorDefine = 67, 
		RULE_preprocessorUndef = 68, RULE_preprocessorImport = 69, RULE_preprocessorImportIf = 70, 
		RULE_preprocessorImportOnce = 71, RULE_preprocessorIf = 72, RULE_preprocessorBlock = 73, 
		RULE_preprocessorCondition = 74, RULE_directive = 75, RULE_memoryDirective = 76, 
		RULE_cpuDirective = 77, RULE_byteDirective = 78, RULE_wordDirective = 79, 
		RULE_dwordDirective = 80, RULE_textDirective = 81, RULE_fillDirective = 82, 
		RULE_fillDirectiveArguments = 83, RULE_fillExpression = 84, RULE_encodingDirective = 85, 
		RULE_importDataDirective = 86, RULE_labelName = 87, RULE_atName = 88, 
		RULE_file = 89, RULE_numberList = 90, RULE_numericList = 91, RULE_numeric = 92, 
		RULE_number = 93, RULE_lohibyte = 94, RULE_decNumber = 95, RULE_hexNumber = 96, 
		RULE_binNumber = 97, RULE_boolean = 98, RULE_opcodeExtension = 99, RULE_anyString = 100, 
		RULE_fullOpcode = 101, RULE_opcode = 102, RULE_color = 103, RULE_opcodeConstant = 104;
	public static readonly string[] ruleNames = {
		"program", "units", "unit", "label", "instruction", "scope", "argumentList", 
		"argument", "labelOffsetReference", "expression", "binaryop", "assignment_expression", 
		"shorthand_assignment_expression", "unary_operator", "compareop", "classFunction", 
		"function", "condition", "compiler_statement", "print", "printnow", "forInit", 
		"forVar", "var", "const", "if", "errorif", "eval", "break", "watch", "watchArguments", 
		"enum", "enumValues", "enumValue", "for", "while", "struct", "variableList", 
		"variable", "define", "functionDefine", "return", "macroDefine", "pseudoCommandDefine", 
		"pseudoCommandDefineArguments", "namespace", "labelDirective", "plugin", 
		"segment", "segmentDef", "segmentOut", "fileDirective", "diskDirective", 
		"diskDirectiveContent", "parameterMap", "parameterMapItems", "parameterMapItem", 
		"modify", "fileModify", "assert", "assertError", "pseudopc", "zp", "zpArgumentList", 
		"zpArgument", "fileName", "preprocessorDirective", "preprocessorDefine", 
		"preprocessorUndef", "preprocessorImport", "preprocessorImportIf", "preprocessorImportOnce", 
		"preprocessorIf", "preprocessorBlock", "preprocessorCondition", "directive", 
		"memoryDirective", "cpuDirective", "byteDirective", "wordDirective", "dwordDirective", 
		"textDirective", "fillDirective", "fillDirectiveArguments", "fillExpression", 
		"encodingDirective", "importDataDirective", "labelName", "atName", "file", 
		"numberList", "numericList", "numeric", "number", "lohibyte", "decNumber", 
		"hexNumber", "binNumber", "boolean", "opcodeExtension", "anyString", "fullOpcode", 
		"opcode", "color", "opcodeConstant"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#'", null, null, null, null, null, null, null, null, 
		null, "'a'", "'abs'", "'binary'", "'c64'", "'.text'", "'text'", "'source'", 
		"'.encoding'", "'.fill'", "'.fillword'", "'.lohifill'", null, null, null, 
		"'.cpu'", "'.byte'", "'.word'", "'.dword'", "'_6502NoIllegals'", "'_6502'", 
		"'dtv'", "'_65c02'", "'assert'", "'asserterror'", "'.print'", "'.printnow'", 
		"'.var'", "'var'", "'.import'", "'.const'", "'.if'", "'else'", "'.errorif'", 
		"'.eval'", "'.enum'", "'.for'", "'.while'", "'.struct'", "'.define'", 
		"'.function'", "'.return'", "'.macro'", "'.pseudocommand'", "'.pseudopc'", 
		"'.namespace'", "'.segment'", "'.segmentdef'", "'.segmentout'", "'.modify'", 
		"'.fileModify'", "'.plugin'", "'.label'", "'.file'", "'.disk'", "'.pc'", 
		"'.break'", "'.watch'", "'.zp'", "'BLACK'", "'WHITE'", "'RED'", "'CYAN'", 
		"'PURPLE'", "'GREEN'", "'BLUE'", "'YELLOW'", "'ORANGE'", "'BROWN'", "'LIGHT_RED'", 
		"'DARK_GRAY'", "'DARK_GREY'", "'GRAY'", "'GREY'", "'LIGHT_GREEN'", "'LIGHT_BLUE'", 
		"'LIGHT_GRAY'", "'LIGHT_GREY'", "'{'", "'}'", "'['", "']'", "'('", "')'", 
		"'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", 
		"'|'", "'^'", "'!'", "'~'", "'@'", "'='", "'<'", "'>'", "'?'", "'::'", 
		"'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", "'<='", 
		"'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", 
		"'<<'", "'>>'", "'<<='", "'??='", "'..'", "'true'", "'false'", null, null, 
		null, null, null, null, null, null, "'adc'", "'and'", "'asl'", "'bcc'", 
		"'bcs'", "'beq'", "'bit'", "'bmi'", "'bne'", "'bpl'", "'bra'", "'brk'", 
		"'bvc'", "'bvs'", "'clc'", "'cld'", "'cli'", "'clv'", "'cmp'", "'cpx'", 
		"'cpy'", "'dec'", "'dex'", "'dey'", "'eor'", "'inc'", "'inx'", "'iny'", 
		"'jmp'", "'jsr'", "'lda'", "'ldy'", "'ldx'", "'lsr'", "'nop'", "'ora'", 
		"'pha'", "'phx'", "'phy'", "'php'", "'pla'", "'plp'", "'ply'", "'rol'", 
		"'ror'", "'rti'", "'rts'", "'sbc'", "'sec'", "'sed'", "'sei'", "'sta'", 
		"'stx'", "'sty'", "'stz'", "'tax'", "'tay'", "'tsx'", "'txa'", "'txs'", 
		"'tya'", "'ADC_ABS'", "'ADC_ABSX'", "'ADC_ABSY'", "'ADC_IMM'", "'ADC_IZPX'", 
		"'ADC_IZPY'", "'ADC_ZP'", "'ADC_ZPX'", "'AHX_ABSY'", "'AHX_IZPY'", "'ALR_IMM'", 
		"'ANC_IMM'", "'ANC2_IMM'", "'AND_ABS'", "'AND_ABSX'", "'AND_ABSY'", "'AND_IMM'", 
		"'AND_IZPX'", "'AND_IZPY'", "'AND_ZP'", "'AND_ZPX'", "'ANE_IMM'", "'ARR_IMM'", 
		"'ASL'", "'ASL_ABS'", "'ASL_ABSX'", "'ASL_ZP'", "'ASL_ZPX'", "'ASR_IMM'", 
		"'AXS_IMM'", "'BCC_REL'", "'BCS_REL'", "'BEQ_REL'", "'BIT_ABS'", "'BIT_ABSX'", 
		"'BIT_IMM'", "'BIT_ZP'", "'BIT_ZPX'", "'BMI_REL'", "'BNE_REL'", "'BPL_REL'", 
		"'BRA_REL'", "'BRK'", "'BVC_REL'", "'BVS_REL'", "'CLC'", "'CLD'", "'CLI'", 
		"'CLV'", "'CMP_ABS'", "'CMP_ABSX'", "'CMP_ABSY'", "'CMP_IMM'", "'CMP_IZPX'", 
		"'CMP_IZPY'", "'CMP_ZP'", "'CMP_ZPX'", "'CPX_ABS'", "'CPX_IMM'", "'CPX_ZP'", 
		"'CPY_ABS'", "'CPY_IMM'", "'CPY_ZP'", "'DCM_ABS'", "'DCM_ABSX'", "'DCM_ABSY'", 
		"'DCM_IZPX'", "'DCM_IZPY'", "'DCM_ZP'", "'DCM_ZPX'", "'DCP_ABS'", "'DCP_ABSX'", 
		"'DCP_ABSY'", "'DCP_IZPX'", "'DCP_IZPY'", "'DCP_ZP'", "'DCP_ZPX'", "'DEC'", 
		"'DEC_ABS'", "'DEC_ABSX'", "'DEC_ZP'", "'DEC_ZPX'", "'DEX'", "'DEY'", 
		"'EOR_ABS'", "'EOR_ABSX'", "'EOR_ABSY'", "'EOR_IMM'", "'EOR_IZPX'", "'EOR_IZPY'", 
		"'EOR_ZP'", "'EOR_ZPX'", "'INC'", "'INC_ABS'", "'INC_ABSX'", "'INC_ZP'", 
		"'INC_ZPX'", "'INS_ABS'", "'INS_ABSX'", "'INS_ABSY'", "'INS_IZPX'", "'INS_IZPY'", 
		"'INS_ZP'", "'INS_ZPX'", "'INX'", "'INY'", "'ISB_ABS'", "'ISB_ABSX'", 
		"'ISB_ABSY'", "'ISB_IZPX'", "'ISB_IZPY'", "'ISB_ZP'", "'ISB_ZPX'", "'ISC_ABS'", 
		"'ISC_ABSX'", "'ISC_ABSY'", "'ISC_IZPX'", "'ISC_IZPY'", "'ISC_ZP'", "'ISC_ZPX'", 
		"'JMP_ABS'", "'JMP_IND'", "'JSR_ABS'", "'LAE_ABSY'", "'LAS_ABSY'", "'LAX_ABS'", 
		"'LAX_ABSY'", "'LAX_IMM'", "'LAX_IZPX'", "'LAX_IZPY'", "'LAX_ZP'", "'LAX_ZPY'", 
		"'LDA_ABS'", "'LDA_ABSX'", "'LDA_ABSY'", "'LDA_IMM'", "'LDA_IZPX'", "'LDA_IZPY'", 
		"'LDA_ZP'", "'LDA_ZPX'", "'LDS_ABSY'", "'LDX_ABS'", "'LDX_ABSY'", "'LDX_IMM'", 
		"'LDX_ZP'", "'LDX_ZPY'", "'LDY_ABS'", "'LDY_ABSX'", "'LDY_IMM'", "'LDY_ZP'", 
		"'LDY_ZPX'", "'LSR'", "'LSR_ABS'", "'LSR_ABSX'", "'LSR_ZP'", "'LSR_ZPX'", 
		"'LXA_ABS'", "'LXA_ABSY'", "'LXA_IMM'", "'LXA_IZPX'", "'LXA_IZPY'", "'LXA_ZP'", 
		"'LXA_ZPY'", "'NOP'", "'NOP_ABS'", "'NOP_ABSX'", "'NOP_IMM'", "'NOP_ZP'", 
		"'NOP_ZPX'", "'ORA_ABS'", "'ORA_ABSX'", "'ORA_ABSY'", "'ORA_IMM'", "'ORA_IZPX'", 
		"'ORA_IZPY'", "'ORA_ZP'", "'ORA_ZPX'", "'PHA'", "'PHP'", "'PHX'", "'PHY'", 
		"'PLA'", "'PLP'", "'PLX'", "'PLY'", "'RLA_ABS'", "'RLA_ABSX'", "'RLA_ABSY'", 
		"'RLA_IZPX'", "'RLA_IZPY'", "'RLA_ZP'", "'RLA_ZPX'", "'RMB0_ZP'", "'RMB1_ZP'", 
		"'RMB2_ZP'", "'RMB3_ZP'", "'RMB4_ZP'", "'RMB5_ZP'", "'RMB6_ZP'", "'RMB7_ZP'", 
		"'ROL'", "'ROL_ABS'", "'ROL_ABSX'", "'ROL_ZP'", "'ROL_ZPX'", "'ROR'", 
		"'ROR_ABS'", "'ROR_ABSX'", "'ROR_ZP'", "'ROR_ZPX'", "'RRA_ABS'", "'RRA_ABSX'", 
		"'RRA_ABSY'", "'RRA_IZPX'", "'RRA_IZPY'", "'RRA_ZP'", "'RRA_ZPX'", "'RTI'", 
		"'RTS'", "'SAC_IMM'", "'SAX_ABS'", "'SAX_IZPX'", "'SAX_ZP'", "'SAX_ZPY'", 
		"'SBC_ABS'", "'SBC_ABSX'", "'SBC_ABSY'", "'SBC_IMM'", "'SBC_IZPX'", "'SBC_IZPY'", 
		"'SBC_ZP'", "'SBC_ZPX'", "'SBC2_IMM'", "'SBX_IMM'", "'SEC'", "'SED'", 
		"'SEI'", "'SHA_ABSY'", "'SHA_IZPY'", "'SHS_ABSY'", "'SHX_ABSY'", "'SHY_ABSX'", 
		"'SIR_IMM'", "'SLO_ABS'", "'SLO_ABSX'", "'SLO_ABSY'", "'SLO_IZPX'", "'SLO_IZPY'", 
		"'SLO_ZP'", "'SLO_ZPX'", "'SMB0_ZP'", "'SMB1_ZP'", "'SMB2_ZP'", "'SMB3_ZP'", 
		"'SMB4_ZP'", "'SMB5_ZP'", "'SMB6_ZP'", "'SMB7_ZP'", "'SRE_ABS'", "'SRE_ABSX'", 
		"'SRE_ABSY'", "'SRE_IZPX'", "'SRE_IZPY'", "'SRE_ZP'", "'SRE_ZPX'", "'STA_ABS'", 
		"'STA_ABSX'", "'STA_ABSY'", "'STA_IZPX'", "'STA_IZPY'", "'STA_ZP'", "'STA_ZPX'", 
		"'STP'", "'STX_ABS'", "'STX_ZP'", "'STX_ZPY'", "'STY_ABS'", "'STY_ZP'", 
		"'STY_ZPX'", "'STZ_ABS'", "'STZ_ABSX'", "'STZ_ZP'", "'STZ_ZPX'", "'TAS_ABSY'", 
		"'TAX'", "'TAY'", "'TRB_ABS'", "'TRB_ZP'", "'TSB_ABS'", "'TSB_ZP'", "'TSX'", 
		"'TXA'", "'TXS'", "'TYA'", "'WAI'", "'XAA_IMM'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "EOL", "HASH", "HASHDEFINE", "HASHUNDEF", "HASHIF", "HASHENDIF", 
		"HASHELSE", "HASHELIF", "HASHIMPORT", "HASHIMPORTONCE", "HASHIMPORTIF", 
		"ONLYA", "ABS", "BINARY", "C64", "DOTTEXT", "TEXT", "SOURCE", "DOTENCODING", 
		"DOTFILL", "DOTFILLWORD", "DOTLOHIFILL", "BYTE", "WORD", "DWORD", "DOTCPU", 
		"DOTBYTE", "DOTWORD", "DOTDWORD", "CPU6502NOILLEGALS", "CPU6502", "DTV", 
		"CPU65C02", "ASSERT", "ASSERTERROR", "PRINT", "PRINTNOW", "DOTVAR", "VAR", 
		"DOTIMPORT", "CONST", "IF", "ELSE", "ERRORIF", "EVAL", "ENUM", "FOR", 
		"WHILE", "STRUCT", "DEFINE", "FUNCTION", "RETURN", "MACRO", "PSEUDOCOMMAND", 
		"PSEUDOPC", "NAMESPACE", "SEGMENT", "SEGMENTDEF", "SEGMENTOUT", "MODIFY", 
		"FILEMODIFY", "PLUGIN", "LABEL", "FILE", "DISK", "PC", "BREAK", "WATCH", 
		"ZP", "BLACK", "WHITE", "RED", "CYAN", "PURPLE", "GREEN", "BLUE", "YELLOW", 
		"ORANGE", "BROWN", "LIGHT_RED", "DARK_GRAY", "DARK_GREY", "GRAY", "GREY", 
		"LIGHT_GREEN", "LIGHT_BLUE", "LIGHT_GRAY", "LIGHT_GREY", "OPEN_BRACE", 
		"CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", 
		"DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", 
		"PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "AT", "ASSIGNMENT", 
		"LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", "OP_DEC", 
		"OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", 
		"OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
		"OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", 
		"OP_RIGHT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
		"OP_RANGE", "TRUE", "FALSE", "DEC_NUMBER", "HEX_NUMBER", "BIN_NUMBER", 
		"CHAR", "STRING", "OPEN_STRING", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
		"ADC", "AND", "ASL", "BCC", "BCS", "BEQ", "BIT", "BMI", "BNE", "BPL", 
		"BRA", "BRK", "BVC", "BVS", "CLC", "CLD", "CLI", "CLV", "CMP", "CPX", 
		"CPY", "DEC", "DEX", "DEY", "EOR", "INC", "INX", "INY", "JMP", "JSR", 
		"LDA", "LDY", "LDX", "LSR", "NOP", "ORA", "PHA", "PHX", "PHY", "PHP", 
		"PLA", "PLP", "PLY", "ROL", "ROR", "RTI", "RTS", "SBC", "SEC", "SED", 
		"SEI", "STA", "STX", "STY", "STZ", "TAX", "TAY", "TSX", "TXA", "TXS", 
		"TYA", "ADC_ABS_CONST", "ADC_ABSX_CONST", "ADC_ABSY_CONST", "ADC_IMM_CONST", 
		"ADC_IZPX_CONST", "ADC_IZPY_CONST", "ADC_ZP_CONST", "ADC_ZPX_CONST", "AHX_ABSY_CONST", 
		"AHX_IZPY_CONST", "ALR_IMM_CONST", "ANC_IMM_CONST", "ANC2_IMM_CONST", 
		"AND_ABS_CONST", "AND_ABSX_CONST", "AND_ABSY_CONST", "AND_IMM_CONST", 
		"AND_IZPX_CONST", "AND_IZPY_CONST", "AND_ZP_CONST", "AND_ZPX_CONST", "ANE_IMM_CONST", 
		"ARR_IMM_CONST", "ASL_CONST", "ASL_ABS_CONST", "ASL_ABSX_CONST", "ASL_ZP_CONST", 
		"ASL_ZPX_CONST", "ASR_IMM_CONST", "AXS_IMM_CONST", "BCC_REL_CONST", "BCS_REL_CONST", 
		"BEQ_REL_CONST", "BIT_ABS_CONST", "BIT_ABSX_CONST", "BIT_IMM_CONST", "BIT_ZP_CONST", 
		"BIT_ZPX_CONST", "BMI_REL_CONST", "BNE_REL_CONST", "BPL_REL_CONST", "BRA_REL_CONST", 
		"BRK_CONST", "BVC_REL_CONST", "BVS_REL_CONST", "CLC_CONST", "CLD_CONST", 
		"CLI_CONST", "CLV_CONST", "CMP_ABS_CONST", "CMP_ABSX_CONST", "CMP_ABSY_CONST", 
		"CMP_IMM_CONST", "CMP_IZPX_CONST", "CMP_IZPY_CONST", "CMP_ZP_CONST", "CMP_ZPX_CONST", 
		"CPX_ABS_CONST", "CPX_IMM_CONST", "CPX_ZP_CONST", "CPY_ABS_CONST", "CPY_IMM_CONST", 
		"CPY_ZP_CONST", "DCM_ABS_CONST", "DCM_ABSX_CONST", "DCM_ABSY_CONST", "DCM_IZPX_CONST", 
		"DCM_IZPY_CONST", "DCM_ZP_CONST", "DCM_ZPX_CONST", "DCP_ABS_CONST", "DCP_ABSX_CONST", 
		"DCP_ABSY_CONST", "DCP_IZPX_CONST", "DCP_IZPY_CONST", "DCP_ZP_CONST", 
		"DCP_ZPX_CONST", "DEC_CONST", "DEC_ABS_CONST", "DEC_ABSX_CONST", "DEC_ZP_CONST", 
		"DEC_ZPX_CONST", "DEX_CONST", "DEY_CONST", "EOR_ABS_CONST", "EOR_ABSX_CONST", 
		"EOR_ABSY_CONST", "EOR_IMM_CONST", "EOR_IZPX_CONST", "EOR_IZPY_CONST", 
		"EOR_ZP_CONST", "EOR_ZPX_CONST", "INC_CONST", "INC_ABS_CONST", "INC_ABSX_CONST", 
		"INC_ZP_CONST", "INC_ZPX_CONST", "INS_ABS_CONST", "INS_ABSX_CONST", "INS_ABSY_CONST", 
		"INS_IZPX_CONST", "INS_IZPY_CONST", "INS_ZP_CONST", "INS_ZPX_CONST", "INX_CONST", 
		"INY_CONST", "ISB_ABS_CONST", "ISB_ABSX_CONST", "ISB_ABSY_CONST", "ISB_IZPX_CONST", 
		"ISB_IZPY_CONST", "ISB_ZP_CONST", "ISB_ZPX_CONST", "ISC_ABS_CONST", "ISC_ABSX_CONST", 
		"ISC_ABSY_CONST", "ISC_IZPX_CONST", "ISC_IZPY_CONST", "ISC_ZP_CONST", 
		"ISC_ZPX_CONST", "JMP_ABS_CONST", "JMP_IND_CONST", "JSR_ABS_CONST", "LAE_ABSY_CONST", 
		"LAS_ABSY_CONST", "LAX_ABS_CONST", "LAX_ABSY_CONST", "LAX_IMM_CONST", 
		"LAX_IZPX_CONST", "LAX_IZPY_CONST", "LAX_ZP_CONST", "LAX_ZPY_CONST", "LDA_ABS_CONST", 
		"LDA_ABSX_CONST", "LDA_ABSY_CONST", "LDA_IMM_CONST", "LDA_IZPX_CONST", 
		"LDA_IZPY_CONST", "LDA_ZP_CONST", "LDA_ZPX_CONST", "LDS_ABSY_CONST", "LDX_ABS_CONST", 
		"LDX_ABSY_CONST", "LDX_IMM_CONST", "LDX_ZP_CONST", "LDX_ZPY_CONST", "LDY_ABS_CONST", 
		"LDY_ABSX_CONST", "LDY_IMM_CONST", "LDY_ZP_CONST", "LDY_ZPX_CONST", "LSR_CONST", 
		"LSR_ABS_CONST", "LSR_ABSX_CONST", "LSR_ZP_CONST", "LSR_ZPX_CONST", "LXA_ABS_CONST", 
		"LXA_ABSY_CONST", "LXA_IMM_CONST", "LXA_IZPX_CONST", "LXA_IZPY_CONST", 
		"LXA_ZP_CONST", "LXA_ZPY_CONST", "NOP_CONST", "NOP_ABS_CONST", "NOP_ABSX_CONST", 
		"NOP_IMM_CONST", "NOP_ZP_CONST", "NOP_ZPX_CONST", "ORA_ABS_CONST", "ORA_ABSX_CONST", 
		"ORA_ABSY_CONST", "ORA_IMM_CONST", "ORA_IZPX_CONST", "ORA_IZPY_CONST", 
		"ORA_ZP_CONST", "ORA_ZPX_CONST", "PHA_CONST", "PHP_CONST", "PHX_CONST", 
		"PHY_CONST", "PLA_CONST", "PLP_CONST", "PLX_CONST", "PLY_CONST", "RLA_ABS_CONST", 
		"RLA_ABSX_CONST", "RLA_ABSY_CONST", "RLA_IZPX_CONST", "RLA_IZPY_CONST", 
		"RLA_ZP_CONST", "RLA_ZPX_CONST", "RMB0_ZP_CONST", "RMB1_ZP_CONST", "RMB2_ZP_CONST", 
		"RMB3_ZP_CONST", "RMB4_ZP_CONST", "RMB5_ZP_CONST", "RMB6_ZP_CONST", "RMB7_ZP_CONST", 
		"ROL_CONST", "ROL_ABS_CONST", "ROL_ABSX_CONST", "ROL_ZP_CONST", "ROL_ZPX_CONST", 
		"ROR_CONST", "ROR_ABS_CONST", "ROR_ABSX_CONST", "ROR_ZP_CONST", "ROR_ZPX_CONST", 
		"RRA_ABS_CONST", "RRA_ABSX_CONST", "RRA_ABSY_CONST", "RRA_IZPX_CONST", 
		"RRA_IZPY_CONST", "RRA_ZP_CONST", "RRA_ZPX_CONST", "RTI_CONST", "RTS_CONST", 
		"SAC_IMM_CONST", "SAX_ABS_CONST", "SAX_IZPX_CONST", "SAX_ZP_CONST", "SAX_ZPY_CONST", 
		"SBC_ABS_CONST", "SBC_ABSX_CONST", "SBC_ABSY_CONST", "SBC_IMM_CONST", 
		"SBC_IZPX_CONST", "SBC_IZPY_CONST", "SBC_ZP_CONST", "SBC_ZPX_CONST", "SBC2_IMM_CONST", 
		"SBX_IMM_CONST", "SEC_CONST", "SED_CONST", "SEI_CONST", "SHA_ABSY_CONST", 
		"SHA_IZPY_CONST", "SHS_ABSY_CONST", "SHX_ABSY_CONST", "SHY_ABSX_CONST", 
		"SIR_IMM_CONST", "SLO_ABS_CONST", "SLO_ABSX_CONST", "SLO_ABSY_CONST", 
		"SLO_IZPX_CONST", "SLO_IZPY_CONST", "SLO_ZP_CONST", "SLO_ZPX_CONST", "SMB0_ZP_CONST", 
		"SMB1_ZP_CONST", "SMB2_ZP_CONST", "SMB3_ZP_CONST", "SMB4_ZP_CONST", "SMB5_ZP_CONST", 
		"SMB6_ZP_CONST", "SMB7_ZP_CONST", "SRE_ABS_CONST", "SRE_ABSX_CONST", "SRE_ABSY_CONST", 
		"SRE_IZPX_CONST", "SRE_IZPY_CONST", "SRE_ZP_CONST", "SRE_ZPX_CONST", "STA_ABS_CONST", 
		"STA_ABSX_CONST", "STA_ABSY_CONST", "STA_IZPX_CONST", "STA_IZPY_CONST", 
		"STA_ZP_CONST", "STA_ZPX_CONST", "STP_CONST", "STX_ABS_CONST", "STX_ZP_CONST", 
		"STX_ZPY_CONST", "STY_ABS_CONST", "STY_ZP_CONST", "STY_ZPX_CONST", "STZ_ABS_CONST", 
		"STZ_ABSX_CONST", "STZ_ZP_CONST", "STZ_ZPX_CONST", "TAS_ABSY_CONST", "TAX_CONST", 
		"TAY_CONST", "TRB_ABS_CONST", "TRB_ZP_CONST", "TSB_ABS_CONST", "TSB_ZP_CONST", 
		"TSX_CONST", "TXA_CONST", "TXS_CONST", "TYA_CONST", "WAI_CONST", "XAA_IMM_CONST", 
		"UNQUOTED_STRING", "DEFINED_TOKEN", "HD_WS", "UNDEFINED_TOKEN", "HU_WS", 
		"IF_CONDITION", "I_INTENTIONALLY_IGNORED", "IA_INTENTIONALLY_IGNORED", 
		"IIF_CONDITION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KickAssemblerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KickAssemblerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KickAssemblerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KickAssemblerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitsContext units() {
			return GetRuleContext<UnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(KickAssemblerParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			units();
			State = 211;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitsContext units() {
			return GetRuleContext<UnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(KickAssemblerParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(KickAssemblerParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(KickAssemblerParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(KickAssemblerParser.EOL, i);
		}
		public UnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_units; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitsContext units() {
		UnitsContext _localctx = new UnitsContext(Context, State);
		EnterRule(_localctx, 2, RULE_units);
		int _la;
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				unit();
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 214;
					Match(SEMICOLON);
					}
					}
					State = 217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SEMICOLON );
				State = 219;
				units();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				unit();
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 222;
					Match(EOL);
					}
					}
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EOL );
				State = 227;
				units();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229;
				unit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compiler_statementContext compiler_statement() {
			return GetRuleContext<Compiler_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorDirectiveContext preprocessorDirective() {
			return GetRuleContext<PreprocessorDirectiveContext>(0);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 4, RULE_unit);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				instruction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				label();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235;
				directive();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 236;
				scope();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 237;
				compiler_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 238;
				preprocessorDirective();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KickAssemblerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 6, RULE_label);
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 241;
				labelName();
				State = 242;
				Match(COLON);
				State = 243;
				unit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245;
				labelName();
				State = 246;
				Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullOpcodeContext fullOpcode() {
			return GetRuleContext<FullOpcodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KickAssemblerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 8, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 250;
				Match(COLON);
				}
			}

			State = 253;
			fullOpcode();
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 24584L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 7288033640447L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & 127L) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & -1L) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & -1L) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & -1L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & -1L) != 0) || ((((_la - 466)) & ~0x3f) == 0 && ((1L << (_la - 466)) & 2199023255551L) != 0)) {
				{
				State = 254;
				argumentList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KickAssemblerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitsContext units() {
			return GetRuleContext<UnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 10, RULE_scope);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNQUOTED_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 257;
				Match(UNQUOTED_STRING);
				State = 258;
				Match(COLON);
				State = 259;
				Match(OPEN_BRACE);
				State = 260;
				units();
				State = 261;
				Match(CLOSE_BRACE);
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263;
				Match(OPEN_BRACE);
				State = 264;
				units();
				State = 265;
				Match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 12, RULE_argumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			argument();
			State = 274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 270;
					Match(COMMA);
					State = 271;
					argument();
					}
					} 
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(KickAssemblerParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(KickAssemblerParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(KickAssemblerParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(KickAssemblerParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(KickAssemblerParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeConstantContext opcodeConstant() {
			return GetRuleContext<OpcodeConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(KickAssemblerParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(KickAssemblerParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelOffsetReferenceContext labelOffsetReference() {
			return GetRuleContext<LabelOffsetReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(KickAssemblerParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_argument);
		int _la;
		try {
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 277;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 280;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==PLUS || _la==MINUS );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				Match(HASH);
				State = 283;
				opcodeConstant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 284;
				Match(HASH);
				State = 285;
				numeric();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286;
				Match(OPEN_PARENS);
				State = 287;
				argumentList();
				State = 288;
				Match(CLOSE_PARENS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 290;
				Match(OPEN_BRACKET);
				State = 291;
				argumentList();
				State = 292;
				Match(CLOSE_BRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 294;
				labelOffsetReference();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 295;
				Match(STAR);
				State = 296;
				expression(0);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 297;
				expression(0);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 298;
				Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelOffsetReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KickAssemblerParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(KickAssemblerParser.PLUS, 0); }
		public LabelOffsetReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelOffsetReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterLabelOffsetReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitLabelOffsetReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelOffsetReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelOffsetReferenceContext labelOffsetReference() {
		LabelOffsetReferenceContext _localctx = new LabelOffsetReferenceContext(Context, State);
		EnterRule(_localctx, 16, RULE_labelOffsetReference);
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301;
				labelName();
				State = 302;
				Match(MINUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304;
				labelName();
				State = 305;
				Match(PLUS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(KickAssemblerParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(KickAssemblerParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(KickAssemblerParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KickAssemblerParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassFunctionContext classFunction() {
			return GetRuleContext<ClassFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeConstantContext opcodeConstant() {
			return GetRuleContext<OpcodeConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryopContext binaryop() {
			return GetRuleContext<BinaryopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(KickAssemblerParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KickAssemblerParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompareopContext compareop() {
			return GetRuleContext<CompareopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(KickAssemblerParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KickAssemblerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(KickAssemblerParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(KickAssemblerParser.OP_DEC, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 310;
				Match(OPEN_PARENS);
				State = 311;
				expression(0);
				State = 312;
				Match(CLOSE_PARENS);
				}
				break;
			case 2:
				{
				State = 314;
				Match(OPEN_BRACKET);
				State = 315;
				expression(0);
				State = 316;
				Match(CLOSE_BRACKET);
				}
				break;
			case 3:
				{
				State = 318;
				Match(PLUS);
				State = 319;
				expression(12);
				}
				break;
			case 4:
				{
				State = 320;
				Match(MINUS);
				State = 321;
				expression(11);
				}
				break;
			case 5:
				{
				State = 322;
				classFunction();
				}
				break;
			case 6:
				{
				State = 323;
				function();
				}
				break;
			case 7:
				{
				State = 324;
				numeric();
				}
				break;
			case 8:
				{
				State = 325;
				opcodeConstant();
				}
				break;
			case 9:
				{
				State = 326;
				color();
				}
				break;
			case 10:
				{
				State = 327;
				boolean();
				}
				break;
			case 11:
				{
				State = 328;
				labelName();
				}
				break;
			case 12:
				{
				State = 329;
				Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 364;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 362;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 332;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 333;
						binaryop();
						State = 334;
						expression(20);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 336;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 337;
						Match(STAR);
						State = 338;
						expression(19);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 339;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 340;
						Match(DIV);
						State = 341;
						expression(18);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 342;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 343;
						Match(PLUS);
						State = 344;
						expression(17);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 345;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 346;
						Match(MINUS);
						State = 347;
						expression(16);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 348;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 349;
						compareop();
						State = 350;
						expression(11);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 352;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 353;
						Match(INTERR);
						State = 354;
						expression(0);
						State = 355;
						Match(COLON);
						State = 356;
						expression(10);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 358;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 359;
						Match(OP_INC);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 360;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 361;
						Match(OP_DEC);
						}
						break;
					}
					} 
				}
				State = 366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinaryopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(KickAssemblerParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(KickAssemblerParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(KickAssemblerParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(KickAssemblerParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT() { return GetToken(KickAssemblerParser.OP_LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHT_SHIFT() { return GetToken(KickAssemblerParser.OP_RIGHT_SHIFT, 0); }
		public BinaryopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBinaryop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBinaryop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryopContext binaryop() {
		BinaryopContext _localctx = new BinaryopContext(Context, State);
		EnterRule(_localctx, 20, RULE_binaryop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & 1610612759L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		public AnyStringContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyStringContext anyString() {
			return GetRuleContext<AnyStringContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			_localctx.name = anyString();
			State = 370;
			Match(ASSIGNMENT);
			State = 371;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shorthand_assignment_expressionContext : ParserRuleContext {
		public AnyStringContext name;
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyStringContext anyString() {
			return GetRuleContext<AnyStringContext>(0);
		}
		public Shorthand_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shorthand_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterShorthand_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitShorthand_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShorthand_assignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shorthand_assignment_expressionContext shorthand_assignment_expression() {
		Shorthand_assignment_expressionContext _localctx = new Shorthand_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_shorthand_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			_localctx.name = anyString();
			State = 374;
			unary_operator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(KickAssemblerParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(KickAssemblerParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(KickAssemblerParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(KickAssemblerParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(KickAssemblerParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KickAssemblerParser.DIV, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_unary_operator);
		try {
			State = 388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376;
				Match(PLUS);
				State = 377;
				Match(PLUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378;
				Match(MINUS);
				State = 379;
				Match(MINUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 380;
				Match(PLUS);
				State = 381;
				Match(ASSIGNMENT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 382;
				Match(MINUS);
				State = 383;
				Match(ASSIGNMENT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 384;
				Match(STAR);
				State = 385;
				Match(ASSIGNMENT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 386;
				Match(DIV);
				State = 387;
				Match(ASSIGNMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(KickAssemblerParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(KickAssemblerParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(KickAssemblerParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(KickAssemblerParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(KickAssemblerParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(KickAssemblerParser.LT, 0); }
		public CompareopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCompareop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCompareop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareopContext compareop() {
		CompareopContext _localctx = new CompareopContext(Context, State);
		EnterRule(_localctx, 28, RULE_compareop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 15363L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(KickAssemblerParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(KickAssemblerParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KickAssemblerParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterClassFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitClassFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassFunctionContext classFunction() {
		ClassFunctionContext _localctx = new ClassFunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_classFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(STRING);
			State = 393;
			Match(DOT);
			State = 394;
			Match(STRING);
			State = 395;
			Match(OPEN_PARENS);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 24584L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 7288033640447L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & 127L) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & -1L) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & -1L) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & -1L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & -1L) != 0) || ((((_la - 466)) & ~0x3f) == 0 && ((1L << (_la - 466)) & 2199023255551L) != 0)) {
				{
				State = 396;
				argumentList();
				}
			}

			State = 399;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(STRING);
			State = 402;
			Match(OPEN_PARENS);
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 24584L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 7288033640447L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & 127L) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & -1L) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & -1L) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & -1L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & -1L) != 0) || ((((_la - 466)) & ~0x3f) == 0 && ((1L << (_la - 466)) & 2199023255551L) != 0)) {
				{
				State = 403;
				argumentList();
				}
			}

			State = 406;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 34, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compiler_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintnowContext printnow() {
			return GetRuleContext<PrintnowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstContext @const() {
			return GetRuleContext<ConstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorifContext errorif() {
			return GetRuleContext<ErrorifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvalContext eval() {
			return GetRuleContext<EvalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakContext @break() {
			return GetRuleContext<BreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WatchContext watch() {
			return GetRuleContext<WatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefineContext define() {
			return GetRuleContext<DefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefineContext functionDefine() {
			return GetRuleContext<FunctionDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroDefineContext macroDefine() {
			return GetRuleContext<MacroDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoCommandDefineContext pseudoCommandDefine() {
			return GetRuleContext<PseudoCommandDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDirectiveContext labelDirective() {
			return GetRuleContext<LabelDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentDefContext segmentDef() {
			return GetRuleContext<SegmentDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentOutContext segmentOut() {
			return GetRuleContext<SegmentOutContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PluginContext plugin() {
			return GetRuleContext<PluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileDirectiveContext fileDirective() {
			return GetRuleContext<FileDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiskDirectiveContext diskDirective() {
			return GetRuleContext<DiskDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifyContext modify() {
			return GetRuleContext<ModifyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileModifyContext fileModify() {
			return GetRuleContext<FileModifyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertContext assert() {
			return GetRuleContext<AssertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertErrorContext assertError() {
			return GetRuleContext<AssertErrorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudopcContext pseudopc() {
			return GetRuleContext<PseudopcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ZpContext zp() {
			return GetRuleContext<ZpContext>(0);
		}
		public Compiler_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compiler_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCompiler_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCompiler_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompiler_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compiler_statementContext compiler_statement() {
		Compiler_statementContext _localctx = new Compiler_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_compiler_statement);
		try {
			State = 442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 410;
				print();
				}
				break;
			case PRINTNOW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 411;
				printnow();
				}
				break;
			case DOTVAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 412;
				var();
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 413;
				@const();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 414;
				@if();
				}
				break;
			case ERRORIF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 415;
				errorif();
				}
				break;
			case EVAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 416;
				eval();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 8);
				{
				State = 417;
				@break();
				}
				break;
			case WATCH:
				EnterOuterAlt(_localctx, 9);
				{
				State = 418;
				watch();
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 10);
				{
				State = 419;
				@enum();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 420;
				@for();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 421;
				@while();
				}
				break;
			case STRUCT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 422;
				@struct();
				}
				break;
			case OPEN_BRACE:
			case UNQUOTED_STRING:
				EnterOuterAlt(_localctx, 14);
				{
				State = 423;
				define();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 15);
				{
				State = 424;
				functionDefine();
				}
				break;
			case MACRO:
				EnterOuterAlt(_localctx, 16);
				{
				State = 425;
				macroDefine();
				}
				break;
			case PSEUDOCOMMAND:
				EnterOuterAlt(_localctx, 17);
				{
				State = 426;
				pseudoCommandDefine();
				}
				break;
			case NAMESPACE:
				EnterOuterAlt(_localctx, 18);
				{
				State = 427;
				@namespace();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 19);
				{
				State = 428;
				labelDirective();
				}
				break;
			case SEGMENT:
				EnterOuterAlt(_localctx, 20);
				{
				State = 429;
				segment();
				}
				break;
			case SEGMENTDEF:
				EnterOuterAlt(_localctx, 21);
				{
				State = 430;
				segmentDef();
				}
				break;
			case SEGMENTOUT:
				EnterOuterAlt(_localctx, 22);
				{
				State = 431;
				segmentOut();
				}
				break;
			case PLUGIN:
				EnterOuterAlt(_localctx, 23);
				{
				State = 432;
				plugin();
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 24);
				{
				State = 433;
				fileDirective();
				}
				break;
			case DISK:
				EnterOuterAlt(_localctx, 25);
				{
				State = 434;
				diskDirective();
				}
				break;
			case MODIFY:
				EnterOuterAlt(_localctx, 26);
				{
				State = 435;
				modify();
				}
				break;
			case FILEMODIFY:
				EnterOuterAlt(_localctx, 27);
				{
				State = 436;
				fileModify();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 28);
				{
				State = 437;
				@return();
				}
				break;
			case ASSERT:
				EnterOuterAlt(_localctx, 29);
				{
				State = 438;
				assert();
				}
				break;
			case ASSERTERROR:
				EnterOuterAlt(_localctx, 30);
				{
				State = 439;
				assertError();
				}
				break;
			case LT:
			case GT:
			case DEC_NUMBER:
			case HEX_NUMBER:
			case BIN_NUMBER:
			case CHAR:
				EnterOuterAlt(_localctx, 31);
				{
				State = 440;
				pseudopc();
				}
				break;
			case ZP:
				EnterOuterAlt(_localctx, 32);
				{
				State = 441;
				zp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(KickAssemblerParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 38, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(PRINT);
			State = 445;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintnowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTNOW() { return GetToken(KickAssemblerParser.PRINTNOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintnowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printnow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPrintnow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPrintnow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintnow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintnowContext printnow() {
		PrintnowContext _localctx = new PrintnowContext(Context, State);
		EnterRule(_localctx, 40, RULE_printnow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(PRINTNOW);
			State = 448;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForVarContext forVar() {
			return GetRuleContext<ForVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 42, RULE_forInit);
		try {
			State = 452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 450;
				forVar();
				}
				break;
			case ONLYA:
			case ABS:
			case UNQUOTED_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 451;
				assignment_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(KickAssemblerParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ForVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterForVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitForVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForVarContext forVar() {
		ForVarContext _localctx = new ForVarContext(Context, State);
		EnterRule(_localctx, 44, RULE_forVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			Match(VAR);
			State = 455;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTVAR() { return GetToken(KickAssemblerParser.DOTVAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 46, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			Match(DOTVAR);
			State = 458;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(KickAssemblerParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstContext @const() {
		ConstContext _localctx = new ConstContext(Context, State);
		EnterRule(_localctx, 48, RULE_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			Match(CONST);
			State = 461;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(KickAssemblerParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext[] unit() {
			return GetRuleContexts<UnitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit(int i) {
			return GetRuleContext<UnitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(KickAssemblerParser.ELSE, 0); }
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 50, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(IF);
			State = 464;
			Match(OPEN_PARENS);
			State = 465;
			expression(0);
			State = 466;
			Match(CLOSE_PARENS);
			State = 467;
			unit();
			State = 470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 468;
				Match(ELSE);
				State = 469;
				unit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORIF() { return GetToken(KickAssemblerParser.ERRORIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KickAssemblerParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public ErrorifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterErrorif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitErrorif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorifContext errorif() {
		ErrorifContext _localctx = new ErrorifContext(Context, State);
		EnterRule(_localctx, 52, RULE_errorif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			Match(ERRORIF);
			State = 473;
			Match(OPEN_PARENS);
			State = 474;
			expression(0);
			State = 475;
			Match(CLOSE_PARENS);
			State = 476;
			Match(COMMA);
			State = 477;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVAL() { return GetToken(KickAssemblerParser.EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Shorthand_assignment_expressionContext shorthand_assignment_expression() {
			return GetRuleContext<Shorthand_assignment_expressionContext>(0);
		}
		public EvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalContext eval() {
		EvalContext _localctx = new EvalContext(Context, State);
		EnterRule(_localctx, 54, RULE_eval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(EVAL);
			State = 480;
			shorthand_assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(KickAssemblerParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public BreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakContext @break() {
		BreakContext _localctx = new BreakContext(Context, State);
		EnterRule(_localctx, 56, RULE_break);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(BREAK);
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 483;
				Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WATCH() { return GetToken(KickAssemblerParser.WATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WatchArgumentsContext watchArguments() {
			return GetRuleContext<WatchArgumentsContext>(0);
		}
		public WatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_watch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterWatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitWatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WatchContext watch() {
		WatchContext _localctx = new WatchContext(Context, State);
		EnterRule(_localctx, 58, RULE_watch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(WATCH);
			State = 487;
			watchArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WatchArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public WatchArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_watchArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterWatchArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitWatchArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWatchArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WatchArgumentsContext watchArguments() {
		WatchArgumentsContext _localctx = new WatchArgumentsContext(Context, State);
		EnterRule(_localctx, 60, RULE_watchArguments);
		int _la;
		try {
			State = 502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 489;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 490;
				expression(0);
				State = 491;
				Match(COMMA);
				State = 492;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 494;
				expression(0);
				State = 495;
				Match(COMMA);
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ONLYA || _la==ABS || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 7285886156799L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & 127L) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & -1L) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & -1L) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & -1L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & -1L) != 0) || ((((_la - 466)) & ~0x3f) == 0 && ((1L << (_la - 466)) & 2199023255551L) != 0)) {
					{
					State = 496;
					expression(0);
					}
				}

				State = 499;
				Match(COMMA);
				State = 500;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(KickAssemblerParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 62, RULE_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(ENUM);
			State = 505;
			Match(OPEN_BRACE);
			State = 507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNQUOTED_STRING) {
				{
				State = 506;
				enumValues();
				}
			}

			State = 509;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEnumValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEnumValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(Context, State);
		EnterRule(_localctx, 64, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			enumValue();
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 512;
				Match(COMMA);
				State = 513;
				enumValue();
				}
				}
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 66, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			Match(UNQUOTED_STRING);
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 520;
				Match(ASSIGNMENT);
				State = 521;
				number();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(KickAssemblerParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(KickAssemblerParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(KickAssemblerParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 68, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			Match(FOR);
			State = 525;
			Match(OPEN_PARENS);
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1099511652352L) != 0) || _la==UNQUOTED_STRING) {
				{
				State = 526;
				forInit();
				}
			}

			State = 529;
			Match(SEMICOLON);
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONLYA || _la==ABS || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 7285886156799L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & 127L) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & -1L) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & -1L) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & -1L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & -1L) != 0) || ((((_la - 466)) & ~0x3f) == 0 && ((1L << (_la - 466)) & 2199023255551L) != 0)) {
				{
				State = 530;
				condition();
				}
			}

			State = 533;
			Match(SEMICOLON);
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONLYA || _la==ABS || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 7285886156799L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & 127L) != 0) || ((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & -1L) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & -1L) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & -1L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & -1L) != 0) || ((((_la - 466)) & ~0x3f) == 0 && ((1L << (_la - 466)) & 2199023255551L) != 0)) {
				{
				State = 534;
				expression(0);
				}
			}

			State = 537;
			Match(CLOSE_PARENS);
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -74328117879866256L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 932403107332223L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1974271L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 262143L) != 0) || _la==UNQUOTED_STRING) {
				{
				State = 538;
				unit();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(KickAssemblerParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 70, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(WHILE);
			State = 542;
			Match(OPEN_PARENS);
			State = 543;
			condition();
			State = 544;
			Match(CLOSE_PARENS);
			State = 545;
			unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(KickAssemblerParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 72, RULE_struct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			Match(STRUCT);
			State = 548;
			Match(UNQUOTED_STRING);
			State = 549;
			Match(OPEN_BRACE);
			State = 550;
			variableList();
			State = 551;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public VariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListContext variableList() {
		VariableListContext _localctx = new VariableListContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableList);
		int _la;
		try {
			State = 562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 553;
				variable();
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 554;
					Match(COMMA);
					State = 555;
					variable();
					}
					}
					State = 560;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 76, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public DefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineContext define() {
		DefineContext _localctx = new DefineContext(Context, State);
		EnterRule(_localctx, 78, RULE_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			variableList();
			State = 567;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(KickAssemblerParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtNameContext atName() {
			return GetRuleContext<AtNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFunctionDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFunctionDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefineContext functionDefine() {
		FunctionDefineContext _localctx = new FunctionDefineContext(Context, State);
		EnterRule(_localctx, 80, RULE_functionDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			Match(FUNCTION);
			State = 570;
			atName();
			State = 571;
			Match(OPEN_PARENS);
			State = 572;
			variableList();
			State = 573;
			Match(CLOSE_PARENS);
			State = 574;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(KickAssemblerParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 82, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(RETURN);
			State = 577;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroDefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO() { return GetToken(KickAssemblerParser.MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtNameContext atName() {
			return GetRuleContext<AtNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public MacroDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterMacroDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitMacroDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroDefineContext macroDefine() {
		MacroDefineContext _localctx = new MacroDefineContext(Context, State);
		EnterRule(_localctx, 84, RULE_macroDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(MACRO);
			State = 580;
			atName();
			State = 581;
			Match(OPEN_PARENS);
			State = 582;
			variableList();
			State = 583;
			Match(CLOSE_PARENS);
			State = 584;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoCommandDefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PSEUDOCOMMAND() { return GetToken(KickAssemblerParser.PSEUDOCOMMAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PseudoCommandDefineArgumentsContext pseudoCommandDefineArguments() {
			return GetRuleContext<PseudoCommandDefineArgumentsContext>(0);
		}
		public PseudoCommandDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudoCommandDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPseudoCommandDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPseudoCommandDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudoCommandDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudoCommandDefineContext pseudoCommandDefine() {
		PseudoCommandDefineContext _localctx = new PseudoCommandDefineContext(Context, State);
		EnterRule(_localctx, 86, RULE_pseudoCommandDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(PSEUDOCOMMAND);
			State = 587;
			Match(UNQUOTED_STRING);
			State = 588;
			pseudoCommandDefineArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoCommandDefineArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNQUOTED_STRING() { return GetTokens(KickAssemblerParser.UNQUOTED_STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING(int i) {
			return GetToken(KickAssemblerParser.UNQUOTED_STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(KickAssemblerParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(KickAssemblerParser.COLON, i);
		}
		public PseudoCommandDefineArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudoCommandDefineArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPseudoCommandDefineArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPseudoCommandDefineArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudoCommandDefineArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudoCommandDefineArgumentsContext pseudoCommandDefineArguments() {
		PseudoCommandDefineArgumentsContext _localctx = new PseudoCommandDefineArgumentsContext(Context, State);
		EnterRule(_localctx, 88, RULE_pseudoCommandDefineArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			Match(UNQUOTED_STRING);
			State = 595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 591;
				Match(COLON);
				State = 592;
				Match(UNQUOTED_STRING);
				}
				}
				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(KickAssemblerParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 90, RULE_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(NAMESPACE);
			State = 599;
			Match(UNQUOTED_STRING);
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACE || _la==UNQUOTED_STRING) {
				{
				State = 600;
				scope();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(KickAssemblerParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public LabelDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterLabelDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitLabelDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDirectiveContext labelDirective() {
		LabelDirectiveContext _localctx = new LabelDirectiveContext(Context, State);
		EnterRule(_localctx, 92, RULE_labelDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(LABEL);
			State = 604;
			assignment_expression();
			State = 605;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(KickAssemblerParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public PluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PluginContext plugin() {
		PluginContext _localctx = new PluginContext(Context, State);
		EnterRule(_localctx, 94, RULE_plugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			Match(PLUGIN);
			State = 608;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEGMENT() { return GetToken(KickAssemblerParser.SEGMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap() {
			return GetRuleContext<ParameterMapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public SegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentContext segment() {
		SegmentContext _localctx = new SegmentContext(Context, State);
		EnterRule(_localctx, 96, RULE_segment);
		try {
			State = 618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 610;
				Match(SEGMENT);
				State = 611;
				_localctx.name = Match(UNQUOTED_STRING);
				State = 612;
				parameterMap();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 613;
				Match(SEGMENT);
				State = 614;
				_localctx.name = Match(UNQUOTED_STRING);
				State = 615;
				Match(STRING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 616;
				Match(SEGMENT);
				State = 617;
				_localctx.name = Match(UNQUOTED_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentDefContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEGMENTDEF() { return GetToken(KickAssemblerParser.SEGMENTDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap() {
			return GetRuleContext<ParameterMapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public SegmentDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterSegmentDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitSegmentDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegmentDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentDefContext segmentDef() {
		SegmentDefContext _localctx = new SegmentDefContext(Context, State);
		EnterRule(_localctx, 98, RULE_segmentDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(SEGMENTDEF);
			State = 621;
			_localctx.Name = Match(UNQUOTED_STRING);
			State = 622;
			parameterMap();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentOutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEGMENTOUT() { return GetToken(KickAssemblerParser.SEGMENTOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap() {
			return GetRuleContext<ParameterMapContext>(0);
		}
		public SegmentOutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentOut; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterSegmentOut(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitSegmentOut(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegmentOut(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentOutContext segmentOut() {
		SegmentOutContext _localctx = new SegmentOutContext(Context, State);
		EnterRule(_localctx, 100, RULE_segmentOut);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			Match(SEGMENTOUT);
			State = 625;
			Match(UNQUOTED_STRING);
			State = 626;
			parameterMap();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(KickAssemblerParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap() {
			return GetRuleContext<ParameterMapContext>(0);
		}
		public FileDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFileDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFileDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileDirectiveContext fileDirective() {
		FileDirectiveContext _localctx = new FileDirectiveContext(Context, State);
		EnterRule(_localctx, 102, RULE_fileDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			Match(FILE);
			State = 629;
			parameterMap();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiskDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(KickAssemblerParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap() {
			return GetRuleContext<ParameterMapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DiskDirectiveContentContext diskDirectiveContent() {
			return GetRuleContext<DiskDirectiveContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public DiskDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diskDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDiskDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDiskDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiskDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiskDirectiveContext diskDirective() {
		DiskDirectiveContext _localctx = new DiskDirectiveContext(Context, State);
		EnterRule(_localctx, 104, RULE_diskDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(DISK);
			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNQUOTED_STRING) {
				{
				State = 632;
				Match(UNQUOTED_STRING);
				}
			}

			State = 635;
			parameterMap();
			State = 636;
			Match(OPEN_BRACE);
			State = 637;
			diskDirectiveContent();
			State = 638;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiskDirectiveContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext[] parameterMap() {
			return GetRuleContexts<ParameterMapContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap(int i) {
			return GetRuleContext<ParameterMapContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public DiskDirectiveContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diskDirectiveContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDiskDirectiveContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDiskDirectiveContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiskDirectiveContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiskDirectiveContentContext diskDirectiveContent() {
		DiskDirectiveContentContext _localctx = new DiskDirectiveContentContext(Context, State);
		EnterRule(_localctx, 106, RULE_diskDirectiveContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			parameterMap();
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 641;
				Match(COMMA);
				State = 642;
				parameterMap();
				}
				}
				State = 647;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterMapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(KickAssemblerParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(KickAssemblerParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapItemsContext[] parameterMapItems() {
			return GetRuleContexts<ParameterMapItemsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapItemsContext parameterMapItems(int i) {
			return GetRuleContext<ParameterMapItemsContext>(i);
		}
		public ParameterMapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterMap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterParameterMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitParameterMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterMapContext parameterMap() {
		ParameterMapContext _localctx = new ParameterMapContext(Context, State);
		EnterRule(_localctx, 108, RULE_parameterMap);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			Match(OPEN_BRACKET);
			State = 652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UNQUOTED_STRING) {
				{
				{
				State = 649;
				parameterMapItems();
				}
				}
				State = 654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 655;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterMapItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapItemContext[] parameterMapItem() {
			return GetRuleContexts<ParameterMapItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapItemContext parameterMapItem(int i) {
			return GetRuleContext<ParameterMapItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public ParameterMapItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterMapItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterParameterMapItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitParameterMapItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterMapItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterMapItemsContext parameterMapItems() {
		ParameterMapItemsContext _localctx = new ParameterMapItemsContext(Context, State);
		EnterRule(_localctx, 110, RULE_parameterMapItems);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			parameterMapItem();
			State = 662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 658;
				Match(COMMA);
				State = 659;
				parameterMapItem();
				}
				}
				State = 664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterMapItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ParameterMapItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterMapItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterParameterMapItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitParameterMapItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterMapItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterMapItemContext parameterMapItem() {
		ParameterMapItemContext _localctx = new ParameterMapItemContext(Context, State);
		EnterRule(_localctx, 112, RULE_parameterMapItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			Match(UNQUOTED_STRING);
			State = 666;
			Match(ASSIGNMENT);
			State = 670;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEC_NUMBER:
			case HEX_NUMBER:
			case BIN_NUMBER:
				{
				State = 667;
				number();
				}
				break;
			case STRING:
				{
				State = 668;
				Match(STRING);
				}
				break;
			case TRUE:
			case FALSE:
				{
				State = 669;
				boolean();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(KickAssemblerParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ModifyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterModify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitModify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModify(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifyContext modify() {
		ModifyContext _localctx = new ModifyContext(Context, State);
		EnterRule(_localctx, 114, RULE_modify);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			Match(MODIFY);
			State = 673;
			Match(UNQUOTED_STRING);
			State = 674;
			Match(OPEN_PARENS);
			State = 675;
			Match(CLOSE_PARENS);
			State = 676;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileModifyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEMODIFY() { return GetToken(KickAssemblerParser.FILEMODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		public FileModifyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileModify; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFileModify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFileModify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileModify(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileModifyContext fileModify() {
		FileModifyContext _localctx = new FileModifyContext(Context, State);
		EnterRule(_localctx, 116, RULE_fileModify);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(FILEMODIFY);
			State = 679;
			Match(UNQUOTED_STRING);
			State = 680;
			Match(OPEN_PARENS);
			State = 681;
			argument();
			State = 682;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(KickAssemblerParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext[] unit() {
			return GetRuleContexts<UnitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit(int i) {
			return GetRuleContext<UnitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KickAssemblerParser.COMMA, 0); }
		public AssertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAssert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAssert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertContext assert() {
		AssertContext _localctx = new AssertContext(Context, State);
		EnterRule(_localctx, 118, RULE_assert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(ASSERT);
			State = 685;
			Match(STRING);
			State = 686;
			unit();
			State = 687;
			Match(COMMA);
			State = 688;
			unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertErrorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERTERROR() { return GetToken(KickAssemblerParser.ASSERTERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public AssertErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertError; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAssertError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAssertError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertErrorContext assertError() {
		AssertErrorContext _localctx = new AssertErrorContext(Context, State);
		EnterRule(_localctx, 120, RULE_assertError);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			Match(ASSERTERROR);
			State = 691;
			Match(STRING);
			State = 692;
			unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudopcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public PseudopcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudopc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPseudopc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPseudopc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudopc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudopcContext pseudopc() {
		PseudopcContext _localctx = new PseudopcContext(Context, State);
		EnterRule(_localctx, 122, RULE_pseudopc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			numeric();
			State = 695;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZP() { return GetToken(KickAssemblerParser.ZP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ZpArgumentListContext zpArgumentList() {
			return GetRuleContext<ZpArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(KickAssemblerParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(KickAssemblerParser.EOL, i);
		}
		public ZpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterZp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitZp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZpContext zp() {
		ZpContext _localctx = new ZpContext(Context, State);
		EnterRule(_localctx, 124, RULE_zp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			Match(ZP);
			State = 698;
			Match(OPEN_BRACE);
			State = 702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 699;
				Match(EOL);
				}
				}
				State = 704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 705;
			zpArgumentList();
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 706;
				Match(EOL);
				}
				}
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 712;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZpArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ZpArgumentContext[] zpArgument() {
			return GetRuleContexts<ZpArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ZpArgumentContext zpArgument(int i) {
			return GetRuleContext<ZpArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(KickAssemblerParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(KickAssemblerParser.EOL, i);
		}
		public ZpArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zpArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterZpArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitZpArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZpArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZpArgumentListContext zpArgumentList() {
		ZpArgumentListContext _localctx = new ZpArgumentListContext(Context, State);
		EnterRule(_localctx, 126, RULE_zpArgumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 714;
			zpArgument();
			State = 719;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 715;
					Match(EOL);
					State = 716;
					zpArgument();
					}
					} 
				}
				State = 721;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZpArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtNameContext atName() {
			return GetRuleContext<AtNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KickAssemblerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTBYTE() { return GetToken(KickAssemblerParser.DOTBYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_NUMBER() { return GetToken(KickAssemblerParser.DEC_NUMBER, 0); }
		public ZpArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zpArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterZpArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitZpArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZpArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZpArgumentContext zpArgument() {
		ZpArgumentContext _localctx = new ZpArgumentContext(Context, State);
		EnterRule(_localctx, 128, RULE_zpArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			atName();
			State = 723;
			Match(COLON);
			State = 724;
			Match(DOTBYTE);
			State = 725;
			Match(DEC_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public FileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFileName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFileName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNameContext fileName() {
		FileNameContext _localctx = new FileNameContext(Context, State);
		EnterRule(_localctx, 130, RULE_fileName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorDefineContext preprocessorDefine() {
			return GetRuleContext<PreprocessorDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorUndefContext preprocessorUndef() {
			return GetRuleContext<PreprocessorUndefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorImportContext preprocessorImport() {
			return GetRuleContext<PreprocessorImportContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorImportIfContext preprocessorImportIf() {
			return GetRuleContext<PreprocessorImportIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorImportOnceContext preprocessorImportOnce() {
			return GetRuleContext<PreprocessorImportOnceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorIfContext preprocessorIf() {
			return GetRuleContext<PreprocessorIfContext>(0);
		}
		public PreprocessorDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorDirectiveContext preprocessorDirective() {
		PreprocessorDirectiveContext _localctx = new PreprocessorDirectiveContext(Context, State);
		EnterRule(_localctx, 132, RULE_preprocessorDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HASHDEFINE:
				{
				State = 729;
				preprocessorDefine();
				}
				break;
			case HASHUNDEF:
				{
				State = 730;
				preprocessorUndef();
				}
				break;
			case HASHIMPORT:
				{
				State = 731;
				preprocessorImport();
				}
				break;
			case HASHIMPORTIF:
				{
				State = 732;
				preprocessorImportIf();
				}
				break;
			case HASHIMPORTONCE:
				{
				State = 733;
				preprocessorImportOnce();
				}
				break;
			case HASHIF:
				{
				State = 734;
				preprocessorIf();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorDefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHDEFINE() { return GetToken(KickAssemblerParser.HASHDEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINED_TOKEN() { return GetToken(KickAssemblerParser.DEFINED_TOKEN, 0); }
		public PreprocessorDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorDefineContext preprocessorDefine() {
		PreprocessorDefineContext _localctx = new PreprocessorDefineContext(Context, State);
		EnterRule(_localctx, 134, RULE_preprocessorDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			Match(HASHDEFINE);
			State = 738;
			Match(DEFINED_TOKEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorUndefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHUNDEF() { return GetToken(KickAssemblerParser.HASHUNDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED_TOKEN() { return GetToken(KickAssemblerParser.UNDEFINED_TOKEN, 0); }
		public PreprocessorUndefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorUndef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorUndef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorUndef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorUndef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorUndefContext preprocessorUndef() {
		PreprocessorUndefContext _localctx = new PreprocessorUndefContext(Context, State);
		EnterRule(_localctx, 136, RULE_preprocessorUndef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			Match(HASHUNDEF);
			State = 741;
			Match(UNDEFINED_TOKEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorImportContext : ParserRuleContext {
		public IToken fileReference;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHIMPORT() { return GetToken(KickAssemblerParser.HASHIMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public PreprocessorImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorImport; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorImport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorImport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorImportContext preprocessorImport() {
		PreprocessorImportContext _localctx = new PreprocessorImportContext(Context, State);
		EnterRule(_localctx, 138, RULE_preprocessorImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			Match(HASHIMPORT);
			State = 744;
			_localctx.fileReference = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorImportIfContext : ParserRuleContext {
		public IToken fileReference;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHIMPORTIF() { return GetToken(KickAssemblerParser.HASHIMPORTIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIF_CONDITION() { return GetToken(KickAssemblerParser.IIF_CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public PreprocessorImportIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorImportIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorImportIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorImportIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorImportIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorImportIfContext preprocessorImportIf() {
		PreprocessorImportIfContext _localctx = new PreprocessorImportIfContext(Context, State);
		EnterRule(_localctx, 140, RULE_preprocessorImportIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746;
			Match(HASHIMPORTIF);
			State = 747;
			Match(IIF_CONDITION);
			State = 748;
			_localctx.fileReference = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorImportOnceContext : ParserRuleContext {
		public IToken fileReference;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHIMPORTONCE() { return GetToken(KickAssemblerParser.HASHIMPORTONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public PreprocessorImportOnceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorImportOnce; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorImportOnce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorImportOnce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorImportOnce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorImportOnceContext preprocessorImportOnce() {
		PreprocessorImportOnceContext _localctx = new PreprocessorImportOnceContext(Context, State);
		EnterRule(_localctx, 142, RULE_preprocessorImportOnce);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			Match(HASHIMPORTONCE);
			State = 751;
			_localctx.fileReference = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHIF() { return GetToken(KickAssemblerParser.HASHIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF_CONDITION() { return GetTokens(KickAssemblerParser.IF_CONDITION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_CONDITION(int i) {
			return GetToken(KickAssemblerParser.IF_CONDITION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorBlockContext[] preprocessorBlock() {
			return GetRuleContexts<PreprocessorBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorBlockContext preprocessorBlock(int i) {
			return GetRuleContext<PreprocessorBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHENDIF() { return GetToken(KickAssemblerParser.HASHENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HASHELIF() { return GetTokens(KickAssemblerParser.HASHELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHELIF(int i) {
			return GetToken(KickAssemblerParser.HASHELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHELSE() { return GetToken(KickAssemblerParser.HASHELSE, 0); }
		public PreprocessorIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorIfContext preprocessorIf() {
		PreprocessorIfContext _localctx = new PreprocessorIfContext(Context, State);
		EnterRule(_localctx, 144, RULE_preprocessorIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			Match(HASHIF);
			State = 754;
			Match(IF_CONDITION);
			State = 755;
			preprocessorBlock();
			State = 761;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHELIF) {
				{
				{
				State = 756;
				Match(HASHELIF);
				State = 757;
				Match(IF_CONDITION);
				State = 758;
				preprocessorBlock();
				}
				}
				State = 763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASHELSE) {
				{
				State = 764;
				Match(HASHELSE);
				State = 765;
				preprocessorBlock();
				}
			}

			State = 768;
			Match(HASHENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(KickAssemblerParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(KickAssemblerParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public PreprocessorBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorBlockContext preprocessorBlock() {
		PreprocessorBlockContext _localctx = new PreprocessorBlockContext(Context, State);
		EnterRule(_localctx, 146, RULE_preprocessorBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 770;
				Match(EOL);
				}
				}
				State = 773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EOL );
			State = 781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -74328117879866256L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 932403107332223L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1974271L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & 262143L) != 0) || _la==UNQUOTED_STRING) {
				{
				State = 775;
				unit();
				State = 777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 776;
					Match(EOL);
					}
					}
					State = 779;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EOL );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorConditionContext[] preprocessorCondition() {
			return GetRuleContexts<PreprocessorConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorConditionContext preprocessorCondition(int i) {
			return GetRuleContext<PreprocessorConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(KickAssemblerParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(KickAssemblerParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(KickAssemblerParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(KickAssemblerParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(KickAssemblerParser.OP_NE, 0); }
		public PreprocessorConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorConditionContext preprocessorCondition() {
		return preprocessorCondition(0);
	}

	private PreprocessorConditionContext preprocessorCondition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PreprocessorConditionContext _localctx = new PreprocessorConditionContext(Context, _parentState);
		PreprocessorConditionContext _prevctx = _localctx;
		int _startState = 148;
		EnterRecursionRule(_localctx, 148, RULE_preprocessorCondition, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PARENS:
				{
				State = 784;
				Match(OPEN_PARENS);
				State = 785;
				preprocessorCondition(0);
				State = 786;
				Match(CLOSE_PARENS);
				}
				break;
			case BANG:
				{
				State = 788;
				Match(BANG);
				State = 789;
				preprocessorCondition(6);
				}
				break;
			case UNQUOTED_STRING:
				{
				State = 790;
				Match(UNQUOTED_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 807;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 805;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
					case 1:
						{
						_localctx = new PreprocessorConditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessorCondition);
						State = 793;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 794;
						Match(OP_AND);
						State = 795;
						preprocessorCondition(6);
						}
						break;
					case 2:
						{
						_localctx = new PreprocessorConditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessorCondition);
						State = 796;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 797;
						Match(OP_OR);
						State = 798;
						preprocessorCondition(5);
						}
						break;
					case 3:
						{
						_localctx = new PreprocessorConditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessorCondition);
						State = 799;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 800;
						Match(OP_EQ);
						State = 801;
						preprocessorCondition(4);
						}
						break;
					case 4:
						{
						_localctx = new PreprocessorConditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessorCondition);
						State = 802;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 803;
						Match(OP_NE);
						State = 804;
						preprocessorCondition(3);
						}
						break;
					}
					} 
				}
				State = 809;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CpuDirectiveContext cpuDirective() {
			return GetRuleContext<CpuDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ByteDirectiveContext byteDirective() {
			return GetRuleContext<ByteDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WordDirectiveContext wordDirective() {
			return GetRuleContext<WordDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DwordDirectiveContext dwordDirective() {
			return GetRuleContext<DwordDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextDirectiveContext textDirective() {
			return GetRuleContext<TextDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FillDirectiveContext fillDirective() {
			return GetRuleContext<FillDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncodingDirectiveContext encodingDirective() {
			return GetRuleContext<EncodingDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDataDirectiveContext importDataDirective() {
			return GetRuleContext<ImportDataDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryDirectiveContext memoryDirective() {
			return GetRuleContext<MemoryDirectiveContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 150, RULE_directive);
		try {
			State = 819;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOTCPU:
				EnterOuterAlt(_localctx, 1);
				{
				State = 810;
				cpuDirective();
				}
				break;
			case DOTBYTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 811;
				byteDirective();
				}
				break;
			case DOTWORD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 812;
				wordDirective();
				}
				break;
			case DOTDWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 813;
				dwordDirective();
				}
				break;
			case DOTTEXT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 814;
				textDirective();
				}
				break;
			case DOTFILL:
			case DOTFILLWORD:
			case DOTLOHIFILL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 815;
				fillDirective();
				}
				break;
			case DOTENCODING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 816;
				encodingDirective();
				}
				break;
			case DOTIMPORT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 817;
				importDataDirective();
				}
				break;
			case PC:
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 818;
				memoryDirective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(KickAssemblerParser.OP_MULT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PC() { return GetToken(KickAssemblerParser.PC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public MemoryDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterMemoryDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitMemoryDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemoryDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemoryDirectiveContext memoryDirective() {
		MemoryDirectiveContext _localctx = new MemoryDirectiveContext(Context, State);
		EnterRule(_localctx, 152, RULE_memoryDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			_la = TokenStream.LA(1);
			if ( !(_la==PC || _la==OP_MULT_ASSIGNMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 822;
			number();
			State = 824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 823;
				Match(STRING);
				}
			}

			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNQUOTED_STRING) {
				{
				State = 826;
				Match(UNQUOTED_STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CpuDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTCPU() { return GetToken(KickAssemblerParser.DOTCPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU6502NOILLEGALS() { return GetToken(KickAssemblerParser.CPU6502NOILLEGALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU6502() { return GetToken(KickAssemblerParser.CPU6502, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DTV() { return GetToken(KickAssemblerParser.DTV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU65C02() { return GetToken(KickAssemblerParser.CPU65C02, 0); }
		public CpuDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cpuDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCpuDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCpuDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCpuDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CpuDirectiveContext cpuDirective() {
		CpuDirectiveContext _localctx = new CpuDirectiveContext(Context, State);
		EnterRule(_localctx, 154, RULE_cpuDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829;
			Match(DOTCPU);
			State = 830;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32212254720L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTBYTE() { return GetToken(KickAssemblerParser.DOTBYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		public ByteDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byteDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterByteDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitByteDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByteDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ByteDirectiveContext byteDirective() {
		ByteDirectiveContext _localctx = new ByteDirectiveContext(Context, State);
		EnterRule(_localctx, 156, RULE_byteDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			Match(DOTBYTE);
			State = 833;
			numberList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTWORD() { return GetToken(KickAssemblerParser.DOTWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		public WordDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterWordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitWordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordDirectiveContext wordDirective() {
		WordDirectiveContext _localctx = new WordDirectiveContext(Context, State);
		EnterRule(_localctx, 158, RULE_wordDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835;
			Match(DOTWORD);
			State = 836;
			numberList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DwordDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDWORD() { return GetToken(KickAssemblerParser.DOTDWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		public DwordDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dwordDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDwordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDwordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDwordDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DwordDirectiveContext dwordDirective() {
		DwordDirectiveContext _localctx = new DwordDirectiveContext(Context, State);
		EnterRule(_localctx, 160, RULE_dwordDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838;
			Match(DOTDWORD);
			State = 839;
			numberList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTTEXT() { return GetToken(KickAssemblerParser.DOTTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public TextDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterTextDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitTextDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextDirectiveContext textDirective() {
		TextDirectiveContext _localctx = new TextDirectiveContext(Context, State);
		EnterRule(_localctx, 162, RULE_textDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			Match(DOTTEXT);
			State = 842;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KickAssemblerParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FillDirectiveArgumentsContext fillDirectiveArguments() {
			return GetRuleContext<FillDirectiveArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTFILL() { return GetToken(KickAssemblerParser.DOTFILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTFILLWORD() { return GetToken(KickAssemblerParser.DOTFILLWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTLOHIFILL() { return GetToken(KickAssemblerParser.DOTLOHIFILL, 0); }
		public FillDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFillDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFillDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillDirectiveContext fillDirective() {
		FillDirectiveContext _localctx = new FillDirectiveContext(Context, State);
		EnterRule(_localctx, 164, RULE_fillDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14680064L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 845;
			number();
			State = 846;
			Match(COMMA);
			State = 847;
			fillDirectiveArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillDirectiveArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(KickAssemblerParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(KickAssemblerParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FillExpressionContext fillExpression() {
			return GetRuleContext<FillExpressionContext>(0);
		}
		public FillDirectiveArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillDirectiveArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFillDirectiveArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFillDirectiveArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillDirectiveArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillDirectiveArgumentsContext fillDirectiveArguments() {
		FillDirectiveArgumentsContext _localctx = new FillDirectiveArgumentsContext(Context, State);
		EnterRule(_localctx, 166, RULE_fillDirectiveArguments);
		try {
			State = 855;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEC_NUMBER:
			case HEX_NUMBER:
			case BIN_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 849;
				number();
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 850;
				Match(OPEN_BRACKET);
				State = 851;
				numberList();
				State = 852;
				Match(CLOSE_BRACKET);
				}
				break;
			case Eof:
			case EOL:
			case ELSE:
			case CLOSE_BRACE:
			case COMMA:
			case SEMICOLON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 854;
				fillExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillExpressionContext : ParserRuleContext {
		public FillExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFillExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFillExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillExpressionContext fillExpression() {
		FillExpressionContext _localctx = new FillExpressionContext(Context, State);
		EnterRule(_localctx, 168, RULE_fillExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTENCODING() { return GetToken(KickAssemblerParser.DOTENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public EncodingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEncodingDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEncodingDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingDirectiveContext encodingDirective() {
		EncodingDirectiveContext _localctx = new EncodingDirectiveContext(Context, State);
		EnterRule(_localctx, 170, RULE_encodingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			Match(DOTENCODING);
			State = 860;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDataDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTIMPORT() { return GetToken(KickAssemblerParser.DOTIMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(KickAssemblerParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode C64() { return GetToken(KickAssemblerParser.C64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(KickAssemblerParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(KickAssemblerParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ImportDataDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDataDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterImportDataDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitImportDataDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDataDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDataDirectiveContext importDataDirective() {
		ImportDataDirectiveContext _localctx = new ImportDataDirectiveContext(Context, State);
		EnterRule(_localctx, 172, RULE_importDataDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			Match(DOTIMPORT);
			State = 863;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 884736L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 864;
			file();
			State = 871;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 865;
				Match(COMMA);
				State = 866;
				number();
				State = 869;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 867;
					Match(COMMA);
					State = 868;
					number();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelNameContext : ParserRuleContext {
		public LabelNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelName; } }
	 
		public LabelNameContext() { }
		public virtual void CopyFrom(LabelNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiLabelContext : LabelNameContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(KickAssemblerParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public MultiLabelContext(LabelNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterMultiLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitMultiLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLabel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiAnonymousLabelContext : LabelNameContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(KickAssemblerParser.BANG, 0); }
		public MultiAnonymousLabelContext(LabelNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterMultiAnonymousLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitMultiAnonymousLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiAnonymousLabel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtNameLabelContext : LabelNameContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtNameContext atName() {
			return GetRuleContext<AtNameContext>(0);
		}
		public AtNameLabelContext(LabelNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAtNameLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAtNameLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtNameLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelNameContext labelName() {
		LabelNameContext _localctx = new LabelNameContext(Context, State);
		EnterRule(_localctx, 174, RULE_labelName);
		try {
			State = 877;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				_localctx = new MultiLabelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 873;
				Match(BANG);
				State = 874;
				Match(UNQUOTED_STRING);
				}
				break;
			case 2:
				_localctx = new MultiAnonymousLabelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 875;
				Match(BANG);
				}
				break;
			case 3:
				_localctx = new AtNameLabelContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 876;
				atName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(KickAssemblerParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnyStringContext anyString() {
			return GetRuleContext<AnyStringContext>(0);
		}
		public AtNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAtName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAtName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtNameContext atName() {
		AtNameContext _localctx = new AtNameContext(Context, State);
		EnterRule(_localctx, 176, RULE_atName);
		try {
			State = 882;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 879;
				Match(AT);
				State = 880;
				anyString();
				}
				break;
			case ONLYA:
			case ABS:
			case UNQUOTED_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 881;
				anyString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 178, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 884;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public NumberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberListContext numberList() {
		NumberListContext _localctx = new NumberListContext(Context, State);
		EnterRule(_localctx, 180, RULE_numberList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			number();
			State = 891;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 887;
					Match(COMMA);
					State = 888;
					number();
					}
					} 
				}
				State = 893;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext[] numeric() {
			return GetRuleContexts<NumericContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric(int i) {
			return GetRuleContext<NumericContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public NumericListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumericList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumericList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericListContext numericList() {
		NumericListContext _localctx = new NumericListContext(Context, State);
		EnterRule(_localctx, 182, RULE_numericList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			numeric();
			State = 899;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 895;
				Match(COMMA);
				State = 896;
				numeric();
				}
				}
				State = 901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(KickAssemblerParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LohibyteContext lohibyte() {
			return GetRuleContext<LohibyteContext>(0);
		}
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 184, RULE_numeric);
		int _la;
		try {
			State = 907;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 902;
				Match(CHAR);
				}
				break;
			case LT:
			case GT:
			case DEC_NUMBER:
			case HEX_NUMBER:
			case BIN_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT || _la==GT) {
					{
					State = 903;
					lohibyte();
					}
				}

				State = 906;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecNumberContext decNumber() {
			return GetRuleContext<DecNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinNumberContext binNumber() {
			return GetRuleContext<BinNumberContext>(0);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 186, RULE_number);
		try {
			State = 912;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEC_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 909;
				decNumber();
				}
				break;
			case HEX_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 910;
				hexNumber();
				}
				break;
			case BIN_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 911;
				binNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LohibyteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(KickAssemblerParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(KickAssemblerParser.LT, 0); }
		public LohibyteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lohibyte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterLohibyte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitLohibyte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLohibyte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LohibyteContext lohibyte() {
		LohibyteContext _localctx = new LohibyteContext(Context, State);
		EnterRule(_localctx, 188, RULE_lohibyte);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			_la = TokenStream.LA(1);
			if ( !(_la==LT || _la==GT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_NUMBER() { return GetToken(KickAssemblerParser.DEC_NUMBER, 0); }
		public DecNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDecNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDecNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecNumberContext decNumber() {
		DecNumberContext _localctx = new DecNumberContext(Context, State);
		EnterRule(_localctx, 190, RULE_decNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 916;
			Match(DEC_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(KickAssemblerParser.HEX_NUMBER, 0); }
		public HexNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexNumberContext hexNumber() {
		HexNumberContext _localctx = new HexNumberContext(Context, State);
		EnterRule(_localctx, 192, RULE_hexNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			Match(HEX_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_NUMBER() { return GetToken(KickAssemblerParser.BIN_NUMBER, 0); }
		public BinNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBinNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBinNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinNumberContext binNumber() {
		BinNumberContext _localctx = new BinNumberContext(Context, State);
		EnterRule(_localctx, 194, RULE_binNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			Match(BIN_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(KickAssemblerParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(KickAssemblerParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 196, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLYA() { return GetToken(KickAssemblerParser.ONLYA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(KickAssemblerParser.ABS, 0); }
		public OpcodeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcodeExtension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterOpcodeExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitOpcodeExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcodeExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeExtensionContext opcodeExtension() {
		OpcodeExtensionContext _localctx = new OpcodeExtensionContext(Context, State);
		EnterRule(_localctx, 198, RULE_opcodeExtension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			_la = TokenStream.LA(1);
			if ( !(_la==ONLYA || _la==ABS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLYA() { return GetToken(KickAssemblerParser.ONLYA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(KickAssemblerParser.ABS, 0); }
		public AnyStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAnyString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAnyString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyStringContext anyString() {
		AnyStringContext _localctx = new AnyStringContext(Context, State);
		EnterRule(_localctx, 200, RULE_anyString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926;
			_la = TokenStream.LA(1);
			if ( !(_la==ONLYA || _la==ABS || _la==UNQUOTED_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullOpcodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeContext opcode() {
			return GetRuleContext<OpcodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KickAssemblerParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeExtensionContext opcodeExtension() {
			return GetRuleContext<OpcodeExtensionContext>(0);
		}
		public FullOpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullOpcode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFullOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFullOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullOpcode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullOpcodeContext fullOpcode() {
		FullOpcodeContext _localctx = new FullOpcodeContext(Context, State);
		EnterRule(_localctx, 202, RULE_fullOpcode);
		try {
			State = 933;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 928;
				opcode();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 929;
				opcode();
				State = 930;
				Match(DOT);
				State = 931;
				opcodeExtension();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC() { return GetToken(KickAssemblerParser.ADC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(KickAssemblerParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL() { return GetToken(KickAssemblerParser.ASL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCC() { return GetToken(KickAssemblerParser.BCC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCS() { return GetToken(KickAssemblerParser.BCS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEQ() { return GetToken(KickAssemblerParser.BEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(KickAssemblerParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BMI() { return GetToken(KickAssemblerParser.BMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNE() { return GetToken(KickAssemblerParser.BNE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BPL() { return GetToken(KickAssemblerParser.BPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRA() { return GetToken(KickAssemblerParser.BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRK() { return GetToken(KickAssemblerParser.BRK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVC() { return GetToken(KickAssemblerParser.BVC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVS() { return GetToken(KickAssemblerParser.BVS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLC() { return GetToken(KickAssemblerParser.CLC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLD() { return GetToken(KickAssemblerParser.CLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLI() { return GetToken(KickAssemblerParser.CLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLV() { return GetToken(KickAssemblerParser.CLV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP() { return GetToken(KickAssemblerParser.CMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPX() { return GetToken(KickAssemblerParser.CPX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPY() { return GetToken(KickAssemblerParser.CPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(KickAssemblerParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEX() { return GetToken(KickAssemblerParser.DEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEY() { return GetToken(KickAssemblerParser.DEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(KickAssemblerParser.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(KickAssemblerParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INX() { return GetToken(KickAssemblerParser.INX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INY() { return GetToken(KickAssemblerParser.INY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JMP() { return GetToken(KickAssemblerParser.JMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSR() { return GetToken(KickAssemblerParser.JSR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA() { return GetToken(KickAssemblerParser.LDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY() { return GetToken(KickAssemblerParser.LDY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX() { return GetToken(KickAssemblerParser.LDX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR() { return GetToken(KickAssemblerParser.LSR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP() { return GetToken(KickAssemblerParser.NOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA() { return GetToken(KickAssemblerParser.ORA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHA() { return GetToken(KickAssemblerParser.PHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHX() { return GetToken(KickAssemblerParser.PHX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHY() { return GetToken(KickAssemblerParser.PHY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHP() { return GetToken(KickAssemblerParser.PHP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLA() { return GetToken(KickAssemblerParser.PLA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLP() { return GetToken(KickAssemblerParser.PLP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLY() { return GetToken(KickAssemblerParser.PLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL() { return GetToken(KickAssemblerParser.ROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR() { return GetToken(KickAssemblerParser.ROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTI() { return GetToken(KickAssemblerParser.RTI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTS() { return GetToken(KickAssemblerParser.RTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC() { return GetToken(KickAssemblerParser.SBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC() { return GetToken(KickAssemblerParser.SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SED() { return GetToken(KickAssemblerParser.SED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEI() { return GetToken(KickAssemblerParser.SEI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA() { return GetToken(KickAssemblerParser.STA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STX() { return GetToken(KickAssemblerParser.STX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STY() { return GetToken(KickAssemblerParser.STY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STZ() { return GetToken(KickAssemblerParser.STZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAX() { return GetToken(KickAssemblerParser.TAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAY() { return GetToken(KickAssemblerParser.TAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSX() { return GetToken(KickAssemblerParser.TSX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXA() { return GetToken(KickAssemblerParser.TXA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXS() { return GetToken(KickAssemblerParser.TXS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYA() { return GetToken(KickAssemblerParser.TYA, 0); }
		public OpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeContext opcode() {
		OpcodeContext _localctx = new OpcodeContext(Context, State);
		EnterRule(_localctx, 204, RULE_opcode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 935;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 2305843009213693951L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLACK() { return GetToken(KickAssemblerParser.BLACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITE() { return GetToken(KickAssemblerParser.WHITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RED() { return GetToken(KickAssemblerParser.RED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYAN() { return GetToken(KickAssemblerParser.CYAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURPLE() { return GetToken(KickAssemblerParser.PURPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREEN() { return GetToken(KickAssemblerParser.GREEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLUE() { return GetToken(KickAssemblerParser.BLUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YELLOW() { return GetToken(KickAssemblerParser.YELLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORANGE() { return GetToken(KickAssemblerParser.ORANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BROWN() { return GetToken(KickAssemblerParser.BROWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHT_RED() { return GetToken(KickAssemblerParser.LIGHT_RED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DARK_GRAY() { return GetToken(KickAssemblerParser.DARK_GRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DARK_GREY() { return GetToken(KickAssemblerParser.DARK_GREY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAY() { return GetToken(KickAssemblerParser.GRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREY() { return GetToken(KickAssemblerParser.GREY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHT_GREEN() { return GetToken(KickAssemblerParser.LIGHT_GREEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHT_BLUE() { return GetToken(KickAssemblerParser.LIGHT_BLUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHT_GRAY() { return GetToken(KickAssemblerParser.LIGHT_GRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHT_GREY() { return GetToken(KickAssemblerParser.LIGHT_GREY, 0); }
		public ColorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterColor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitColor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorContext color() {
		ColorContext _localctx = new ColorContext(Context, State);
		EnterRule(_localctx, 206, RULE_color);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 937;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 524287L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_ABS_CONST() { return GetToken(KickAssemblerParser.ADC_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_ABSX_CONST() { return GetToken(KickAssemblerParser.ADC_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_ABSY_CONST() { return GetToken(KickAssemblerParser.ADC_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_IMM_CONST() { return GetToken(KickAssemblerParser.ADC_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_IZPX_CONST() { return GetToken(KickAssemblerParser.ADC_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_IZPY_CONST() { return GetToken(KickAssemblerParser.ADC_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_ZP_CONST() { return GetToken(KickAssemblerParser.ADC_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_ZPX_CONST() { return GetToken(KickAssemblerParser.ADC_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AHX_ABSY_CONST() { return GetToken(KickAssemblerParser.AHX_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AHX_IZPY_CONST() { return GetToken(KickAssemblerParser.AHX_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALR_IMM_CONST() { return GetToken(KickAssemblerParser.ALR_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANC_IMM_CONST() { return GetToken(KickAssemblerParser.ANC_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANC2_IMM_CONST() { return GetToken(KickAssemblerParser.ANC2_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ABS_CONST() { return GetToken(KickAssemblerParser.AND_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ABSX_CONST() { return GetToken(KickAssemblerParser.AND_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ABSY_CONST() { return GetToken(KickAssemblerParser.AND_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_IMM_CONST() { return GetToken(KickAssemblerParser.AND_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_IZPX_CONST() { return GetToken(KickAssemblerParser.AND_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_IZPY_CONST() { return GetToken(KickAssemblerParser.AND_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ZP_CONST() { return GetToken(KickAssemblerParser.AND_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ZPX_CONST() { return GetToken(KickAssemblerParser.AND_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANE_IMM_CONST() { return GetToken(KickAssemblerParser.ANE_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARR_IMM_CONST() { return GetToken(KickAssemblerParser.ARR_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL_CONST() { return GetToken(KickAssemblerParser.ASL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL_ABS_CONST() { return GetToken(KickAssemblerParser.ASL_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL_ABSX_CONST() { return GetToken(KickAssemblerParser.ASL_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL_ZP_CONST() { return GetToken(KickAssemblerParser.ASL_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL_ZPX_CONST() { return GetToken(KickAssemblerParser.ASL_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASR_IMM_CONST() { return GetToken(KickAssemblerParser.ASR_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AXS_IMM_CONST() { return GetToken(KickAssemblerParser.AXS_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCC_REL_CONST() { return GetToken(KickAssemblerParser.BCC_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCS_REL_CONST() { return GetToken(KickAssemblerParser.BCS_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEQ_REL_CONST() { return GetToken(KickAssemblerParser.BEQ_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_ABS_CONST() { return GetToken(KickAssemblerParser.BIT_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_ABSX_CONST() { return GetToken(KickAssemblerParser.BIT_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_IMM_CONST() { return GetToken(KickAssemblerParser.BIT_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_ZP_CONST() { return GetToken(KickAssemblerParser.BIT_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_ZPX_CONST() { return GetToken(KickAssemblerParser.BIT_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BMI_REL_CONST() { return GetToken(KickAssemblerParser.BMI_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNE_REL_CONST() { return GetToken(KickAssemblerParser.BNE_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BPL_REL_CONST() { return GetToken(KickAssemblerParser.BPL_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRA_REL_CONST() { return GetToken(KickAssemblerParser.BRA_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRK_CONST() { return GetToken(KickAssemblerParser.BRK_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVC_REL_CONST() { return GetToken(KickAssemblerParser.BVC_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVS_REL_CONST() { return GetToken(KickAssemblerParser.BVS_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLC_CONST() { return GetToken(KickAssemblerParser.CLC_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLD_CONST() { return GetToken(KickAssemblerParser.CLD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLI_CONST() { return GetToken(KickAssemblerParser.CLI_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLV_CONST() { return GetToken(KickAssemblerParser.CLV_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_ABS_CONST() { return GetToken(KickAssemblerParser.CMP_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_ABSX_CONST() { return GetToken(KickAssemblerParser.CMP_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_ABSY_CONST() { return GetToken(KickAssemblerParser.CMP_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_IMM_CONST() { return GetToken(KickAssemblerParser.CMP_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_IZPX_CONST() { return GetToken(KickAssemblerParser.CMP_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_IZPY_CONST() { return GetToken(KickAssemblerParser.CMP_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_ZP_CONST() { return GetToken(KickAssemblerParser.CMP_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_ZPX_CONST() { return GetToken(KickAssemblerParser.CMP_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPX_ABS_CONST() { return GetToken(KickAssemblerParser.CPX_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPX_IMM_CONST() { return GetToken(KickAssemblerParser.CPX_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPX_ZP_CONST() { return GetToken(KickAssemblerParser.CPX_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPY_ABS_CONST() { return GetToken(KickAssemblerParser.CPY_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPY_IMM_CONST() { return GetToken(KickAssemblerParser.CPY_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPY_ZP_CONST() { return GetToken(KickAssemblerParser.CPY_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_ABS_CONST() { return GetToken(KickAssemblerParser.DCM_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_ABSX_CONST() { return GetToken(KickAssemblerParser.DCM_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_ABSY_CONST() { return GetToken(KickAssemblerParser.DCM_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_IZPX_CONST() { return GetToken(KickAssemblerParser.DCM_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_IZPY_CONST() { return GetToken(KickAssemblerParser.DCM_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_ZP_CONST() { return GetToken(KickAssemblerParser.DCM_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_ZPX_CONST() { return GetToken(KickAssemblerParser.DCM_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_ABS_CONST() { return GetToken(KickAssemblerParser.DCP_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_ABSX_CONST() { return GetToken(KickAssemblerParser.DCP_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_ABSY_CONST() { return GetToken(KickAssemblerParser.DCP_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_IZPX_CONST() { return GetToken(KickAssemblerParser.DCP_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_IZPY_CONST() { return GetToken(KickAssemblerParser.DCP_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_ZP_CONST() { return GetToken(KickAssemblerParser.DCP_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_ZPX_CONST() { return GetToken(KickAssemblerParser.DCP_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_CONST() { return GetToken(KickAssemblerParser.DEC_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_ABS_CONST() { return GetToken(KickAssemblerParser.DEC_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_ABSX_CONST() { return GetToken(KickAssemblerParser.DEC_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_ZP_CONST() { return GetToken(KickAssemblerParser.DEC_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_ZPX_CONST() { return GetToken(KickAssemblerParser.DEC_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEX_CONST() { return GetToken(KickAssemblerParser.DEX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEY_CONST() { return GetToken(KickAssemblerParser.DEY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_ABS_CONST() { return GetToken(KickAssemblerParser.EOR_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_ABSX_CONST() { return GetToken(KickAssemblerParser.EOR_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_ABSY_CONST() { return GetToken(KickAssemblerParser.EOR_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_IMM_CONST() { return GetToken(KickAssemblerParser.EOR_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_IZPX_CONST() { return GetToken(KickAssemblerParser.EOR_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_IZPY_CONST() { return GetToken(KickAssemblerParser.EOR_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_ZP_CONST() { return GetToken(KickAssemblerParser.EOR_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_ZPX_CONST() { return GetToken(KickAssemblerParser.EOR_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_CONST() { return GetToken(KickAssemblerParser.INC_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_ABS_CONST() { return GetToken(KickAssemblerParser.INC_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_ABSX_CONST() { return GetToken(KickAssemblerParser.INC_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_ZP_CONST() { return GetToken(KickAssemblerParser.INC_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_ZPX_CONST() { return GetToken(KickAssemblerParser.INC_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_ABS_CONST() { return GetToken(KickAssemblerParser.INS_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_ABSX_CONST() { return GetToken(KickAssemblerParser.INS_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_ABSY_CONST() { return GetToken(KickAssemblerParser.INS_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_IZPX_CONST() { return GetToken(KickAssemblerParser.INS_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_IZPY_CONST() { return GetToken(KickAssemblerParser.INS_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_ZP_CONST() { return GetToken(KickAssemblerParser.INS_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_ZPX_CONST() { return GetToken(KickAssemblerParser.INS_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INX_CONST() { return GetToken(KickAssemblerParser.INX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INY_CONST() { return GetToken(KickAssemblerParser.INY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_ABS_CONST() { return GetToken(KickAssemblerParser.ISB_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_ABSX_CONST() { return GetToken(KickAssemblerParser.ISB_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_ABSY_CONST() { return GetToken(KickAssemblerParser.ISB_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_IZPX_CONST() { return GetToken(KickAssemblerParser.ISB_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_IZPY_CONST() { return GetToken(KickAssemblerParser.ISB_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_ZP_CONST() { return GetToken(KickAssemblerParser.ISB_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_ZPX_CONST() { return GetToken(KickAssemblerParser.ISB_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_ABS_CONST() { return GetToken(KickAssemblerParser.ISC_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_ABSX_CONST() { return GetToken(KickAssemblerParser.ISC_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_ABSY_CONST() { return GetToken(KickAssemblerParser.ISC_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_IZPX_CONST() { return GetToken(KickAssemblerParser.ISC_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_IZPY_CONST() { return GetToken(KickAssemblerParser.ISC_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_ZP_CONST() { return GetToken(KickAssemblerParser.ISC_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_ZPX_CONST() { return GetToken(KickAssemblerParser.ISC_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JMP_ABS_CONST() { return GetToken(KickAssemblerParser.JMP_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JMP_IND_CONST() { return GetToken(KickAssemblerParser.JMP_IND_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSR_ABS_CONST() { return GetToken(KickAssemblerParser.JSR_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAE_ABSY_CONST() { return GetToken(KickAssemblerParser.LAE_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAS_ABSY_CONST() { return GetToken(KickAssemblerParser.LAS_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_ABS_CONST() { return GetToken(KickAssemblerParser.LAX_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_ABSY_CONST() { return GetToken(KickAssemblerParser.LAX_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_IMM_CONST() { return GetToken(KickAssemblerParser.LAX_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_IZPX_CONST() { return GetToken(KickAssemblerParser.LAX_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_IZPY_CONST() { return GetToken(KickAssemblerParser.LAX_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_ZP_CONST() { return GetToken(KickAssemblerParser.LAX_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_ZPY_CONST() { return GetToken(KickAssemblerParser.LAX_ZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_ABS_CONST() { return GetToken(KickAssemblerParser.LDA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_ABSX_CONST() { return GetToken(KickAssemblerParser.LDA_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_ABSY_CONST() { return GetToken(KickAssemblerParser.LDA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_IMM_CONST() { return GetToken(KickAssemblerParser.LDA_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_IZPX_CONST() { return GetToken(KickAssemblerParser.LDA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_IZPY_CONST() { return GetToken(KickAssemblerParser.LDA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_ZP_CONST() { return GetToken(KickAssemblerParser.LDA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_ZPX_CONST() { return GetToken(KickAssemblerParser.LDA_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDS_ABSY_CONST() { return GetToken(KickAssemblerParser.LDS_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX_ABS_CONST() { return GetToken(KickAssemblerParser.LDX_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX_ABSY_CONST() { return GetToken(KickAssemblerParser.LDX_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX_IMM_CONST() { return GetToken(KickAssemblerParser.LDX_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX_ZP_CONST() { return GetToken(KickAssemblerParser.LDX_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX_ZPY_CONST() { return GetToken(KickAssemblerParser.LDX_ZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY_ABS_CONST() { return GetToken(KickAssemblerParser.LDY_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY_ABSX_CONST() { return GetToken(KickAssemblerParser.LDY_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY_IMM_CONST() { return GetToken(KickAssemblerParser.LDY_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY_ZP_CONST() { return GetToken(KickAssemblerParser.LDY_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY_ZPX_CONST() { return GetToken(KickAssemblerParser.LDY_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR_CONST() { return GetToken(KickAssemblerParser.LSR_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR_ABS_CONST() { return GetToken(KickAssemblerParser.LSR_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR_ABSX_CONST() { return GetToken(KickAssemblerParser.LSR_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR_ZP_CONST() { return GetToken(KickAssemblerParser.LSR_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR_ZPX_CONST() { return GetToken(KickAssemblerParser.LSR_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_ABS_CONST() { return GetToken(KickAssemblerParser.LXA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_ABSY_CONST() { return GetToken(KickAssemblerParser.LXA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_IMM_CONST() { return GetToken(KickAssemblerParser.LXA_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_IZPX_CONST() { return GetToken(KickAssemblerParser.LXA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_IZPY_CONST() { return GetToken(KickAssemblerParser.LXA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_ZP_CONST() { return GetToken(KickAssemblerParser.LXA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_ZPY_CONST() { return GetToken(KickAssemblerParser.LXA_ZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_CONST() { return GetToken(KickAssemblerParser.NOP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_ABS_CONST() { return GetToken(KickAssemblerParser.NOP_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_ABSX_CONST() { return GetToken(KickAssemblerParser.NOP_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_IMM_CONST() { return GetToken(KickAssemblerParser.NOP_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_ZP_CONST() { return GetToken(KickAssemblerParser.NOP_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_ZPX_CONST() { return GetToken(KickAssemblerParser.NOP_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_ABS_CONST() { return GetToken(KickAssemblerParser.ORA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_ABSX_CONST() { return GetToken(KickAssemblerParser.ORA_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_ABSY_CONST() { return GetToken(KickAssemblerParser.ORA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_IMM_CONST() { return GetToken(KickAssemblerParser.ORA_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_IZPX_CONST() { return GetToken(KickAssemblerParser.ORA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_IZPY_CONST() { return GetToken(KickAssemblerParser.ORA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_ZP_CONST() { return GetToken(KickAssemblerParser.ORA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_ZPX_CONST() { return GetToken(KickAssemblerParser.ORA_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHA_CONST() { return GetToken(KickAssemblerParser.PHA_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHP_CONST() { return GetToken(KickAssemblerParser.PHP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHX_CONST() { return GetToken(KickAssemblerParser.PHX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHY_CONST() { return GetToken(KickAssemblerParser.PHY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLA_CONST() { return GetToken(KickAssemblerParser.PLA_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLP_CONST() { return GetToken(KickAssemblerParser.PLP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLX_CONST() { return GetToken(KickAssemblerParser.PLX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLY_CONST() { return GetToken(KickAssemblerParser.PLY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_ABS_CONST() { return GetToken(KickAssemblerParser.RLA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_ABSX_CONST() { return GetToken(KickAssemblerParser.RLA_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_ABSY_CONST() { return GetToken(KickAssemblerParser.RLA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_IZPX_CONST() { return GetToken(KickAssemblerParser.RLA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_IZPY_CONST() { return GetToken(KickAssemblerParser.RLA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_ZP_CONST() { return GetToken(KickAssemblerParser.RLA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_ZPX_CONST() { return GetToken(KickAssemblerParser.RLA_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB0_ZP_CONST() { return GetToken(KickAssemblerParser.RMB0_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB1_ZP_CONST() { return GetToken(KickAssemblerParser.RMB1_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB2_ZP_CONST() { return GetToken(KickAssemblerParser.RMB2_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB3_ZP_CONST() { return GetToken(KickAssemblerParser.RMB3_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB4_ZP_CONST() { return GetToken(KickAssemblerParser.RMB4_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB5_ZP_CONST() { return GetToken(KickAssemblerParser.RMB5_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB6_ZP_CONST() { return GetToken(KickAssemblerParser.RMB6_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB7_ZP_CONST() { return GetToken(KickAssemblerParser.RMB7_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL_CONST() { return GetToken(KickAssemblerParser.ROL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL_ABS_CONST() { return GetToken(KickAssemblerParser.ROL_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL_ABSX_CONST() { return GetToken(KickAssemblerParser.ROL_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL_ZP_CONST() { return GetToken(KickAssemblerParser.ROL_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL_ZPX_CONST() { return GetToken(KickAssemblerParser.ROL_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR_CONST() { return GetToken(KickAssemblerParser.ROR_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR_ABS_CONST() { return GetToken(KickAssemblerParser.ROR_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR_ABSX_CONST() { return GetToken(KickAssemblerParser.ROR_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR_ZP_CONST() { return GetToken(KickAssemblerParser.ROR_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR_ZPX_CONST() { return GetToken(KickAssemblerParser.ROR_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_ABS_CONST() { return GetToken(KickAssemblerParser.RRA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_ABSX_CONST() { return GetToken(KickAssemblerParser.RRA_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_ABSY_CONST() { return GetToken(KickAssemblerParser.RRA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_IZPX_CONST() { return GetToken(KickAssemblerParser.RRA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_IZPY_CONST() { return GetToken(KickAssemblerParser.RRA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_ZP_CONST() { return GetToken(KickAssemblerParser.RRA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_ZPX_CONST() { return GetToken(KickAssemblerParser.RRA_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTI_CONST() { return GetToken(KickAssemblerParser.RTI_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTS_CONST() { return GetToken(KickAssemblerParser.RTS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAC_IMM_CONST() { return GetToken(KickAssemblerParser.SAC_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAX_ABS_CONST() { return GetToken(KickAssemblerParser.SAX_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAX_IZPX_CONST() { return GetToken(KickAssemblerParser.SAX_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAX_ZP_CONST() { return GetToken(KickAssemblerParser.SAX_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAX_ZPY_CONST() { return GetToken(KickAssemblerParser.SAX_ZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_ABS_CONST() { return GetToken(KickAssemblerParser.SBC_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_ABSX_CONST() { return GetToken(KickAssemblerParser.SBC_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_ABSY_CONST() { return GetToken(KickAssemblerParser.SBC_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_IMM_CONST() { return GetToken(KickAssemblerParser.SBC_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_IZPX_CONST() { return GetToken(KickAssemblerParser.SBC_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_IZPY_CONST() { return GetToken(KickAssemblerParser.SBC_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_ZP_CONST() { return GetToken(KickAssemblerParser.SBC_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_ZPX_CONST() { return GetToken(KickAssemblerParser.SBC_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC2_IMM_CONST() { return GetToken(KickAssemblerParser.SBC2_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBX_IMM_CONST() { return GetToken(KickAssemblerParser.SBX_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC_CONST() { return GetToken(KickAssemblerParser.SEC_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SED_CONST() { return GetToken(KickAssemblerParser.SED_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEI_CONST() { return GetToken(KickAssemblerParser.SEI_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA_ABSY_CONST() { return GetToken(KickAssemblerParser.SHA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA_IZPY_CONST() { return GetToken(KickAssemblerParser.SHA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHS_ABSY_CONST() { return GetToken(KickAssemblerParser.SHS_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHX_ABSY_CONST() { return GetToken(KickAssemblerParser.SHX_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHY_ABSX_CONST() { return GetToken(KickAssemblerParser.SHY_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIR_IMM_CONST() { return GetToken(KickAssemblerParser.SIR_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_ABS_CONST() { return GetToken(KickAssemblerParser.SLO_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_ABSX_CONST() { return GetToken(KickAssemblerParser.SLO_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_ABSY_CONST() { return GetToken(KickAssemblerParser.SLO_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_IZPX_CONST() { return GetToken(KickAssemblerParser.SLO_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_IZPY_CONST() { return GetToken(KickAssemblerParser.SLO_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_ZP_CONST() { return GetToken(KickAssemblerParser.SLO_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_ZPX_CONST() { return GetToken(KickAssemblerParser.SLO_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB0_ZP_CONST() { return GetToken(KickAssemblerParser.SMB0_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB1_ZP_CONST() { return GetToken(KickAssemblerParser.SMB1_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB2_ZP_CONST() { return GetToken(KickAssemblerParser.SMB2_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB3_ZP_CONST() { return GetToken(KickAssemblerParser.SMB3_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB4_ZP_CONST() { return GetToken(KickAssemblerParser.SMB4_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB5_ZP_CONST() { return GetToken(KickAssemblerParser.SMB5_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB6_ZP_CONST() { return GetToken(KickAssemblerParser.SMB6_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB7_ZP_CONST() { return GetToken(KickAssemblerParser.SMB7_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_ABS_CONST() { return GetToken(KickAssemblerParser.SRE_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_ABSX_CONST() { return GetToken(KickAssemblerParser.SRE_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_ABSY_CONST() { return GetToken(KickAssemblerParser.SRE_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_IZPX_CONST() { return GetToken(KickAssemblerParser.SRE_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_IZPY_CONST() { return GetToken(KickAssemblerParser.SRE_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_ZP_CONST() { return GetToken(KickAssemblerParser.SRE_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_ZPX_CONST() { return GetToken(KickAssemblerParser.SRE_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_ABS_CONST() { return GetToken(KickAssemblerParser.STA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_ABSX_CONST() { return GetToken(KickAssemblerParser.STA_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_ABSY_CONST() { return GetToken(KickAssemblerParser.STA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_IZPX_CONST() { return GetToken(KickAssemblerParser.STA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_IZPY_CONST() { return GetToken(KickAssemblerParser.STA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_ZP_CONST() { return GetToken(KickAssemblerParser.STA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_ZPX_CONST() { return GetToken(KickAssemblerParser.STA_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STP_CONST() { return GetToken(KickAssemblerParser.STP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STX_ABS_CONST() { return GetToken(KickAssemblerParser.STX_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STX_ZP_CONST() { return GetToken(KickAssemblerParser.STX_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STX_ZPY_CONST() { return GetToken(KickAssemblerParser.STX_ZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STY_ABS_CONST() { return GetToken(KickAssemblerParser.STY_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STY_ZP_CONST() { return GetToken(KickAssemblerParser.STY_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STY_ZPX_CONST() { return GetToken(KickAssemblerParser.STY_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STZ_ABS_CONST() { return GetToken(KickAssemblerParser.STZ_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STZ_ABSX_CONST() { return GetToken(KickAssemblerParser.STZ_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STZ_ZP_CONST() { return GetToken(KickAssemblerParser.STZ_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STZ_ZPX_CONST() { return GetToken(KickAssemblerParser.STZ_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAS_ABSY_CONST() { return GetToken(KickAssemblerParser.TAS_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAX_CONST() { return GetToken(KickAssemblerParser.TAX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAY_CONST() { return GetToken(KickAssemblerParser.TAY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRB_ABS_CONST() { return GetToken(KickAssemblerParser.TRB_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRB_ZP_CONST() { return GetToken(KickAssemblerParser.TRB_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSB_ABS_CONST() { return GetToken(KickAssemblerParser.TSB_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSB_ZP_CONST() { return GetToken(KickAssemblerParser.TSB_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSX_CONST() { return GetToken(KickAssemblerParser.TSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXA_CONST() { return GetToken(KickAssemblerParser.TXA_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXS_CONST() { return GetToken(KickAssemblerParser.TXS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYA_CONST() { return GetToken(KickAssemblerParser.TYA_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAI_CONST() { return GetToken(KickAssemblerParser.WAI_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XAA_IMM_CONST() { return GetToken(KickAssemblerParser.XAA_IMM_CONST, 0); }
		public OpcodeConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcodeConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterOpcodeConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitOpcodeConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcodeConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeConstantContext opcodeConstant() {
		OpcodeConstantContext _localctx = new OpcodeConstantContext(Context, State);
		EnterRule(_localctx, 208, RULE_opcodeConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 210)) & ~0x3f) == 0 && ((1L << (_la - 210)) & -1L) != 0) || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & -1L) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & -1L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & -1L) != 0) || ((((_la - 466)) & ~0x3f) == 0 && ((1L << (_la - 466)) & 1099511627775L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 74: return preprocessorCondition_sempred((PreprocessorConditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 19);
		case 1: return Precpred(Context, 18);
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 16);
		case 4: return Precpred(Context, 15);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 14);
		case 8: return Precpred(Context, 13);
		}
		return true;
	}
	private bool preprocessorCondition_sempred(PreprocessorConditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,514,942,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		1,0,1,0,1,0,1,1,1,1,4,1,216,8,1,11,1,12,1,217,1,1,1,1,1,1,1,1,4,1,224,
		8,1,11,1,12,1,225,1,1,1,1,1,1,1,1,3,1,232,8,1,1,2,1,2,1,2,1,2,1,2,1,2,
		3,2,240,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,249,8,3,1,4,3,4,252,8,4,1,
		4,1,4,3,4,256,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,268,8,5,
		1,6,1,6,1,6,5,6,273,8,6,10,6,12,6,276,9,6,1,7,4,7,279,8,7,11,7,12,7,280,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
		7,300,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,308,8,8,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,331,8,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,363,8,9,10,9,12,
		9,366,9,9,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,389,8,13,1,14,1,14,1,
		15,1,15,1,15,1,15,1,15,3,15,398,8,15,1,15,1,15,1,16,1,16,1,16,3,16,405,
		8,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,443,8,18,1,19,1,19,1,
		19,1,20,1,20,1,20,1,21,1,21,3,21,453,8,21,1,22,1,22,1,22,1,23,1,23,1,23,
		1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,471,8,25,1,26,1,
		26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,3,28,485,8,28,1,29,
		1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,498,8,30,1,30,1,
		30,1,30,3,30,503,8,30,1,31,1,31,1,31,3,31,508,8,31,1,31,1,31,1,32,1,32,
		1,32,5,32,515,8,32,10,32,12,32,518,9,32,1,33,1,33,1,33,3,33,523,8,33,1,
		34,1,34,1,34,3,34,528,8,34,1,34,1,34,3,34,532,8,34,1,34,1,34,3,34,536,
		8,34,1,34,1,34,3,34,540,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,
		36,1,36,1,36,1,36,1,37,1,37,1,37,5,37,557,8,37,10,37,12,37,560,9,37,1,
		37,3,37,563,8,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
		1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,
		1,43,1,44,1,44,1,44,5,44,594,8,44,10,44,12,44,597,9,44,1,45,1,45,1,45,
		3,45,602,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,
		48,1,48,1,48,1,48,3,48,619,8,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,
		1,51,1,51,1,51,1,52,1,52,3,52,634,8,52,1,52,1,52,1,52,1,52,1,52,1,53,1,
		53,1,53,5,53,644,8,53,10,53,12,53,647,9,53,1,54,1,54,5,54,651,8,54,10,
		54,12,54,654,9,54,1,54,1,54,1,55,1,55,1,55,5,55,661,8,55,10,55,12,55,664,
		9,55,1,56,1,56,1,56,1,56,1,56,3,56,671,8,56,1,57,1,57,1,57,1,57,1,57,1,
		57,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,
		60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,5,62,701,8,62,10,62,12,62,704,
		9,62,1,62,1,62,5,62,708,8,62,10,62,12,62,711,9,62,1,62,1,62,1,63,1,63,
		1,63,5,63,718,8,63,10,63,12,63,721,9,63,1,64,1,64,1,64,1,64,1,64,1,65,
		1,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,736,8,66,1,67,1,67,1,67,1,68,1,
		68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,
		72,1,72,1,72,1,72,5,72,760,8,72,10,72,12,72,763,9,72,1,72,1,72,3,72,767,
		8,72,1,72,1,72,1,73,4,73,772,8,73,11,73,12,73,773,1,73,1,73,4,73,778,8,
		73,11,73,12,73,779,3,73,782,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,3,74,792,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
		1,74,5,74,806,8,74,10,74,12,74,809,9,74,1,75,1,75,1,75,1,75,1,75,1,75,
		1,75,1,75,1,75,3,75,820,8,75,1,76,1,76,1,76,3,76,825,8,76,1,76,3,76,828,
		8,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,80,1,81,
		1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,3,83,
		856,8,83,1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,
		86,870,8,86,3,86,872,8,86,1,87,1,87,1,87,1,87,3,87,878,8,87,1,88,1,88,
		1,88,3,88,883,8,88,1,89,1,89,1,90,1,90,1,90,5,90,890,8,90,10,90,12,90,
		893,9,90,1,91,1,91,1,91,5,91,898,8,91,10,91,12,91,901,9,91,1,92,1,92,3,
		92,905,8,92,1,92,3,92,908,8,92,1,93,1,93,1,93,3,93,913,8,93,1,94,1,94,
		1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,
		101,1,101,1,101,1,101,3,101,934,8,101,1,102,1,102,1,103,1,103,1,104,1,
		104,1,104,0,2,18,148,105,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
		122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
		158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
		194,196,198,200,202,204,206,208,0,14,1,0,100,101,3,0,105,107,109,109,134,
		135,2,0,112,113,122,125,2,0,67,67,128,128,1,0,31,34,1,0,21,23,2,0,15,16,
		18,19,1,0,112,113,1,0,139,140,1,0,13,14,2,0,13,14,506,506,1,0,149,209,
		1,0,71,89,1,0,210,505,987,0,210,1,0,0,0,2,231,1,0,0,0,4,239,1,0,0,0,6,
		248,1,0,0,0,8,251,1,0,0,0,10,267,1,0,0,0,12,269,1,0,0,0,14,299,1,0,0,0,
		16,307,1,0,0,0,18,330,1,0,0,0,20,367,1,0,0,0,22,369,1,0,0,0,24,373,1,0,
		0,0,26,388,1,0,0,0,28,390,1,0,0,0,30,392,1,0,0,0,32,401,1,0,0,0,34,408,
		1,0,0,0,36,442,1,0,0,0,38,444,1,0,0,0,40,447,1,0,0,0,42,452,1,0,0,0,44,
		454,1,0,0,0,46,457,1,0,0,0,48,460,1,0,0,0,50,463,1,0,0,0,52,472,1,0,0,
		0,54,479,1,0,0,0,56,482,1,0,0,0,58,486,1,0,0,0,60,502,1,0,0,0,62,504,1,
		0,0,0,64,511,1,0,0,0,66,519,1,0,0,0,68,524,1,0,0,0,70,541,1,0,0,0,72,547,
		1,0,0,0,74,562,1,0,0,0,76,564,1,0,0,0,78,566,1,0,0,0,80,569,1,0,0,0,82,
		576,1,0,0,0,84,579,1,0,0,0,86,586,1,0,0,0,88,590,1,0,0,0,90,598,1,0,0,
		0,92,603,1,0,0,0,94,607,1,0,0,0,96,618,1,0,0,0,98,620,1,0,0,0,100,624,
		1,0,0,0,102,628,1,0,0,0,104,631,1,0,0,0,106,640,1,0,0,0,108,648,1,0,0,
		0,110,657,1,0,0,0,112,665,1,0,0,0,114,672,1,0,0,0,116,678,1,0,0,0,118,
		684,1,0,0,0,120,690,1,0,0,0,122,694,1,0,0,0,124,697,1,0,0,0,126,714,1,
		0,0,0,128,722,1,0,0,0,130,727,1,0,0,0,132,735,1,0,0,0,134,737,1,0,0,0,
		136,740,1,0,0,0,138,743,1,0,0,0,140,746,1,0,0,0,142,750,1,0,0,0,144,753,
		1,0,0,0,146,771,1,0,0,0,148,791,1,0,0,0,150,819,1,0,0,0,152,821,1,0,0,
		0,154,829,1,0,0,0,156,832,1,0,0,0,158,835,1,0,0,0,160,838,1,0,0,0,162,
		841,1,0,0,0,164,844,1,0,0,0,166,855,1,0,0,0,168,857,1,0,0,0,170,859,1,
		0,0,0,172,862,1,0,0,0,174,877,1,0,0,0,176,882,1,0,0,0,178,884,1,0,0,0,
		180,886,1,0,0,0,182,894,1,0,0,0,184,907,1,0,0,0,186,912,1,0,0,0,188,914,
		1,0,0,0,190,916,1,0,0,0,192,918,1,0,0,0,194,920,1,0,0,0,196,922,1,0,0,
		0,198,924,1,0,0,0,200,926,1,0,0,0,202,933,1,0,0,0,204,935,1,0,0,0,206,
		937,1,0,0,0,208,939,1,0,0,0,210,211,3,2,1,0,211,212,5,0,0,1,212,1,1,0,
		0,0,213,215,3,4,2,0,214,216,5,99,0,0,215,214,1,0,0,0,216,217,1,0,0,0,217,
		215,1,0,0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,220,3,2,1,0,220,232,1,
		0,0,0,221,223,3,4,2,0,222,224,5,2,0,0,223,222,1,0,0,0,224,225,1,0,0,0,
		225,223,1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,228,3,2,1,0,228,232,
		1,0,0,0,229,232,3,4,2,0,230,232,1,0,0,0,231,213,1,0,0,0,231,221,1,0,0,
		0,231,229,1,0,0,0,231,230,1,0,0,0,232,3,1,0,0,0,233,240,3,8,4,0,234,240,
		3,6,3,0,235,240,3,150,75,0,236,240,3,10,5,0,237,240,3,36,18,0,238,240,
		3,132,66,0,239,233,1,0,0,0,239,234,1,0,0,0,239,235,1,0,0,0,239,236,1,0,
		0,0,239,237,1,0,0,0,239,238,1,0,0,0,240,5,1,0,0,0,241,242,3,174,87,0,242,
		243,5,98,0,0,243,244,3,4,2,0,244,249,1,0,0,0,245,246,3,174,87,0,246,247,
		5,98,0,0,247,249,1,0,0,0,248,241,1,0,0,0,248,245,1,0,0,0,249,7,1,0,0,0,
		250,252,5,98,0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,255,
		3,202,101,0,254,256,3,12,6,0,255,254,1,0,0,0,255,256,1,0,0,0,256,9,1,0,
		0,0,257,258,5,506,0,0,258,259,5,98,0,0,259,260,5,90,0,0,260,261,3,2,1,
		0,261,262,5,91,0,0,262,268,1,0,0,0,263,264,5,90,0,0,264,265,3,2,1,0,265,
		266,5,91,0,0,266,268,1,0,0,0,267,257,1,0,0,0,267,263,1,0,0,0,268,11,1,
		0,0,0,269,274,3,14,7,0,270,271,5,97,0,0,271,273,3,14,7,0,272,270,1,0,0,
		0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,13,1,0,0,0,276,274,
		1,0,0,0,277,279,7,0,0,0,278,277,1,0,0,0,279,280,1,0,0,0,280,278,1,0,0,
		0,280,281,1,0,0,0,281,300,1,0,0,0,282,283,5,3,0,0,283,300,3,208,104,0,
		284,285,5,3,0,0,285,300,3,184,92,0,286,287,5,94,0,0,287,288,3,12,6,0,288,
		289,5,95,0,0,289,300,1,0,0,0,290,291,5,92,0,0,291,292,3,12,6,0,292,293,
		5,93,0,0,293,300,1,0,0,0,294,300,3,16,8,0,295,296,5,102,0,0,296,300,3,
		18,9,0,297,300,3,18,9,0,298,300,5,102,0,0,299,278,1,0,0,0,299,282,1,0,
		0,0,299,284,1,0,0,0,299,286,1,0,0,0,299,290,1,0,0,0,299,294,1,0,0,0,299,
		295,1,0,0,0,299,297,1,0,0,0,299,298,1,0,0,0,300,15,1,0,0,0,301,302,3,174,
		87,0,302,303,5,101,0,0,303,308,1,0,0,0,304,305,3,174,87,0,305,306,5,100,
		0,0,306,308,1,0,0,0,307,301,1,0,0,0,307,304,1,0,0,0,308,17,1,0,0,0,309,
		310,6,9,-1,0,310,311,5,94,0,0,311,312,3,18,9,0,312,313,5,95,0,0,313,331,
		1,0,0,0,314,315,5,92,0,0,315,316,3,18,9,0,316,317,5,93,0,0,317,331,1,0,
		0,0,318,319,5,100,0,0,319,331,3,18,9,12,320,321,5,101,0,0,321,331,3,18,
		9,11,322,331,3,30,15,0,323,331,3,32,16,0,324,331,3,184,92,0,325,331,3,
		208,104,0,326,331,3,206,103,0,327,331,3,196,98,0,328,331,3,174,87,0,329,
		331,5,145,0,0,330,309,1,0,0,0,330,314,1,0,0,0,330,318,1,0,0,0,330,320,
		1,0,0,0,330,322,1,0,0,0,330,323,1,0,0,0,330,324,1,0,0,0,330,325,1,0,0,
		0,330,326,1,0,0,0,330,327,1,0,0,0,330,328,1,0,0,0,330,329,1,0,0,0,331,
		364,1,0,0,0,332,333,10,19,0,0,333,334,3,20,10,0,334,335,3,18,9,20,335,
		363,1,0,0,0,336,337,10,18,0,0,337,338,5,102,0,0,338,363,3,18,9,19,339,
		340,10,17,0,0,340,341,5,103,0,0,341,363,3,18,9,18,342,343,10,16,0,0,343,
		344,5,100,0,0,344,363,3,18,9,17,345,346,10,15,0,0,346,347,5,101,0,0,347,
		363,3,18,9,16,348,349,10,10,0,0,349,350,3,28,14,0,350,351,3,18,9,11,351,
		363,1,0,0,0,352,353,10,9,0,0,353,354,5,114,0,0,354,355,3,18,9,0,355,356,
		5,98,0,0,356,357,3,18,9,10,357,363,1,0,0,0,358,359,10,14,0,0,359,363,5,
		117,0,0,360,361,10,13,0,0,361,363,5,118,0,0,362,332,1,0,0,0,362,336,1,
		0,0,0,362,339,1,0,0,0,362,342,1,0,0,0,362,345,1,0,0,0,362,348,1,0,0,0,
		362,352,1,0,0,0,362,358,1,0,0,0,362,360,1,0,0,0,363,366,1,0,0,0,364,362,
		1,0,0,0,364,365,1,0,0,0,365,19,1,0,0,0,366,364,1,0,0,0,367,368,7,1,0,0,
		368,21,1,0,0,0,369,370,3,200,100,0,370,371,5,111,0,0,371,372,3,18,9,0,
		372,23,1,0,0,0,373,374,3,200,100,0,374,375,3,26,13,0,375,25,1,0,0,0,376,
		377,5,100,0,0,377,389,5,100,0,0,378,379,5,101,0,0,379,389,5,101,0,0,380,
		381,5,100,0,0,381,389,5,111,0,0,382,383,5,101,0,0,383,389,5,111,0,0,384,
		385,5,102,0,0,385,389,5,111,0,0,386,387,5,103,0,0,387,389,5,111,0,0,388,
		376,1,0,0,0,388,378,1,0,0,0,388,380,1,0,0,0,388,382,1,0,0,0,388,384,1,
		0,0,0,388,386,1,0,0,0,389,27,1,0,0,0,390,391,7,2,0,0,391,29,1,0,0,0,392,
		393,5,145,0,0,393,394,5,96,0,0,394,395,5,145,0,0,395,397,5,94,0,0,396,
		398,3,12,6,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,
		95,0,0,400,31,1,0,0,0,401,402,5,145,0,0,402,404,5,94,0,0,403,405,3,12,
		6,0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,5,95,0,0,407,
		33,1,0,0,0,408,409,3,18,9,0,409,35,1,0,0,0,410,443,3,38,19,0,411,443,3,
		40,20,0,412,443,3,46,23,0,413,443,3,48,24,0,414,443,3,50,25,0,415,443,
		3,52,26,0,416,443,3,54,27,0,417,443,3,56,28,0,418,443,3,58,29,0,419,443,
		3,62,31,0,420,443,3,68,34,0,421,443,3,70,35,0,422,443,3,72,36,0,423,443,
		3,78,39,0,424,443,3,80,40,0,425,443,3,84,42,0,426,443,3,86,43,0,427,443,
		3,90,45,0,428,443,3,92,46,0,429,443,3,96,48,0,430,443,3,98,49,0,431,443,
		3,100,50,0,432,443,3,94,47,0,433,443,3,102,51,0,434,443,3,104,52,0,435,
		443,3,114,57,0,436,443,3,116,58,0,437,443,3,82,41,0,438,443,3,118,59,0,
		439,443,3,120,60,0,440,443,3,122,61,0,441,443,3,124,62,0,442,410,1,0,0,
		0,442,411,1,0,0,0,442,412,1,0,0,0,442,413,1,0,0,0,442,414,1,0,0,0,442,
		415,1,0,0,0,442,416,1,0,0,0,442,417,1,0,0,0,442,418,1,0,0,0,442,419,1,
		0,0,0,442,420,1,0,0,0,442,421,1,0,0,0,442,422,1,0,0,0,442,423,1,0,0,0,
		442,424,1,0,0,0,442,425,1,0,0,0,442,426,1,0,0,0,442,427,1,0,0,0,442,428,
		1,0,0,0,442,429,1,0,0,0,442,430,1,0,0,0,442,431,1,0,0,0,442,432,1,0,0,
		0,442,433,1,0,0,0,442,434,1,0,0,0,442,435,1,0,0,0,442,436,1,0,0,0,442,
		437,1,0,0,0,442,438,1,0,0,0,442,439,1,0,0,0,442,440,1,0,0,0,442,441,1,
		0,0,0,443,37,1,0,0,0,444,445,5,37,0,0,445,446,3,18,9,0,446,39,1,0,0,0,
		447,448,5,38,0,0,448,449,3,18,9,0,449,41,1,0,0,0,450,453,3,44,22,0,451,
		453,3,22,11,0,452,450,1,0,0,0,452,451,1,0,0,0,453,43,1,0,0,0,454,455,5,
		40,0,0,455,456,3,22,11,0,456,45,1,0,0,0,457,458,5,39,0,0,458,459,3,22,
		11,0,459,47,1,0,0,0,460,461,5,42,0,0,461,462,3,22,11,0,462,49,1,0,0,0,
		463,464,5,43,0,0,464,465,5,94,0,0,465,466,3,18,9,0,466,467,5,95,0,0,467,
		470,3,4,2,0,468,469,5,44,0,0,469,471,3,4,2,0,470,468,1,0,0,0,470,471,1,
		0,0,0,471,51,1,0,0,0,472,473,5,45,0,0,473,474,5,94,0,0,474,475,3,18,9,
		0,475,476,5,95,0,0,476,477,5,97,0,0,477,478,5,145,0,0,478,53,1,0,0,0,479,
		480,5,46,0,0,480,481,3,24,12,0,481,55,1,0,0,0,482,484,5,68,0,0,483,485,
		5,145,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,57,1,0,0,0,486,487,5,69,
		0,0,487,488,3,60,30,0,488,59,1,0,0,0,489,503,3,18,9,0,490,491,3,18,9,0,
		491,492,5,97,0,0,492,493,3,18,9,0,493,503,1,0,0,0,494,495,3,18,9,0,495,
		497,5,97,0,0,496,498,3,18,9,0,497,496,1,0,0,0,497,498,1,0,0,0,498,499,
		1,0,0,0,499,500,5,97,0,0,500,501,5,145,0,0,501,503,1,0,0,0,502,489,1,0,
		0,0,502,490,1,0,0,0,502,494,1,0,0,0,503,61,1,0,0,0,504,505,5,47,0,0,505,
		507,5,90,0,0,506,508,3,64,32,0,507,506,1,0,0,0,507,508,1,0,0,0,508,509,
		1,0,0,0,509,510,5,91,0,0,510,63,1,0,0,0,511,516,3,66,33,0,512,513,5,97,
		0,0,513,515,3,66,33,0,514,512,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,0,
		516,517,1,0,0,0,517,65,1,0,0,0,518,516,1,0,0,0,519,522,5,506,0,0,520,521,
		5,111,0,0,521,523,3,186,93,0,522,520,1,0,0,0,522,523,1,0,0,0,523,67,1,
		0,0,0,524,525,5,48,0,0,525,527,5,94,0,0,526,528,3,42,21,0,527,526,1,0,
		0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,531,5,99,0,0,530,532,3,34,17,0,
		531,530,1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,535,5,99,0,0,534,536,
		3,18,9,0,535,534,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,539,5,95,
		0,0,538,540,3,4,2,0,539,538,1,0,0,0,539,540,1,0,0,0,540,69,1,0,0,0,541,
		542,5,49,0,0,542,543,5,94,0,0,543,544,3,34,17,0,544,545,5,95,0,0,545,546,
		3,4,2,0,546,71,1,0,0,0,547,548,5,50,0,0,548,549,5,506,0,0,549,550,5,90,
		0,0,550,551,3,74,37,0,551,552,5,91,0,0,552,73,1,0,0,0,553,558,3,76,38,
		0,554,555,5,97,0,0,555,557,3,76,38,0,556,554,1,0,0,0,557,560,1,0,0,0,558,
		556,1,0,0,0,558,559,1,0,0,0,559,563,1,0,0,0,560,558,1,0,0,0,561,563,1,
		0,0,0,562,553,1,0,0,0,562,561,1,0,0,0,563,75,1,0,0,0,564,565,5,506,0,0,
		565,77,1,0,0,0,566,567,3,74,37,0,567,568,3,10,5,0,568,79,1,0,0,0,569,570,
		5,52,0,0,570,571,3,176,88,0,571,572,5,94,0,0,572,573,3,74,37,0,573,574,
		5,95,0,0,574,575,3,10,5,0,575,81,1,0,0,0,576,577,5,53,0,0,577,578,3,18,
		9,0,578,83,1,0,0,0,579,580,5,54,0,0,580,581,3,176,88,0,581,582,5,94,0,
		0,582,583,3,74,37,0,583,584,5,95,0,0,584,585,3,10,5,0,585,85,1,0,0,0,586,
		587,5,55,0,0,587,588,5,506,0,0,588,589,3,88,44,0,589,87,1,0,0,0,590,595,
		5,506,0,0,591,592,5,98,0,0,592,594,5,506,0,0,593,591,1,0,0,0,594,597,1,
		0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,89,1,0,0,0,597,595,1,0,0,0,598,
		599,5,57,0,0,599,601,5,506,0,0,600,602,3,10,5,0,601,600,1,0,0,0,601,602,
		1,0,0,0,602,91,1,0,0,0,603,604,5,64,0,0,604,605,3,22,11,0,605,606,3,10,
		5,0,606,93,1,0,0,0,607,608,5,63,0,0,608,609,5,145,0,0,609,95,1,0,0,0,610,
		611,5,58,0,0,611,612,5,506,0,0,612,619,3,108,54,0,613,614,5,58,0,0,614,
		615,5,506,0,0,615,619,5,145,0,0,616,617,5,58,0,0,617,619,5,506,0,0,618,
		610,1,0,0,0,618,613,1,0,0,0,618,616,1,0,0,0,619,97,1,0,0,0,620,621,5,59,
		0,0,621,622,5,506,0,0,622,623,3,108,54,0,623,99,1,0,0,0,624,625,5,60,0,
		0,625,626,5,506,0,0,626,627,3,108,54,0,627,101,1,0,0,0,628,629,5,65,0,
		0,629,630,3,108,54,0,630,103,1,0,0,0,631,633,5,66,0,0,632,634,5,506,0,
		0,633,632,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,636,3,108,54,0,636,
		637,5,90,0,0,637,638,3,106,53,0,638,639,5,91,0,0,639,105,1,0,0,0,640,645,
		3,108,54,0,641,642,5,97,0,0,642,644,3,108,54,0,643,641,1,0,0,0,644,647,
		1,0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,646,107,1,0,0,0,647,645,1,0,0,
		0,648,652,5,92,0,0,649,651,3,110,55,0,650,649,1,0,0,0,651,654,1,0,0,0,
		652,650,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,652,1,0,0,0,655,656,
		5,93,0,0,656,109,1,0,0,0,657,662,3,112,56,0,658,659,5,97,0,0,659,661,3,
		112,56,0,660,658,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,663,1,0,0,
		0,663,111,1,0,0,0,664,662,1,0,0,0,665,666,5,506,0,0,666,670,5,111,0,0,
		667,671,3,186,93,0,668,671,5,145,0,0,669,671,3,196,98,0,670,667,1,0,0,
		0,670,668,1,0,0,0,670,669,1,0,0,0,671,113,1,0,0,0,672,673,5,61,0,0,673,
		674,5,506,0,0,674,675,5,94,0,0,675,676,5,95,0,0,676,677,3,10,5,0,677,115,
		1,0,0,0,678,679,5,62,0,0,679,680,5,506,0,0,680,681,5,94,0,0,681,682,3,
		14,7,0,682,683,5,95,0,0,683,117,1,0,0,0,684,685,5,35,0,0,685,686,5,145,
		0,0,686,687,3,4,2,0,687,688,5,97,0,0,688,689,3,4,2,0,689,119,1,0,0,0,690,
		691,5,36,0,0,691,692,5,145,0,0,692,693,3,4,2,0,693,121,1,0,0,0,694,695,
		3,184,92,0,695,696,3,10,5,0,696,123,1,0,0,0,697,698,5,70,0,0,698,702,5,
		90,0,0,699,701,5,2,0,0,700,699,1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,
		702,703,1,0,0,0,703,705,1,0,0,0,704,702,1,0,0,0,705,709,3,126,63,0,706,
		708,5,2,0,0,707,706,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,
		0,0,0,710,712,1,0,0,0,711,709,1,0,0,0,712,713,5,91,0,0,713,125,1,0,0,0,
		714,719,3,128,64,0,715,716,5,2,0,0,716,718,3,128,64,0,717,715,1,0,0,0,
		718,721,1,0,0,0,719,717,1,0,0,0,719,720,1,0,0,0,720,127,1,0,0,0,721,719,
		1,0,0,0,722,723,3,176,88,0,723,724,5,98,0,0,724,725,5,28,0,0,725,726,5,
		141,0,0,726,129,1,0,0,0,727,728,5,506,0,0,728,131,1,0,0,0,729,736,3,134,
		67,0,730,736,3,136,68,0,731,736,3,138,69,0,732,736,3,140,70,0,733,736,
		3,142,71,0,734,736,3,144,72,0,735,729,1,0,0,0,735,730,1,0,0,0,735,731,
		1,0,0,0,735,732,1,0,0,0,735,733,1,0,0,0,735,734,1,0,0,0,736,133,1,0,0,
		0,737,738,5,4,0,0,738,739,5,507,0,0,739,135,1,0,0,0,740,741,5,5,0,0,741,
		742,5,509,0,0,742,137,1,0,0,0,743,744,5,10,0,0,744,745,5,145,0,0,745,139,
		1,0,0,0,746,747,5,12,0,0,747,748,5,514,0,0,748,749,5,145,0,0,749,141,1,
		0,0,0,750,751,5,11,0,0,751,752,5,145,0,0,752,143,1,0,0,0,753,754,5,6,0,
		0,754,755,5,511,0,0,755,761,3,146,73,0,756,757,5,9,0,0,757,758,5,511,0,
		0,758,760,3,146,73,0,759,756,1,0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,761,
		762,1,0,0,0,762,766,1,0,0,0,763,761,1,0,0,0,764,765,5,8,0,0,765,767,3,
		146,73,0,766,764,1,0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,769,5,7,0,
		0,769,145,1,0,0,0,770,772,5,2,0,0,771,770,1,0,0,0,772,773,1,0,0,0,773,
		771,1,0,0,0,773,774,1,0,0,0,774,781,1,0,0,0,775,777,3,4,2,0,776,778,5,
		2,0,0,777,776,1,0,0,0,778,779,1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,
		780,782,1,0,0,0,781,775,1,0,0,0,781,782,1,0,0,0,782,147,1,0,0,0,783,784,
		6,74,-1,0,784,785,5,94,0,0,785,786,3,148,74,0,786,787,5,95,0,0,787,792,
		1,0,0,0,788,789,5,108,0,0,789,792,3,148,74,6,790,792,5,506,0,0,791,783,
		1,0,0,0,791,788,1,0,0,0,791,790,1,0,0,0,792,807,1,0,0,0,793,794,10,5,0,
		0,794,795,5,119,0,0,795,806,3,148,74,6,796,797,10,4,0,0,797,798,5,120,
		0,0,798,806,3,148,74,5,799,800,10,3,0,0,800,801,5,122,0,0,801,806,3,148,
		74,4,802,803,10,2,0,0,803,804,5,123,0,0,804,806,3,148,74,3,805,793,1,0,
		0,0,805,796,1,0,0,0,805,799,1,0,0,0,805,802,1,0,0,0,806,809,1,0,0,0,807,
		805,1,0,0,0,807,808,1,0,0,0,808,149,1,0,0,0,809,807,1,0,0,0,810,820,3,
		154,77,0,811,820,3,156,78,0,812,820,3,158,79,0,813,820,3,160,80,0,814,
		820,3,162,81,0,815,820,3,164,82,0,816,820,3,170,85,0,817,820,3,172,86,
		0,818,820,3,152,76,0,819,810,1,0,0,0,819,811,1,0,0,0,819,812,1,0,0,0,819,
		813,1,0,0,0,819,814,1,0,0,0,819,815,1,0,0,0,819,816,1,0,0,0,819,817,1,
		0,0,0,819,818,1,0,0,0,820,151,1,0,0,0,821,822,7,3,0,0,822,824,3,186,93,
		0,823,825,5,145,0,0,824,823,1,0,0,0,824,825,1,0,0,0,825,827,1,0,0,0,826,
		828,5,506,0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,153,1,0,0,0,829,830,
		5,27,0,0,830,831,7,4,0,0,831,155,1,0,0,0,832,833,5,28,0,0,833,834,3,180,
		90,0,834,157,1,0,0,0,835,836,5,29,0,0,836,837,3,180,90,0,837,159,1,0,0,
		0,838,839,5,30,0,0,839,840,3,180,90,0,840,161,1,0,0,0,841,842,5,17,0,0,
		842,843,5,145,0,0,843,163,1,0,0,0,844,845,7,5,0,0,845,846,3,186,93,0,846,
		847,5,97,0,0,847,848,3,166,83,0,848,165,1,0,0,0,849,856,3,186,93,0,850,
		851,5,92,0,0,851,852,3,180,90,0,852,853,5,93,0,0,853,856,1,0,0,0,854,856,
		3,168,84,0,855,849,1,0,0,0,855,850,1,0,0,0,855,854,1,0,0,0,856,167,1,0,
		0,0,857,858,1,0,0,0,858,169,1,0,0,0,859,860,5,20,0,0,860,861,5,145,0,0,
		861,171,1,0,0,0,862,863,5,41,0,0,863,864,7,6,0,0,864,871,3,178,89,0,865,
		866,5,97,0,0,866,869,3,186,93,0,867,868,5,97,0,0,868,870,3,186,93,0,869,
		867,1,0,0,0,869,870,1,0,0,0,870,872,1,0,0,0,871,865,1,0,0,0,871,872,1,
		0,0,0,872,173,1,0,0,0,873,874,5,108,0,0,874,878,5,506,0,0,875,878,5,108,
		0,0,876,878,3,176,88,0,877,873,1,0,0,0,877,875,1,0,0,0,877,876,1,0,0,0,
		878,175,1,0,0,0,879,880,5,110,0,0,880,883,3,200,100,0,881,883,3,200,100,
		0,882,879,1,0,0,0,882,881,1,0,0,0,883,177,1,0,0,0,884,885,5,145,0,0,885,
		179,1,0,0,0,886,891,3,186,93,0,887,888,5,97,0,0,888,890,3,186,93,0,889,
		887,1,0,0,0,890,893,1,0,0,0,891,889,1,0,0,0,891,892,1,0,0,0,892,181,1,
		0,0,0,893,891,1,0,0,0,894,899,3,184,92,0,895,896,5,97,0,0,896,898,3,184,
		92,0,897,895,1,0,0,0,898,901,1,0,0,0,899,897,1,0,0,0,899,900,1,0,0,0,900,
		183,1,0,0,0,901,899,1,0,0,0,902,908,5,144,0,0,903,905,3,188,94,0,904,903,
		1,0,0,0,904,905,1,0,0,0,905,906,1,0,0,0,906,908,3,186,93,0,907,902,1,0,
		0,0,907,904,1,0,0,0,908,185,1,0,0,0,909,913,3,190,95,0,910,913,3,192,96,
		0,911,913,3,194,97,0,912,909,1,0,0,0,912,910,1,0,0,0,912,911,1,0,0,0,913,
		187,1,0,0,0,914,915,7,7,0,0,915,189,1,0,0,0,916,917,5,141,0,0,917,191,
		1,0,0,0,918,919,5,142,0,0,919,193,1,0,0,0,920,921,5,143,0,0,921,195,1,
		0,0,0,922,923,7,8,0,0,923,197,1,0,0,0,924,925,7,9,0,0,925,199,1,0,0,0,
		926,927,7,10,0,0,927,201,1,0,0,0,928,934,3,204,102,0,929,930,3,204,102,
		0,930,931,5,96,0,0,931,932,3,198,99,0,932,934,1,0,0,0,933,928,1,0,0,0,
		933,929,1,0,0,0,934,203,1,0,0,0,935,936,7,11,0,0,936,205,1,0,0,0,937,938,
		7,12,0,0,938,207,1,0,0,0,939,940,7,13,0,0,940,209,1,0,0,0,67,217,225,231,
		239,248,251,255,267,274,280,299,307,330,362,364,388,397,404,442,452,470,
		484,497,502,507,516,522,527,531,535,539,558,562,595,601,618,633,645,652,
		662,670,702,709,719,735,761,766,773,779,781,791,805,807,819,824,827,855,
		869,871,877,882,891,899,904,907,912,933
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Righthand.RetroDbgDataProvider.KickAssembler
