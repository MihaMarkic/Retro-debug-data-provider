//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Git/Righthand/C64/retro-dbg-data-provider/src/Righthand.RetroDbgDataProvider/Righthand.RetroDbgDataProvider/KickAssembler/Grammar/KickAssemblerParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Righthand.RetroDbgDataProvider.KickAssembler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class KickAssemblerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, EOL=2, HASH=3, HASHDEFINE=4, HASHUNDEF=5, HASHIF=6, HASHENDIF=7, 
		HASHELSE=8, HASHELIF=9, HASHIMPORT=10, HASHIMPORTONCE=11, HASHIMPORTIF=12, 
		BINARY=13, C64=14, DOTTEXT=15, TEXT=16, SOURCE=17, DOTENCODING=18, DOTFILL=19, 
		DOTFILLWORD=20, DOTLOHIFILL=21, BYTE=22, WORD=23, DWORD=24, DOTCPU=25, 
		DOTBYTE=26, DOTWORD=27, DOTDWORD=28, CPU6502NOILLEGALS=29, CPU6502=30, 
		DTV=31, CPU65C02=32, ASSERT=33, ASSERTERROR=34, PRINT=35, PRINTNOW=36, 
		DOTVAR=37, VAR=38, DOTIMPORT=39, CONST=40, IF=41, ELSE=42, ERRORIF=43, 
		EVAL=44, ENUM=45, FOR=46, WHILE=47, STRUCT=48, DEFINE=49, FUNCTION=50, 
		RETURN=51, MACRO=52, PSEUDOCOMMAND=53, PSEUDOPC=54, NAMESPACE=55, SEGMENT=56, 
		SEGMENTDEF=57, SEGMENTOUT=58, MODIFY=59, FILEMODIFY=60, PLUGIN=61, LABEL=62, 
		FILE=63, DISK=64, PC=65, BREAK=66, WATCH=67, ZP=68, BLACK=69, WHITE=70, 
		RED=71, CYAN=72, PURPLE=73, GREEN=74, BLUE=75, YELLOW=76, ORANGE=77, BROWN=78, 
		LIGHT_RED=79, DARK_GRAY=80, DARK_GREY=81, GRAY=82, GREY=83, LIGHT_GREEN=84, 
		LIGHT_BLUE=85, LIGHT_GRAY=86, LIGHT_GREY=87, OPEN_BRACE=88, CLOSE_BRACE=89, 
		OPEN_BRACKET=90, CLOSE_BRACKET=91, OPEN_PARENS=92, CLOSE_PARENS=93, DOT=94, 
		COMMA=95, COLON=96, SEMICOLON=97, PLUS=98, MINUS=99, STAR=100, DIV=101, 
		PERCENT=102, AMP=103, BITWISE_OR=104, CARET=105, BANG=106, TILDE=107, 
		AT=108, ASSIGNMENT=109, LT=110, GT=111, INTERR=112, DOUBLE_COLON=113, 
		OP_COALESCING=114, OP_INC=115, OP_DEC=116, OP_AND=117, OP_OR=118, OP_PTR=119, 
		OP_EQ=120, OP_NE=121, OP_LE=122, OP_GE=123, OP_ADD_ASSIGNMENT=124, OP_SUB_ASSIGNMENT=125, 
		OP_MULT_ASSIGNMENT=126, OP_DIV_ASSIGNMENT=127, OP_MOD_ASSIGNMENT=128, 
		OP_AND_ASSIGNMENT=129, OP_OR_ASSIGNMENT=130, OP_XOR_ASSIGNMENT=131, OP_LEFT_SHIFT=132, 
		OP_RIGHT_SHIFT=133, OP_LEFT_SHIFT_ASSIGNMENT=134, OP_COALESCING_ASSIGNMENT=135, 
		OP_RANGE=136, TRUE=137, FALSE=138, DEC_NUMBER=139, HEX_NUMBER=140, BIN_NUMBER=141, 
		CHAR=142, STRING=143, OPEN_STRING=144, SINGLE_LINE_COMMENT=145, MULTI_LINE_COMMENT=146, 
		ADC=147, AND=148, ASL=149, BCC=150, BCS=151, BEQ=152, BIT=153, BMI=154, 
		BNE=155, BPL=156, BRA=157, BRK=158, BVC=159, BVS=160, CLC=161, CLD=162, 
		CLI=163, CLV=164, CMP=165, CPX=166, CPY=167, DEC=168, DEX=169, DEY=170, 
		EOR=171, INC=172, INX=173, INY=174, JMP=175, JSR=176, LDA=177, LDY=178, 
		LDX=179, LSR=180, NOP=181, ORA=182, PHA=183, PHX=184, PHY=185, PHP=186, 
		PLA=187, PLP=188, PLY=189, ROL=190, ROR=191, RTI=192, RTS=193, SBC=194, 
		SEC=195, SED=196, SEI=197, STA=198, STX=199, STY=200, STZ=201, TAX=202, 
		TAY=203, TSX=204, TXA=205, TXS=206, TYA=207, ADC_ABS_CONST=208, ADC_ABSX_CONST=209, 
		ADC_ABSY_CONST=210, ADC_IMM_CONST=211, ADC_IZPX_CONST=212, ADC_IZPY_CONST=213, 
		ADC_ZP_CONST=214, ADC_ZPX_CONST=215, AHX_ABSY_CONST=216, AHX_IZPY_CONST=217, 
		ALR_IMM_CONST=218, ANC_IMM_CONST=219, ANC2_IMM_CONST=220, AND_ABS_CONST=221, 
		AND_ABSX_CONST=222, AND_ABSY_CONST=223, AND_IMM_CONST=224, AND_IZPX_CONST=225, 
		AND_IZPY_CONST=226, AND_ZP_CONST=227, AND_ZPX_CONST=228, ANE_IMM_CONST=229, 
		ARR_IMM_CONST=230, ASL_CONST=231, ASL_ABS_CONST=232, ASL_ABSX_CONST=233, 
		ASL_ZP_CONST=234, ASL_ZPX_CONST=235, ASR_IMM_CONST=236, AXS_IMM_CONST=237, 
		BCC_REL_CONST=238, BCS_REL_CONST=239, BEQ_REL_CONST=240, BIT_ABS_CONST=241, 
		BIT_ABSX_CONST=242, BIT_IMM_CONST=243, BIT_ZP_CONST=244, BIT_ZPX_CONST=245, 
		BMI_REL_CONST=246, BNE_REL_CONST=247, BPL_REL_CONST=248, BRA_REL_CONST=249, 
		BRK_CONST=250, BVC_REL_CONST=251, BVS_REL_CONST=252, CLC_CONST=253, CLD_CONST=254, 
		CLI_CONST=255, CLV_CONST=256, CMP_ABS_CONST=257, CMP_ABSX_CONST=258, CMP_ABSY_CONST=259, 
		CMP_IMM_CONST=260, CMP_IZPX_CONST=261, CMP_IZPY_CONST=262, CMP_ZP_CONST=263, 
		CMP_ZPX_CONST=264, CPX_ABS_CONST=265, CPX_IMM_CONST=266, CPX_ZP_CONST=267, 
		CPY_ABS_CONST=268, CPY_IMM_CONST=269, CPY_ZP_CONST=270, DCM_ABS_CONST=271, 
		DCM_ABSX_CONST=272, DCM_ABSY_CONST=273, DCM_IZPX_CONST=274, DCM_IZPY_CONST=275, 
		DCM_ZP_CONST=276, DCM_ZPX_CONST=277, DCP_ABS_CONST=278, DCP_ABSX_CONST=279, 
		DCP_ABSY_CONST=280, DCP_IZPX_CONST=281, DCP_IZPY_CONST=282, DCP_ZP_CONST=283, 
		DCP_ZPX_CONST=284, DEC_CONST=285, DEC_ABS_CONST=286, DEC_ABSX_CONST=287, 
		DEC_ZP_CONST=288, DEC_ZPX_CONST=289, DEX_CONST=290, DEY_CONST=291, EOR_ABS_CONST=292, 
		EOR_ABSX_CONST=293, EOR_ABSY_CONST=294, EOR_IMM_CONST=295, EOR_IZPX_CONST=296, 
		EOR_IZPY_CONST=297, EOR_ZP_CONST=298, EOR_ZPX_CONST=299, INC_CONST=300, 
		INC_ABS_CONST=301, INC_ABSX_CONST=302, INC_ZP_CONST=303, INC_ZPX_CONST=304, 
		INS_ABS_CONST=305, INS_ABSX_CONST=306, INS_ABSY_CONST=307, INS_IZPX_CONST=308, 
		INS_IZPY_CONST=309, INS_ZP_CONST=310, INS_ZPX_CONST=311, INX_CONST=312, 
		INY_CONST=313, ISB_ABS_CONST=314, ISB_ABSX_CONST=315, ISB_ABSY_CONST=316, 
		ISB_IZPX_CONST=317, ISB_IZPY_CONST=318, ISB_ZP_CONST=319, ISB_ZPX_CONST=320, 
		ISC_ABS_CONST=321, ISC_ABSX_CONST=322, ISC_ABSY_CONST=323, ISC_IZPX_CONST=324, 
		ISC_IZPY_CONST=325, ISC_ZP_CONST=326, ISC_ZPX_CONST=327, JMP_ABS_CONST=328, 
		JMP_IND_CONST=329, JSR_ABS_CONST=330, LAE_ABSY_CONST=331, LAS_ABSY_CONST=332, 
		LAX_ABS_CONST=333, LAX_ABSY_CONST=334, LAX_IMM_CONST=335, LAX_IZPX_CONST=336, 
		LAX_IZPY_CONST=337, LAX_ZP_CONST=338, LAX_ZPY_CONST=339, LDA_ABS_CONST=340, 
		LDA_ABSX_CONST=341, LDA_ABSY_CONST=342, LDA_IMM_CONST=343, LDA_IZPX_CONST=344, 
		LDA_IZPY_CONST=345, LDA_ZP_CONST=346, LDA_ZPX_CONST=347, LDS_ABSY_CONST=348, 
		LDX_ABS_CONST=349, LDX_ABSY_CONST=350, LDX_IMM_CONST=351, LDX_ZP_CONST=352, 
		LDX_ZPY_CONST=353, LDY_ABS_CONST=354, LDY_ABSX_CONST=355, LDY_IMM_CONST=356, 
		LDY_ZP_CONST=357, LDY_ZPX_CONST=358, LSR_CONST=359, LSR_ABS_CONST=360, 
		LSR_ABSX_CONST=361, LSR_ZP_CONST=362, LSR_ZPX_CONST=363, LXA_ABS_CONST=364, 
		LXA_ABSY_CONST=365, LXA_IMM_CONST=366, LXA_IZPX_CONST=367, LXA_IZPY_CONST=368, 
		LXA_ZP_CONST=369, LXA_ZPY_CONST=370, NOP_CONST=371, NOP_ABS_CONST=372, 
		NOP_ABSX_CONST=373, NOP_IMM_CONST=374, NOP_ZP_CONST=375, NOP_ZPX_CONST=376, 
		ORA_ABS_CONST=377, ORA_ABSX_CONST=378, ORA_ABSY_CONST=379, ORA_IMM_CONST=380, 
		ORA_IZPX_CONST=381, ORA_IZPY_CONST=382, ORA_ZP_CONST=383, ORA_ZPX_CONST=384, 
		PHA_CONST=385, PHP_CONST=386, PHX_CONST=387, PHY_CONST=388, PLA_CONST=389, 
		PLP_CONST=390, PLX_CONST=391, PLY_CONST=392, RLA_ABS_CONST=393, RLA_ABSX_CONST=394, 
		RLA_ABSY_CONST=395, RLA_IZPX_CONST=396, RLA_IZPY_CONST=397, RLA_ZP_CONST=398, 
		RLA_ZPX_CONST=399, RMB0_ZP_CONST=400, RMB1_ZP_CONST=401, RMB2_ZP_CONST=402, 
		RMB3_ZP_CONST=403, RMB4_ZP_CONST=404, RMB5_ZP_CONST=405, RMB6_ZP_CONST=406, 
		RMB7_ZP_CONST=407, ROL_CONST=408, ROL_ABS_CONST=409, ROL_ABSX_CONST=410, 
		ROL_ZP_CONST=411, ROL_ZPX_CONST=412, ROR_CONST=413, ROR_ABS_CONST=414, 
		ROR_ABSX_CONST=415, ROR_ZP_CONST=416, ROR_ZPX_CONST=417, RRA_ABS_CONST=418, 
		RRA_ABSX_CONST=419, RRA_ABSY_CONST=420, RRA_IZPX_CONST=421, RRA_IZPY_CONST=422, 
		RRA_ZP_CONST=423, RRA_ZPX_CONST=424, RTI_CONST=425, RTS_CONST=426, SAC_IMM_CONST=427, 
		SAX_ABS_CONST=428, SAX_IZPX_CONST=429, SAX_ZP_CONST=430, SAX_ZPY_CONST=431, 
		SBC_ABS_CONST=432, SBC_ABSX_CONST=433, SBC_ABSY_CONST=434, SBC_IMM_CONST=435, 
		SBC_IZPX_CONST=436, SBC_IZPY_CONST=437, SBC_ZP_CONST=438, SBC_ZPX_CONST=439, 
		SBC2_IMM_CONST=440, SBX_IMM_CONST=441, SEC_CONST=442, SED_CONST=443, SEI_CONST=444, 
		SHA_ABSY_CONST=445, SHA_IZPY_CONST=446, SHS_ABSY_CONST=447, SHX_ABSY_CONST=448, 
		SHY_ABSX_CONST=449, SIR_IMM_CONST=450, SLO_ABS_CONST=451, SLO_ABSX_CONST=452, 
		SLO_ABSY_CONST=453, SLO_IZPX_CONST=454, SLO_IZPY_CONST=455, SLO_ZP_CONST=456, 
		SLO_ZPX_CONST=457, SMB0_ZP_CONST=458, SMB1_ZP_CONST=459, SMB2_ZP_CONST=460, 
		SMB3_ZP_CONST=461, SMB4_ZP_CONST=462, SMB5_ZP_CONST=463, SMB6_ZP_CONST=464, 
		SMB7_ZP_CONST=465, SRE_ABS_CONST=466, SRE_ABSX_CONST=467, SRE_ABSY_CONST=468, 
		SRE_IZPX_CONST=469, SRE_IZPY_CONST=470, SRE_ZP_CONST=471, SRE_ZPX_CONST=472, 
		STA_ABS_CONST=473, STA_ABSX_CONST=474, STA_ABSY_CONST=475, STA_IZPX_CONST=476, 
		STA_IZPY_CONST=477, STA_ZP_CONST=478, STA_ZPX_CONST=479, STP_CONST=480, 
		STX_ABS_CONST=481, STX_ZP_CONST=482, STX_ZPY_CONST=483, STY_ABS_CONST=484, 
		STY_ZP_CONST=485, STY_ZPX_CONST=486, STZ_ABS_CONST=487, STZ_ABSX_CONST=488, 
		STZ_ZP_CONST=489, STZ_ZPX_CONST=490, TAS_ABSY_CONST=491, TAX_CONST=492, 
		TAY_CONST=493, TRB_ABS_CONST=494, TRB_ZP_CONST=495, TSB_ABS_CONST=496, 
		TSB_ZP_CONST=497, TSX_CONST=498, TXA_CONST=499, TXS_CONST=500, TYA_CONST=501, 
		WAI_CONST=502, XAA_IMM_CONST=503, UNQUOTED_STRING=504, DOT_UNQUOTED_STRING=505, 
		DEFINED_TOKEN=506, HD_WS=507, UNDEFINED_TOKEN=508, HU_WS=509, IF_CONDITION=510, 
		I_INTENTIONALLY_IGNORED=511, IA_INTENTIONALLY_IGNORED=512, IIF_CONDITION=513, 
		HASH_UNQUOTED_STRING=514;
	public const int
		RULE_eol = 0, RULE_program = 1, RULE_units = 2, RULE_unit = 3, RULE_errorSyntax = 4, 
		RULE_label = 5, RULE_instruction = 6, RULE_scope = 7, RULE_namedScope = 8, 
		RULE_argumentList = 9, RULE_argument = 10, RULE_labelOffsetReference = 11, 
		RULE_expression = 12, RULE_binaryop = 13, RULE_assignment_expression = 14, 
		RULE_shorthand_assignment_expression = 15, RULE_unary_operator = 16, RULE_compareop = 17, 
		RULE_classFunction = 18, RULE_function = 19, RULE_condition = 20, RULE_compiler_statement = 21, 
		RULE_print = 22, RULE_printnow = 23, RULE_forInit = 24, RULE_forVar = 25, 
		RULE_var = 26, RULE_const = 27, RULE_if = 28, RULE_errorif = 29, RULE_eval = 30, 
		RULE_evalAssignment = 31, RULE_break = 32, RULE_watch = 33, RULE_watchArguments = 34, 
		RULE_enum = 35, RULE_enumValues = 36, RULE_enumValue = 37, RULE_for = 38, 
		RULE_while = 39, RULE_struct = 40, RULE_variableList = 41, RULE_variable = 42, 
		RULE_functionDefine = 43, RULE_return = 44, RULE_macroDefine = 45, RULE_pseudoCommandDefine = 46, 
		RULE_pseudoCommandDefineArguments = 47, RULE_namespace = 48, RULE_labelDirective = 49, 
		RULE_plugin = 50, RULE_segment = 51, RULE_segmentDef = 52, RULE_segmentOut = 53, 
		RULE_fileDirective = 54, RULE_diskDirective = 55, RULE_diskDirectiveContent = 56, 
		RULE_parameterMap = 57, RULE_parameterMapItems = 58, RULE_parameterMapItem = 59, 
		RULE_modify = 60, RULE_fileModify = 61, RULE_assert = 62, RULE_assertError = 63, 
		RULE_pseudopc = 64, RULE_zp = 65, RULE_zpArgumentList = 66, RULE_zpArgument = 67, 
		RULE_fileName = 68, RULE_preprocessorDirective = 69, RULE_preprocessorDefine = 70, 
		RULE_preprocessorUndef = 71, RULE_preprocessorImport = 72, RULE_preprocessorImportIf = 73, 
		RULE_preprocessorImportOnce = 74, RULE_preprocessorIf = 75, RULE_preprocessorBlock = 76, 
		RULE_preprocessorCondition = 77, RULE_directive = 78, RULE_memoryDirective = 79, 
		RULE_cpuDirective = 80, RULE_byteDirective = 81, RULE_wordDirective = 82, 
		RULE_dwordDirective = 83, RULE_textDirective = 84, RULE_fillDirective = 85, 
		RULE_fillDirectiveArguments = 86, RULE_fillExpression = 87, RULE_encodingDirective = 88, 
		RULE_importDataDirective = 89, RULE_labelName = 90, RULE_atName = 91, 
		RULE_file = 92, RULE_numberList = 93, RULE_numericList = 94, RULE_numeric = 95, 
		RULE_number = 96, RULE_lohibyte = 97, RULE_decNumber = 98, RULE_hexNumber = 99, 
		RULE_binNumber = 100, RULE_boolean = 101, RULE_opcodeExtension = 102, 
		RULE_fullOpcode = 103, RULE_opcode = 104, RULE_color = 105, RULE_opcodeConstant = 106;
	public static readonly string[] ruleNames = {
		"eol", "program", "units", "unit", "errorSyntax", "label", "instruction", 
		"scope", "namedScope", "argumentList", "argument", "labelOffsetReference", 
		"expression", "binaryop", "assignment_expression", "shorthand_assignment_expression", 
		"unary_operator", "compareop", "classFunction", "function", "condition", 
		"compiler_statement", "print", "printnow", "forInit", "forVar", "var", 
		"const", "if", "errorif", "eval", "evalAssignment", "break", "watch", 
		"watchArguments", "enum", "enumValues", "enumValue", "for", "while", "struct", 
		"variableList", "variable", "functionDefine", "return", "macroDefine", 
		"pseudoCommandDefine", "pseudoCommandDefineArguments", "namespace", "labelDirective", 
		"plugin", "segment", "segmentDef", "segmentOut", "fileDirective", "diskDirective", 
		"diskDirectiveContent", "parameterMap", "parameterMapItems", "parameterMapItem", 
		"modify", "fileModify", "assert", "assertError", "pseudopc", "zp", "zpArgumentList", 
		"zpArgument", "fileName", "preprocessorDirective", "preprocessorDefine", 
		"preprocessorUndef", "preprocessorImport", "preprocessorImportIf", "preprocessorImportOnce", 
		"preprocessorIf", "preprocessorBlock", "preprocessorCondition", "directive", 
		"memoryDirective", "cpuDirective", "byteDirective", "wordDirective", "dwordDirective", 
		"textDirective", "fillDirective", "fillDirectiveArguments", "fillExpression", 
		"encodingDirective", "importDataDirective", "labelName", "atName", "file", 
		"numberList", "numericList", "numeric", "number", "lohibyte", "decNumber", 
		"hexNumber", "binNumber", "boolean", "opcodeExtension", "fullOpcode", 
		"opcode", "color", "opcodeConstant"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'#'", null, null, null, null, null, null, null, null, 
		null, "'binary'", "'c64'", "'.text'", "'text'", "'source'", "'.encoding'", 
		"'.fill'", "'.fillword'", "'.lohifill'", null, null, null, "'.cpu'", "'.byte'", 
		"'.word'", "'.dword'", "'_6502NoIllegals'", "'_6502'", "'dtv'", "'_65c02'", 
		"'assert'", "'asserterror'", "'.print'", "'.printnow'", "'.var'", "'var'", 
		"'.import'", "'.const'", "'.if'", "'else'", "'.errorif'", "'.eval'", "'.enum'", 
		"'.for'", "'.while'", "'.struct'", "'.define'", "'.function'", "'.return'", 
		"'.macro'", "'.pseudocommand'", "'.pseudopc'", "'.namespace'", "'.segment'", 
		"'.segmentdef'", "'.segmentout'", "'.modify'", "'.fileModify'", "'.plugin'", 
		"'.label'", "'.file'", "'.disk'", "'.pc'", "'.break'", "'.watch'", "'.zp'", 
		"'BLACK'", "'WHITE'", "'RED'", "'CYAN'", "'PURPLE'", "'GREEN'", "'BLUE'", 
		"'YELLOW'", "'ORANGE'", "'BROWN'", "'LIGHT_RED'", "'DARK_GRAY'", "'DARK_GREY'", 
		"'GRAY'", "'GREY'", "'LIGHT_GREEN'", "'LIGHT_BLUE'", "'LIGHT_GRAY'", "'LIGHT_GREY'", 
		"'{'", "'}'", "'['", "']'", "'('", "')'", "'.'", "','", "':'", "';'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", 
		"'@'", "'='", "'<'", "'>'", "'?'", "'::'", "'??'", "'++'", "'--'", "'&&'", 
		"'||'", "'->'", "'=='", "'!='", "'<='", "'>='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'|='", "'^='", "'<<'", "'>>'", "'<<='", "'??='", 
		"'..'", "'true'", "'false'", null, null, null, null, null, null, null, 
		null, "'adc'", "'and'", "'asl'", "'bcc'", "'bcs'", "'beq'", "'bit'", "'bmi'", 
		"'bne'", "'bpl'", "'bra'", "'brk'", "'bvc'", "'bvs'", "'clc'", "'cld'", 
		"'cli'", "'clv'", "'cmp'", "'cpx'", "'cpy'", "'dec'", "'dex'", "'dey'", 
		"'eor'", "'inc'", "'inx'", "'iny'", "'jmp'", "'jsr'", "'lda'", "'ldy'", 
		"'ldx'", "'lsr'", "'nop'", "'ora'", "'pha'", "'phx'", "'phy'", "'php'", 
		"'pla'", "'plp'", "'ply'", "'rol'", "'ror'", "'rti'", "'rts'", "'sbc'", 
		"'sec'", "'sed'", "'sei'", "'sta'", "'stx'", "'sty'", "'stz'", "'tax'", 
		"'tay'", "'tsx'", "'txa'", "'txs'", "'tya'", "'ADC_ABS'", "'ADC_ABSX'", 
		"'ADC_ABSY'", "'ADC_IMM'", "'ADC_IZPX'", "'ADC_IZPY'", "'ADC_ZP'", "'ADC_ZPX'", 
		"'AHX_ABSY'", "'AHX_IZPY'", "'ALR_IMM'", "'ANC_IMM'", "'ANC2_IMM'", "'AND_ABS'", 
		"'AND_ABSX'", "'AND_ABSY'", "'AND_IMM'", "'AND_IZPX'", "'AND_IZPY'", "'AND_ZP'", 
		"'AND_ZPX'", "'ANE_IMM'", "'ARR_IMM'", "'ASL'", "'ASL_ABS'", "'ASL_ABSX'", 
		"'ASL_ZP'", "'ASL_ZPX'", "'ASR_IMM'", "'AXS_IMM'", "'BCC_REL'", "'BCS_REL'", 
		"'BEQ_REL'", "'BIT_ABS'", "'BIT_ABSX'", "'BIT_IMM'", "'BIT_ZP'", "'BIT_ZPX'", 
		"'BMI_REL'", "'BNE_REL'", "'BPL_REL'", "'BRA_REL'", "'BRK'", "'BVC_REL'", 
		"'BVS_REL'", "'CLC'", "'CLD'", "'CLI'", "'CLV'", "'CMP_ABS'", "'CMP_ABSX'", 
		"'CMP_ABSY'", "'CMP_IMM'", "'CMP_IZPX'", "'CMP_IZPY'", "'CMP_ZP'", "'CMP_ZPX'", 
		"'CPX_ABS'", "'CPX_IMM'", "'CPX_ZP'", "'CPY_ABS'", "'CPY_IMM'", "'CPY_ZP'", 
		"'DCM_ABS'", "'DCM_ABSX'", "'DCM_ABSY'", "'DCM_IZPX'", "'DCM_IZPY'", "'DCM_ZP'", 
		"'DCM_ZPX'", "'DCP_ABS'", "'DCP_ABSX'", "'DCP_ABSY'", "'DCP_IZPX'", "'DCP_IZPY'", 
		"'DCP_ZP'", "'DCP_ZPX'", "'DEC'", "'DEC_ABS'", "'DEC_ABSX'", "'DEC_ZP'", 
		"'DEC_ZPX'", "'DEX'", "'DEY'", "'EOR_ABS'", "'EOR_ABSX'", "'EOR_ABSY'", 
		"'EOR_IMM'", "'EOR_IZPX'", "'EOR_IZPY'", "'EOR_ZP'", "'EOR_ZPX'", "'INC'", 
		"'INC_ABS'", "'INC_ABSX'", "'INC_ZP'", "'INC_ZPX'", "'INS_ABS'", "'INS_ABSX'", 
		"'INS_ABSY'", "'INS_IZPX'", "'INS_IZPY'", "'INS_ZP'", "'INS_ZPX'", "'INX'", 
		"'INY'", "'ISB_ABS'", "'ISB_ABSX'", "'ISB_ABSY'", "'ISB_IZPX'", "'ISB_IZPY'", 
		"'ISB_ZP'", "'ISB_ZPX'", "'ISC_ABS'", "'ISC_ABSX'", "'ISC_ABSY'", "'ISC_IZPX'", 
		"'ISC_IZPY'", "'ISC_ZP'", "'ISC_ZPX'", "'JMP_ABS'", "'JMP_IND'", "'JSR_ABS'", 
		"'LAE_ABSY'", "'LAS_ABSY'", "'LAX_ABS'", "'LAX_ABSY'", "'LAX_IMM'", "'LAX_IZPX'", 
		"'LAX_IZPY'", "'LAX_ZP'", "'LAX_ZPY'", "'LDA_ABS'", "'LDA_ABSX'", "'LDA_ABSY'", 
		"'LDA_IMM'", "'LDA_IZPX'", "'LDA_IZPY'", "'LDA_ZP'", "'LDA_ZPX'", "'LDS_ABSY'", 
		"'LDX_ABS'", "'LDX_ABSY'", "'LDX_IMM'", "'LDX_ZP'", "'LDX_ZPY'", "'LDY_ABS'", 
		"'LDY_ABSX'", "'LDY_IMM'", "'LDY_ZP'", "'LDY_ZPX'", "'LSR'", "'LSR_ABS'", 
		"'LSR_ABSX'", "'LSR_ZP'", "'LSR_ZPX'", "'LXA_ABS'", "'LXA_ABSY'", "'LXA_IMM'", 
		"'LXA_IZPX'", "'LXA_IZPY'", "'LXA_ZP'", "'LXA_ZPY'", "'NOP'", "'NOP_ABS'", 
		"'NOP_ABSX'", "'NOP_IMM'", "'NOP_ZP'", "'NOP_ZPX'", "'ORA_ABS'", "'ORA_ABSX'", 
		"'ORA_ABSY'", "'ORA_IMM'", "'ORA_IZPX'", "'ORA_IZPY'", "'ORA_ZP'", "'ORA_ZPX'", 
		"'PHA'", "'PHP'", "'PHX'", "'PHY'", "'PLA'", "'PLP'", "'PLX'", "'PLY'", 
		"'RLA_ABS'", "'RLA_ABSX'", "'RLA_ABSY'", "'RLA_IZPX'", "'RLA_IZPY'", "'RLA_ZP'", 
		"'RLA_ZPX'", "'RMB0_ZP'", "'RMB1_ZP'", "'RMB2_ZP'", "'RMB3_ZP'", "'RMB4_ZP'", 
		"'RMB5_ZP'", "'RMB6_ZP'", "'RMB7_ZP'", "'ROL'", "'ROL_ABS'", "'ROL_ABSX'", 
		"'ROL_ZP'", "'ROL_ZPX'", "'ROR'", "'ROR_ABS'", "'ROR_ABSX'", "'ROR_ZP'", 
		"'ROR_ZPX'", "'RRA_ABS'", "'RRA_ABSX'", "'RRA_ABSY'", "'RRA_IZPX'", "'RRA_IZPY'", 
		"'RRA_ZP'", "'RRA_ZPX'", "'RTI'", "'RTS'", "'SAC_IMM'", "'SAX_ABS'", "'SAX_IZPX'", 
		"'SAX_ZP'", "'SAX_ZPY'", "'SBC_ABS'", "'SBC_ABSX'", "'SBC_ABSY'", "'SBC_IMM'", 
		"'SBC_IZPX'", "'SBC_IZPY'", "'SBC_ZP'", "'SBC_ZPX'", "'SBC2_IMM'", "'SBX_IMM'", 
		"'SEC'", "'SED'", "'SEI'", "'SHA_ABSY'", "'SHA_IZPY'", "'SHS_ABSY'", "'SHX_ABSY'", 
		"'SHY_ABSX'", "'SIR_IMM'", "'SLO_ABS'", "'SLO_ABSX'", "'SLO_ABSY'", "'SLO_IZPX'", 
		"'SLO_IZPY'", "'SLO_ZP'", "'SLO_ZPX'", "'SMB0_ZP'", "'SMB1_ZP'", "'SMB2_ZP'", 
		"'SMB3_ZP'", "'SMB4_ZP'", "'SMB5_ZP'", "'SMB6_ZP'", "'SMB7_ZP'", "'SRE_ABS'", 
		"'SRE_ABSX'", "'SRE_ABSY'", "'SRE_IZPX'", "'SRE_IZPY'", "'SRE_ZP'", "'SRE_ZPX'", 
		"'STA_ABS'", "'STA_ABSX'", "'STA_ABSY'", "'STA_IZPX'", "'STA_IZPY'", "'STA_ZP'", 
		"'STA_ZPX'", "'STP'", "'STX_ABS'", "'STX_ZP'", "'STX_ZPY'", "'STY_ABS'", 
		"'STY_ZP'", "'STY_ZPX'", "'STZ_ABS'", "'STZ_ABSX'", "'STZ_ZP'", "'STZ_ZPX'", 
		"'TAS_ABSY'", "'TAX'", "'TAY'", "'TRB_ABS'", "'TRB_ZP'", "'TSB_ABS'", 
		"'TSB_ZP'", "'TSX'", "'TXA'", "'TXS'", "'TYA'", "'WAI'", "'XAA_IMM'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "EOL", "HASH", "HASHDEFINE", "HASHUNDEF", "HASHIF", "HASHENDIF", 
		"HASHELSE", "HASHELIF", "HASHIMPORT", "HASHIMPORTONCE", "HASHIMPORTIF", 
		"BINARY", "C64", "DOTTEXT", "TEXT", "SOURCE", "DOTENCODING", "DOTFILL", 
		"DOTFILLWORD", "DOTLOHIFILL", "BYTE", "WORD", "DWORD", "DOTCPU", "DOTBYTE", 
		"DOTWORD", "DOTDWORD", "CPU6502NOILLEGALS", "CPU6502", "DTV", "CPU65C02", 
		"ASSERT", "ASSERTERROR", "PRINT", "PRINTNOW", "DOTVAR", "VAR", "DOTIMPORT", 
		"CONST", "IF", "ELSE", "ERRORIF", "EVAL", "ENUM", "FOR", "WHILE", "STRUCT", 
		"DEFINE", "FUNCTION", "RETURN", "MACRO", "PSEUDOCOMMAND", "PSEUDOPC", 
		"NAMESPACE", "SEGMENT", "SEGMENTDEF", "SEGMENTOUT", "MODIFY", "FILEMODIFY", 
		"PLUGIN", "LABEL", "FILE", "DISK", "PC", "BREAK", "WATCH", "ZP", "BLACK", 
		"WHITE", "RED", "CYAN", "PURPLE", "GREEN", "BLUE", "YELLOW", "ORANGE", 
		"BROWN", "LIGHT_RED", "DARK_GRAY", "DARK_GREY", "GRAY", "GREY", "LIGHT_GREEN", 
		"LIGHT_BLUE", "LIGHT_GRAY", "LIGHT_GREY", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", 
		"COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", 
		"AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "AT", "ASSIGNMENT", "LT", 
		"GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", "OP_DEC", "OP_AND", 
		"OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", 
		"OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
		"OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", 
		"OP_RIGHT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
		"OP_RANGE", "TRUE", "FALSE", "DEC_NUMBER", "HEX_NUMBER", "BIN_NUMBER", 
		"CHAR", "STRING", "OPEN_STRING", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
		"ADC", "AND", "ASL", "BCC", "BCS", "BEQ", "BIT", "BMI", "BNE", "BPL", 
		"BRA", "BRK", "BVC", "BVS", "CLC", "CLD", "CLI", "CLV", "CMP", "CPX", 
		"CPY", "DEC", "DEX", "DEY", "EOR", "INC", "INX", "INY", "JMP", "JSR", 
		"LDA", "LDY", "LDX", "LSR", "NOP", "ORA", "PHA", "PHX", "PHY", "PHP", 
		"PLA", "PLP", "PLY", "ROL", "ROR", "RTI", "RTS", "SBC", "SEC", "SED", 
		"SEI", "STA", "STX", "STY", "STZ", "TAX", "TAY", "TSX", "TXA", "TXS", 
		"TYA", "ADC_ABS_CONST", "ADC_ABSX_CONST", "ADC_ABSY_CONST", "ADC_IMM_CONST", 
		"ADC_IZPX_CONST", "ADC_IZPY_CONST", "ADC_ZP_CONST", "ADC_ZPX_CONST", "AHX_ABSY_CONST", 
		"AHX_IZPY_CONST", "ALR_IMM_CONST", "ANC_IMM_CONST", "ANC2_IMM_CONST", 
		"AND_ABS_CONST", "AND_ABSX_CONST", "AND_ABSY_CONST", "AND_IMM_CONST", 
		"AND_IZPX_CONST", "AND_IZPY_CONST", "AND_ZP_CONST", "AND_ZPX_CONST", "ANE_IMM_CONST", 
		"ARR_IMM_CONST", "ASL_CONST", "ASL_ABS_CONST", "ASL_ABSX_CONST", "ASL_ZP_CONST", 
		"ASL_ZPX_CONST", "ASR_IMM_CONST", "AXS_IMM_CONST", "BCC_REL_CONST", "BCS_REL_CONST", 
		"BEQ_REL_CONST", "BIT_ABS_CONST", "BIT_ABSX_CONST", "BIT_IMM_CONST", "BIT_ZP_CONST", 
		"BIT_ZPX_CONST", "BMI_REL_CONST", "BNE_REL_CONST", "BPL_REL_CONST", "BRA_REL_CONST", 
		"BRK_CONST", "BVC_REL_CONST", "BVS_REL_CONST", "CLC_CONST", "CLD_CONST", 
		"CLI_CONST", "CLV_CONST", "CMP_ABS_CONST", "CMP_ABSX_CONST", "CMP_ABSY_CONST", 
		"CMP_IMM_CONST", "CMP_IZPX_CONST", "CMP_IZPY_CONST", "CMP_ZP_CONST", "CMP_ZPX_CONST", 
		"CPX_ABS_CONST", "CPX_IMM_CONST", "CPX_ZP_CONST", "CPY_ABS_CONST", "CPY_IMM_CONST", 
		"CPY_ZP_CONST", "DCM_ABS_CONST", "DCM_ABSX_CONST", "DCM_ABSY_CONST", "DCM_IZPX_CONST", 
		"DCM_IZPY_CONST", "DCM_ZP_CONST", "DCM_ZPX_CONST", "DCP_ABS_CONST", "DCP_ABSX_CONST", 
		"DCP_ABSY_CONST", "DCP_IZPX_CONST", "DCP_IZPY_CONST", "DCP_ZP_CONST", 
		"DCP_ZPX_CONST", "DEC_CONST", "DEC_ABS_CONST", "DEC_ABSX_CONST", "DEC_ZP_CONST", 
		"DEC_ZPX_CONST", "DEX_CONST", "DEY_CONST", "EOR_ABS_CONST", "EOR_ABSX_CONST", 
		"EOR_ABSY_CONST", "EOR_IMM_CONST", "EOR_IZPX_CONST", "EOR_IZPY_CONST", 
		"EOR_ZP_CONST", "EOR_ZPX_CONST", "INC_CONST", "INC_ABS_CONST", "INC_ABSX_CONST", 
		"INC_ZP_CONST", "INC_ZPX_CONST", "INS_ABS_CONST", "INS_ABSX_CONST", "INS_ABSY_CONST", 
		"INS_IZPX_CONST", "INS_IZPY_CONST", "INS_ZP_CONST", "INS_ZPX_CONST", "INX_CONST", 
		"INY_CONST", "ISB_ABS_CONST", "ISB_ABSX_CONST", "ISB_ABSY_CONST", "ISB_IZPX_CONST", 
		"ISB_IZPY_CONST", "ISB_ZP_CONST", "ISB_ZPX_CONST", "ISC_ABS_CONST", "ISC_ABSX_CONST", 
		"ISC_ABSY_CONST", "ISC_IZPX_CONST", "ISC_IZPY_CONST", "ISC_ZP_CONST", 
		"ISC_ZPX_CONST", "JMP_ABS_CONST", "JMP_IND_CONST", "JSR_ABS_CONST", "LAE_ABSY_CONST", 
		"LAS_ABSY_CONST", "LAX_ABS_CONST", "LAX_ABSY_CONST", "LAX_IMM_CONST", 
		"LAX_IZPX_CONST", "LAX_IZPY_CONST", "LAX_ZP_CONST", "LAX_ZPY_CONST", "LDA_ABS_CONST", 
		"LDA_ABSX_CONST", "LDA_ABSY_CONST", "LDA_IMM_CONST", "LDA_IZPX_CONST", 
		"LDA_IZPY_CONST", "LDA_ZP_CONST", "LDA_ZPX_CONST", "LDS_ABSY_CONST", "LDX_ABS_CONST", 
		"LDX_ABSY_CONST", "LDX_IMM_CONST", "LDX_ZP_CONST", "LDX_ZPY_CONST", "LDY_ABS_CONST", 
		"LDY_ABSX_CONST", "LDY_IMM_CONST", "LDY_ZP_CONST", "LDY_ZPX_CONST", "LSR_CONST", 
		"LSR_ABS_CONST", "LSR_ABSX_CONST", "LSR_ZP_CONST", "LSR_ZPX_CONST", "LXA_ABS_CONST", 
		"LXA_ABSY_CONST", "LXA_IMM_CONST", "LXA_IZPX_CONST", "LXA_IZPY_CONST", 
		"LXA_ZP_CONST", "LXA_ZPY_CONST", "NOP_CONST", "NOP_ABS_CONST", "NOP_ABSX_CONST", 
		"NOP_IMM_CONST", "NOP_ZP_CONST", "NOP_ZPX_CONST", "ORA_ABS_CONST", "ORA_ABSX_CONST", 
		"ORA_ABSY_CONST", "ORA_IMM_CONST", "ORA_IZPX_CONST", "ORA_IZPY_CONST", 
		"ORA_ZP_CONST", "ORA_ZPX_CONST", "PHA_CONST", "PHP_CONST", "PHX_CONST", 
		"PHY_CONST", "PLA_CONST", "PLP_CONST", "PLX_CONST", "PLY_CONST", "RLA_ABS_CONST", 
		"RLA_ABSX_CONST", "RLA_ABSY_CONST", "RLA_IZPX_CONST", "RLA_IZPY_CONST", 
		"RLA_ZP_CONST", "RLA_ZPX_CONST", "RMB0_ZP_CONST", "RMB1_ZP_CONST", "RMB2_ZP_CONST", 
		"RMB3_ZP_CONST", "RMB4_ZP_CONST", "RMB5_ZP_CONST", "RMB6_ZP_CONST", "RMB7_ZP_CONST", 
		"ROL_CONST", "ROL_ABS_CONST", "ROL_ABSX_CONST", "ROL_ZP_CONST", "ROL_ZPX_CONST", 
		"ROR_CONST", "ROR_ABS_CONST", "ROR_ABSX_CONST", "ROR_ZP_CONST", "ROR_ZPX_CONST", 
		"RRA_ABS_CONST", "RRA_ABSX_CONST", "RRA_ABSY_CONST", "RRA_IZPX_CONST", 
		"RRA_IZPY_CONST", "RRA_ZP_CONST", "RRA_ZPX_CONST", "RTI_CONST", "RTS_CONST", 
		"SAC_IMM_CONST", "SAX_ABS_CONST", "SAX_IZPX_CONST", "SAX_ZP_CONST", "SAX_ZPY_CONST", 
		"SBC_ABS_CONST", "SBC_ABSX_CONST", "SBC_ABSY_CONST", "SBC_IMM_CONST", 
		"SBC_IZPX_CONST", "SBC_IZPY_CONST", "SBC_ZP_CONST", "SBC_ZPX_CONST", "SBC2_IMM_CONST", 
		"SBX_IMM_CONST", "SEC_CONST", "SED_CONST", "SEI_CONST", "SHA_ABSY_CONST", 
		"SHA_IZPY_CONST", "SHS_ABSY_CONST", "SHX_ABSY_CONST", "SHY_ABSX_CONST", 
		"SIR_IMM_CONST", "SLO_ABS_CONST", "SLO_ABSX_CONST", "SLO_ABSY_CONST", 
		"SLO_IZPX_CONST", "SLO_IZPY_CONST", "SLO_ZP_CONST", "SLO_ZPX_CONST", "SMB0_ZP_CONST", 
		"SMB1_ZP_CONST", "SMB2_ZP_CONST", "SMB3_ZP_CONST", "SMB4_ZP_CONST", "SMB5_ZP_CONST", 
		"SMB6_ZP_CONST", "SMB7_ZP_CONST", "SRE_ABS_CONST", "SRE_ABSX_CONST", "SRE_ABSY_CONST", 
		"SRE_IZPX_CONST", "SRE_IZPY_CONST", "SRE_ZP_CONST", "SRE_ZPX_CONST", "STA_ABS_CONST", 
		"STA_ABSX_CONST", "STA_ABSY_CONST", "STA_IZPX_CONST", "STA_IZPY_CONST", 
		"STA_ZP_CONST", "STA_ZPX_CONST", "STP_CONST", "STX_ABS_CONST", "STX_ZP_CONST", 
		"STX_ZPY_CONST", "STY_ABS_CONST", "STY_ZP_CONST", "STY_ZPX_CONST", "STZ_ABS_CONST", 
		"STZ_ABSX_CONST", "STZ_ZP_CONST", "STZ_ZPX_CONST", "TAS_ABSY_CONST", "TAX_CONST", 
		"TAY_CONST", "TRB_ABS_CONST", "TRB_ZP_CONST", "TSB_ABS_CONST", "TSB_ZP_CONST", 
		"TSX_CONST", "TXA_CONST", "TXS_CONST", "TYA_CONST", "WAI_CONST", "XAA_IMM_CONST", 
		"UNQUOTED_STRING", "DOT_UNQUOTED_STRING", "DEFINED_TOKEN", "HD_WS", "UNDEFINED_TOKEN", 
		"HU_WS", "IF_CONDITION", "I_INTENTIONALLY_IGNORED", "IA_INTENTIONALLY_IGNORED", 
		"IIF_CONDITION", "HASH_UNQUOTED_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KickAssemblerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KickAssemblerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KickAssemblerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KickAssemblerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class EolContext : ParserRuleContext {
		public EolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EolContext eol() {
		EolContext _localctx = new EolContext(Context, State);
		EnterRule(_localctx, 0, RULE_eol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			 IsEolPrevious(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitsContext units() {
			return GetRuleContext<UnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(KickAssemblerParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			units();
			State = 217;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitsContext units() {
			return GetRuleContext<UnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(KickAssemblerParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(KickAssemblerParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EolContext eol() {
			return GetRuleContext<EolContext>(0);
		}
		public UnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_units; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitsContext units() {
		UnitsContext _localctx = new UnitsContext(Context, State);
		EnterRule(_localctx, 4, RULE_units);
		int _la;
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				unit();
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 220;
					Match(SEMICOLON);
					}
					}
					State = 223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SEMICOLON );
				State = 225;
				units();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				unit();
				State = 228;
				eol();
				State = 229;
				units();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 231;
				unit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamedScopeContext namedScope() {
			return GetRuleContext<NamedScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compiler_statementContext compiler_statement() {
			return GetRuleContext<Compiler_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorDirectiveContext preprocessorDirective() {
			return GetRuleContext<PreprocessorDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorSyntaxContext errorSyntax() {
			return GetRuleContext<ErrorSyntaxContext>(0);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 6, RULE_unit);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				instruction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236;
				label();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237;
				directive();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238;
				namedScope();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 239;
				scope();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 240;
				compiler_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 241;
				preprocessorDirective();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 242;
				errorSyntax();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorSyntaxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_UNQUOTED_STRING() { return GetToken(KickAssemblerParser.DOT_UNQUOTED_STRING, 0); }
		public ErrorSyntaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorSyntax; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterErrorSyntax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitErrorSyntax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorSyntax(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorSyntaxContext errorSyntax() {
		ErrorSyntaxContext _localctx = new ErrorSyntaxContext(Context, State);
		EnterRule(_localctx, 8, RULE_errorSyntax);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			_la = TokenStream.LA(1);
			if ( !(_la==UNQUOTED_STRING || _la==DOT_UNQUOTED_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KickAssemblerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 10, RULE_label);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				labelName();
				State = 248;
				Match(COLON);
				State = 249;
				unit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				labelName();
				State = 252;
				Match(COLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullOpcodeContext fullOpcode() {
			return GetRuleContext<FullOpcodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KickAssemblerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 12, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 256;
				Match(COLON);
				}
			}

			State = 259;
			fullOpcode();
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 260;
				argumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitsContext units() {
			return GetRuleContext<UnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 14, RULE_scope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(OPEN_BRACE);
			State = 264;
			units();
			State = 265;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KickAssemblerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitsContext units() {
			return GetRuleContext<UnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		public NamedScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedScope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNamedScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNamedScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamedScopeContext namedScope() {
		NamedScopeContext _localctx = new NamedScopeContext(Context, State);
		EnterRule(_localctx, 16, RULE_namedScope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(UNQUOTED_STRING);
			State = 268;
			Match(COLON);
			State = 269;
			Match(OPEN_BRACE);
			State = 270;
			units();
			State = 271;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 18, RULE_argumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			argument();
			State = 278;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 274;
					Match(COMMA);
					State = 275;
					argument();
					}
					} 
				}
				State = 280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(KickAssemblerParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(KickAssemblerParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(KickAssemblerParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(KickAssemblerParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(KickAssemblerParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeConstantContext opcodeConstant() {
			return GetRuleContext<OpcodeConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(KickAssemblerParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(KickAssemblerParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelOffsetReferenceContext labelOffsetReference() {
			return GetRuleContext<LabelOffsetReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(KickAssemblerParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 20, RULE_argument);
		int _la;
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 281;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 284;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==PLUS || _la==MINUS );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286;
				Match(HASH);
				State = 287;
				opcodeConstant();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 288;
				Match(HASH);
				State = 289;
				numeric();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 290;
				Match(OPEN_PARENS);
				State = 291;
				argumentList();
				State = 292;
				Match(CLOSE_PARENS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 294;
				Match(OPEN_BRACKET);
				State = 295;
				argumentList();
				State = 296;
				Match(CLOSE_BRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 298;
				labelOffsetReference();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 299;
				Match(STAR);
				State = 300;
				expression(0);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 301;
				expression(0);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 302;
				Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelOffsetReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KickAssemblerParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(KickAssemblerParser.PLUS, 0); }
		public LabelOffsetReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelOffsetReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterLabelOffsetReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitLabelOffsetReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelOffsetReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelOffsetReferenceContext labelOffsetReference() {
		LabelOffsetReferenceContext _localctx = new LabelOffsetReferenceContext(Context, State);
		EnterRule(_localctx, 22, RULE_labelOffsetReference);
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				labelName();
				State = 306;
				Match(MINUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				labelName();
				State = 309;
				Match(PLUS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(KickAssemblerParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(KickAssemblerParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(KickAssemblerParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KickAssemblerParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassFunctionContext classFunction() {
			return GetRuleContext<ClassFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeConstantContext opcodeConstant() {
			return GetRuleContext<OpcodeConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryopContext binaryop() {
			return GetRuleContext<BinaryopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(KickAssemblerParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KickAssemblerParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompareopContext compareop() {
			return GetRuleContext<CompareopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERR() { return GetToken(KickAssemblerParser.INTERR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KickAssemblerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC() { return GetToken(KickAssemblerParser.OP_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DEC() { return GetToken(KickAssemblerParser.OP_DEC, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 314;
				Match(OPEN_PARENS);
				State = 315;
				expression(0);
				State = 316;
				Match(CLOSE_PARENS);
				}
				break;
			case 2:
				{
				State = 318;
				Match(OPEN_BRACKET);
				State = 319;
				expression(0);
				State = 320;
				Match(CLOSE_BRACKET);
				}
				break;
			case 3:
				{
				State = 322;
				Match(PLUS);
				State = 323;
				expression(12);
				}
				break;
			case 4:
				{
				State = 324;
				Match(MINUS);
				State = 325;
				expression(11);
				}
				break;
			case 5:
				{
				State = 326;
				classFunction();
				}
				break;
			case 6:
				{
				State = 327;
				function();
				}
				break;
			case 7:
				{
				State = 328;
				numeric();
				}
				break;
			case 8:
				{
				State = 329;
				opcodeConstant();
				}
				break;
			case 9:
				{
				State = 330;
				color();
				}
				break;
			case 10:
				{
				State = 331;
				boolean();
				}
				break;
			case 11:
				{
				State = 332;
				labelName();
				}
				break;
			case 12:
				{
				State = 333;
				Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 368;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 366;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 336;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 337;
						binaryop();
						State = 338;
						expression(20);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 340;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 341;
						Match(STAR);
						State = 342;
						expression(19);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 343;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 344;
						Match(DIV);
						State = 345;
						expression(18);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 346;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 347;
						Match(PLUS);
						State = 348;
						expression(17);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 349;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 350;
						Match(MINUS);
						State = 351;
						expression(16);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 352;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 353;
						compareop();
						State = 354;
						expression(11);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 356;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 357;
						Match(INTERR);
						State = 358;
						expression(0);
						State = 359;
						Match(COLON);
						State = 360;
						expression(10);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 362;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 363;
						Match(OP_INC);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 364;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 365;
						Match(OP_DEC);
						}
						break;
					}
					} 
				}
				State = 370;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinaryopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(KickAssemblerParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(KickAssemblerParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(KickAssemblerParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(KickAssemblerParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT() { return GetToken(KickAssemblerParser.OP_LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHT_SHIFT() { return GetToken(KickAssemblerParser.OP_RIGHT_SHIFT, 0); }
		public BinaryopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBinaryop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBinaryop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryopContext binaryop() {
		BinaryopContext _localctx = new BinaryopContext(Context, State);
		EnterRule(_localctx, 26, RULE_binaryop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & 1610612759L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			_localctx.name = Match(UNQUOTED_STRING);
			State = 374;
			Match(ASSIGNMENT);
			State = 375;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shorthand_assignment_expressionContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public Shorthand_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shorthand_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterShorthand_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitShorthand_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShorthand_assignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shorthand_assignment_expressionContext shorthand_assignment_expression() {
		Shorthand_assignment_expressionContext _localctx = new Shorthand_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_shorthand_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			_localctx.name = Match(UNQUOTED_STRING);
			State = 378;
			unary_operator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(KickAssemblerParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(KickAssemblerParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(KickAssemblerParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(KickAssemblerParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(KickAssemblerParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KickAssemblerParser.DIV, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_unary_operator);
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				Match(PLUS);
				State = 381;
				Match(PLUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 382;
				Match(MINUS);
				State = 383;
				Match(MINUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 384;
				Match(PLUS);
				State = 385;
				Match(ASSIGNMENT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 386;
				Match(MINUS);
				State = 387;
				Match(ASSIGNMENT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 388;
				Match(STAR);
				State = 389;
				Match(ASSIGNMENT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 390;
				Match(DIV);
				State = 391;
				Match(ASSIGNMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(KickAssemblerParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(KickAssemblerParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(KickAssemblerParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(KickAssemblerParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(KickAssemblerParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(KickAssemblerParser.LT, 0); }
		public CompareopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCompareop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCompareop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareopContext compareop() {
		CompareopContext _localctx = new CompareopContext(Context, State);
		EnterRule(_localctx, 34, RULE_compareop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & 15363L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(KickAssemblerParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(KickAssemblerParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KickAssemblerParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterClassFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitClassFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassFunctionContext classFunction() {
		ClassFunctionContext _localctx = new ClassFunctionContext(Context, State);
		EnterRule(_localctx, 36, RULE_classFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(STRING);
			State = 397;
			Match(DOT);
			State = 398;
			Match(STRING);
			State = 399;
			Match(OPEN_PARENS);
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7288033640447L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 127L) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & -1L) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & -1L) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & -1L) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & -1L) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & 2199023255551L) != 0)) {
				{
				State = 400;
				argumentList();
				}
			}

			State = 403;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 38, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			Match(UNQUOTED_STRING);
			State = 406;
			Match(OPEN_PARENS);
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7288033640447L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 127L) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & -1L) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & -1L) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & -1L) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & -1L) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & 2199023255551L) != 0)) {
				{
				State = 407;
				argumentList();
				}
			}

			State = 410;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 40, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compiler_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintnowContext printnow() {
			return GetRuleContext<PrintnowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstContext @const() {
			return GetRuleContext<ConstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorifContext errorif() {
			return GetRuleContext<ErrorifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvalContext eval() {
			return GetRuleContext<EvalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakContext @break() {
			return GetRuleContext<BreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WatchContext watch() {
			return GetRuleContext<WatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefineContext functionDefine() {
			return GetRuleContext<FunctionDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MacroDefineContext macroDefine() {
			return GetRuleContext<MacroDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoCommandDefineContext pseudoCommandDefine() {
			return GetRuleContext<PseudoCommandDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelDirectiveContext labelDirective() {
			return GetRuleContext<LabelDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentDefContext segmentDef() {
			return GetRuleContext<SegmentDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentOutContext segmentOut() {
			return GetRuleContext<SegmentOutContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PluginContext plugin() {
			return GetRuleContext<PluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileDirectiveContext fileDirective() {
			return GetRuleContext<FileDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiskDirectiveContext diskDirective() {
			return GetRuleContext<DiskDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifyContext modify() {
			return GetRuleContext<ModifyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileModifyContext fileModify() {
			return GetRuleContext<FileModifyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertContext assert() {
			return GetRuleContext<AssertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertErrorContext assertError() {
			return GetRuleContext<AssertErrorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudopcContext pseudopc() {
			return GetRuleContext<PseudopcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ZpContext zp() {
			return GetRuleContext<ZpContext>(0);
		}
		public Compiler_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compiler_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCompiler_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCompiler_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompiler_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compiler_statementContext compiler_statement() {
		Compiler_statementContext _localctx = new Compiler_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_compiler_statement);
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 414;
				print();
				}
				break;
			case PRINTNOW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 415;
				printnow();
				}
				break;
			case DOTVAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 416;
				var();
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 417;
				@const();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 418;
				@if();
				}
				break;
			case ERRORIF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 419;
				errorif();
				}
				break;
			case EVAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 420;
				eval();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 8);
				{
				State = 421;
				@break();
				}
				break;
			case WATCH:
				EnterOuterAlt(_localctx, 9);
				{
				State = 422;
				watch();
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 10);
				{
				State = 423;
				@enum();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 11);
				{
				State = 424;
				@for();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 425;
				@while();
				}
				break;
			case STRUCT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 426;
				@struct();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 14);
				{
				State = 427;
				functionDefine();
				}
				break;
			case MACRO:
				EnterOuterAlt(_localctx, 15);
				{
				State = 428;
				macroDefine();
				}
				break;
			case PSEUDOCOMMAND:
				EnterOuterAlt(_localctx, 16);
				{
				State = 429;
				pseudoCommandDefine();
				}
				break;
			case NAMESPACE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 430;
				@namespace();
				}
				break;
			case LABEL:
				EnterOuterAlt(_localctx, 18);
				{
				State = 431;
				labelDirective();
				}
				break;
			case SEGMENT:
				EnterOuterAlt(_localctx, 19);
				{
				State = 432;
				segment();
				}
				break;
			case SEGMENTDEF:
				EnterOuterAlt(_localctx, 20);
				{
				State = 433;
				segmentDef();
				}
				break;
			case SEGMENTOUT:
				EnterOuterAlt(_localctx, 21);
				{
				State = 434;
				segmentOut();
				}
				break;
			case PLUGIN:
				EnterOuterAlt(_localctx, 22);
				{
				State = 435;
				plugin();
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 23);
				{
				State = 436;
				fileDirective();
				}
				break;
			case DISK:
				EnterOuterAlt(_localctx, 24);
				{
				State = 437;
				diskDirective();
				}
				break;
			case MODIFY:
				EnterOuterAlt(_localctx, 25);
				{
				State = 438;
				modify();
				}
				break;
			case FILEMODIFY:
				EnterOuterAlt(_localctx, 26);
				{
				State = 439;
				fileModify();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 27);
				{
				State = 440;
				@return();
				}
				break;
			case ASSERT:
				EnterOuterAlt(_localctx, 28);
				{
				State = 441;
				assert();
				}
				break;
			case ASSERTERROR:
				EnterOuterAlt(_localctx, 29);
				{
				State = 442;
				assertError();
				}
				break;
			case LT:
			case GT:
			case DEC_NUMBER:
			case HEX_NUMBER:
			case BIN_NUMBER:
			case CHAR:
				EnterOuterAlt(_localctx, 30);
				{
				State = 443;
				pseudopc();
				}
				break;
			case ZP:
				EnterOuterAlt(_localctx, 31);
				{
				State = 444;
				zp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(KickAssemblerParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 44, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(PRINT);
			State = 448;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintnowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTNOW() { return GetToken(KickAssemblerParser.PRINTNOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintnowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printnow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPrintnow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPrintnow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintnow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintnowContext printnow() {
		PrintnowContext _localctx = new PrintnowContext(Context, State);
		EnterRule(_localctx, 46, RULE_printnow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(PRINTNOW);
			State = 451;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForVarContext forVar() {
			return GetRuleContext<ForVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 48, RULE_forInit);
		try {
			State = 455;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 453;
				forVar();
				}
				break;
			case UNQUOTED_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454;
				assignment_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(KickAssemblerParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ForVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterForVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitForVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForVarContext forVar() {
		ForVarContext _localctx = new ForVarContext(Context, State);
		EnterRule(_localctx, 50, RULE_forVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			Match(VAR);
			State = 458;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTVAR() { return GetToken(KickAssemblerParser.DOTVAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 52, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			Match(DOTVAR);
			State = 461;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(KickAssemblerParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstContext @const() {
		ConstContext _localctx = new ConstContext(Context, State);
		EnterRule(_localctx, 54, RULE_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(CONST);
			State = 464;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(KickAssemblerParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext[] unit() {
			return GetRuleContexts<UnitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit(int i) {
			return GetRuleContext<UnitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(KickAssemblerParser.ELSE, 0); }
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 56, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(IF);
			State = 467;
			Match(OPEN_PARENS);
			State = 468;
			expression(0);
			State = 469;
			Match(CLOSE_PARENS);
			State = 470;
			unit();
			State = 473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 471;
				Match(ELSE);
				State = 472;
				unit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORIF() { return GetToken(KickAssemblerParser.ERRORIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KickAssemblerParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public ErrorifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterErrorif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitErrorif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorifContext errorif() {
		ErrorifContext _localctx = new ErrorifContext(Context, State);
		EnterRule(_localctx, 58, RULE_errorif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(ERRORIF);
			State = 476;
			Match(OPEN_PARENS);
			State = 477;
			expression(0);
			State = 478;
			Match(CLOSE_PARENS);
			State = 479;
			Match(COMMA);
			State = 480;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVAL() { return GetToken(KickAssemblerParser.EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvalAssignmentContext evalAssignment() {
			return GetRuleContext<EvalAssignmentContext>(0);
		}
		public EvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalContext eval() {
		EvalContext _localctx = new EvalContext(Context, State);
		EnterRule(_localctx, 60, RULE_eval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(EVAL);
			State = 483;
			evalAssignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shorthand_assignment_expressionContext shorthand_assignment_expression() {
			return GetRuleContext<Shorthand_assignment_expressionContext>(0);
		}
		public EvalAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEvalAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEvalAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalAssignmentContext evalAssignment() {
		EvalAssignmentContext _localctx = new EvalAssignmentContext(Context, State);
		EnterRule(_localctx, 62, RULE_evalAssignment);
		try {
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485;
				assignment_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				shorthand_assignment_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(KickAssemblerParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public BreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakContext @break() {
		BreakContext _localctx = new BreakContext(Context, State);
		EnterRule(_localctx, 64, RULE_break);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(BREAK);
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 490;
				Match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WATCH() { return GetToken(KickAssemblerParser.WATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WatchArgumentsContext watchArguments() {
			return GetRuleContext<WatchArgumentsContext>(0);
		}
		public WatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_watch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterWatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitWatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WatchContext watch() {
		WatchContext _localctx = new WatchContext(Context, State);
		EnterRule(_localctx, 66, RULE_watch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(WATCH);
			State = 494;
			watchArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WatchArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public WatchArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_watchArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterWatchArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitWatchArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWatchArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WatchArgumentsContext watchArguments() {
		WatchArgumentsContext _localctx = new WatchArgumentsContext(Context, State);
		EnterRule(_localctx, 68, RULE_watchArguments);
		int _la;
		try {
			State = 509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 496;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 497;
				expression(0);
				State = 498;
				Match(COMMA);
				State = 499;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 501;
				expression(0);
				State = 502;
				Match(COMMA);
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7285886156799L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 127L) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & -1L) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & -1L) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & -1L) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & -1L) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & 2199023255551L) != 0)) {
					{
					State = 503;
					expression(0);
					}
				}

				State = 506;
				Match(COMMA);
				State = 507;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(KickAssemblerParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 70, RULE_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(ENUM);
			State = 512;
			Match(OPEN_BRACE);
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNQUOTED_STRING) {
				{
				State = 513;
				enumValues();
				}
			}

			State = 516;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEnumValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEnumValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(Context, State);
		EnterRule(_localctx, 72, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			enumValue();
			State = 523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 519;
				Match(COMMA);
				State = 520;
				enumValue();
				}
				}
				State = 525;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 74, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			Match(UNQUOTED_STRING);
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 527;
				Match(ASSIGNMENT);
				State = 528;
				number();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(KickAssemblerParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(KickAssemblerParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(KickAssemblerParser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 76, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(FOR);
			State = 532;
			Match(OPEN_PARENS);
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR || _la==UNQUOTED_STRING) {
				{
				State = 533;
				forInit();
				}
			}

			State = 536;
			Match(SEMICOLON);
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7285886156799L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 127L) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & -1L) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & -1L) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & -1L) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & -1L) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & 2199023255551L) != 0)) {
				{
				State = 537;
				condition();
				}
			}

			State = 540;
			Match(SEMICOLON);
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 7285886156799L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 127L) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & -1L) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & -1L) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & -1L) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & -1L) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & 2199023255551L) != 0)) {
				{
				State = 541;
				expression(0);
				}
			}

			State = 544;
			Match(CLOSE_PARENS);
			State = 546;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 545;
				unit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(KickAssemblerParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 78, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			Match(WHILE);
			State = 549;
			Match(OPEN_PARENS);
			State = 550;
			condition();
			State = 551;
			Match(CLOSE_PARENS);
			State = 552;
			unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(KickAssemblerParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 80, RULE_struct);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(STRUCT);
			State = 555;
			Match(UNQUOTED_STRING);
			State = 556;
			Match(OPEN_BRACE);
			State = 557;
			variableList();
			State = 558;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public VariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListContext variableList() {
		VariableListContext _localctx = new VariableListContext(Context, State);
		EnterRule(_localctx, 82, RULE_variableList);
		int _la;
		try {
			State = 569;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNQUOTED_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 560;
				variable();
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 561;
					Match(COMMA);
					State = 562;
					variable();
					}
					}
					State = 567;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case CLOSE_BRACE:
			case CLOSE_PARENS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 84, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(KickAssemblerParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtNameContext atName() {
			return GetRuleContext<AtNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public FunctionDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFunctionDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFunctionDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefineContext functionDefine() {
		FunctionDefineContext _localctx = new FunctionDefineContext(Context, State);
		EnterRule(_localctx, 86, RULE_functionDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			Match(FUNCTION);
			State = 574;
			atName();
			State = 575;
			Match(OPEN_PARENS);
			State = 576;
			variableList();
			State = 577;
			Match(CLOSE_PARENS);
			State = 578;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(KickAssemblerParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 88, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(RETURN);
			State = 581;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroDefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACRO() { return GetToken(KickAssemblerParser.MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtNameContext atName() {
			return GetRuleContext<AtNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableListContext variableList() {
			return GetRuleContext<VariableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public MacroDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterMacroDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitMacroDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroDefineContext macroDefine() {
		MacroDefineContext _localctx = new MacroDefineContext(Context, State);
		EnterRule(_localctx, 90, RULE_macroDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(MACRO);
			State = 584;
			atName();
			State = 585;
			Match(OPEN_PARENS);
			State = 586;
			variableList();
			State = 587;
			Match(CLOSE_PARENS);
			State = 588;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoCommandDefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PSEUDOCOMMAND() { return GetToken(KickAssemblerParser.PSEUDOCOMMAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PseudoCommandDefineArgumentsContext pseudoCommandDefineArguments() {
			return GetRuleContext<PseudoCommandDefineArgumentsContext>(0);
		}
		public PseudoCommandDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudoCommandDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPseudoCommandDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPseudoCommandDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudoCommandDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudoCommandDefineContext pseudoCommandDefine() {
		PseudoCommandDefineContext _localctx = new PseudoCommandDefineContext(Context, State);
		EnterRule(_localctx, 92, RULE_pseudoCommandDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			Match(PSEUDOCOMMAND);
			State = 591;
			Match(UNQUOTED_STRING);
			State = 592;
			pseudoCommandDefineArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoCommandDefineArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNQUOTED_STRING() { return GetTokens(KickAssemblerParser.UNQUOTED_STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING(int i) {
			return GetToken(KickAssemblerParser.UNQUOTED_STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(KickAssemblerParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(KickAssemblerParser.COLON, i);
		}
		public PseudoCommandDefineArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudoCommandDefineArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPseudoCommandDefineArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPseudoCommandDefineArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudoCommandDefineArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudoCommandDefineArgumentsContext pseudoCommandDefineArguments() {
		PseudoCommandDefineArgumentsContext _localctx = new PseudoCommandDefineArgumentsContext(Context, State);
		EnterRule(_localctx, 94, RULE_pseudoCommandDefineArguments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			Match(UNQUOTED_STRING);
			State = 599;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 595;
					Match(COLON);
					State = 596;
					Match(UNQUOTED_STRING);
					}
					} 
				}
				State = 601;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(KickAssemblerParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 96, RULE_namespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			Match(NAMESPACE);
			State = 603;
			Match(UNQUOTED_STRING);
			State = 605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 604;
				scope();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(KickAssemblerParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public LabelDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterLabelDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitLabelDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDirectiveContext labelDirective() {
		LabelDirectiveContext _localctx = new LabelDirectiveContext(Context, State);
		EnterRule(_localctx, 98, RULE_labelDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			Match(LABEL);
			State = 608;
			assignment_expression();
			State = 609;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(KickAssemblerParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public PluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PluginContext plugin() {
		PluginContext _localctx = new PluginContext(Context, State);
		EnterRule(_localctx, 100, RULE_plugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(PLUGIN);
			State = 612;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEGMENT() { return GetToken(KickAssemblerParser.SEGMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap() {
			return GetRuleContext<ParameterMapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public SegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentContext segment() {
		SegmentContext _localctx = new SegmentContext(Context, State);
		EnterRule(_localctx, 102, RULE_segment);
		try {
			State = 622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614;
				Match(SEGMENT);
				State = 615;
				_localctx.name = Match(UNQUOTED_STRING);
				State = 616;
				parameterMap();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 617;
				Match(SEGMENT);
				State = 618;
				_localctx.name = Match(UNQUOTED_STRING);
				State = 619;
				Match(STRING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 620;
				Match(SEGMENT);
				State = 621;
				_localctx.name = Match(UNQUOTED_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentDefContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEGMENTDEF() { return GetToken(KickAssemblerParser.SEGMENTDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap() {
			return GetRuleContext<ParameterMapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public SegmentDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterSegmentDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitSegmentDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegmentDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentDefContext segmentDef() {
		SegmentDefContext _localctx = new SegmentDefContext(Context, State);
		EnterRule(_localctx, 104, RULE_segmentDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			Match(SEGMENTDEF);
			State = 625;
			_localctx.Name = Match(UNQUOTED_STRING);
			State = 626;
			parameterMap();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentOutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEGMENTOUT() { return GetToken(KickAssemblerParser.SEGMENTOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap() {
			return GetRuleContext<ParameterMapContext>(0);
		}
		public SegmentOutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentOut; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterSegmentOut(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitSegmentOut(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegmentOut(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SegmentOutContext segmentOut() {
		SegmentOutContext _localctx = new SegmentOutContext(Context, State);
		EnterRule(_localctx, 106, RULE_segmentOut);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			Match(SEGMENTOUT);
			State = 629;
			Match(UNQUOTED_STRING);
			State = 630;
			parameterMap();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(KickAssemblerParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap() {
			return GetRuleContext<ParameterMapContext>(0);
		}
		public FileDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFileDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFileDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileDirectiveContext fileDirective() {
		FileDirectiveContext _localctx = new FileDirectiveContext(Context, State);
		EnterRule(_localctx, 108, RULE_fileDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			Match(FILE);
			State = 633;
			parameterMap();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiskDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(KickAssemblerParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap() {
			return GetRuleContext<ParameterMapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DiskDirectiveContentContext diskDirectiveContent() {
			return GetRuleContext<DiskDirectiveContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public DiskDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diskDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDiskDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDiskDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiskDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiskDirectiveContext diskDirective() {
		DiskDirectiveContext _localctx = new DiskDirectiveContext(Context, State);
		EnterRule(_localctx, 110, RULE_diskDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			Match(DISK);
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNQUOTED_STRING) {
				{
				State = 636;
				Match(UNQUOTED_STRING);
				}
			}

			State = 639;
			parameterMap();
			State = 640;
			Match(OPEN_BRACE);
			State = 641;
			diskDirectiveContent();
			State = 642;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiskDirectiveContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext[] parameterMap() {
			return GetRuleContexts<ParameterMapContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapContext parameterMap(int i) {
			return GetRuleContext<ParameterMapContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public DiskDirectiveContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diskDirectiveContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDiskDirectiveContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDiskDirectiveContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiskDirectiveContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiskDirectiveContentContext diskDirectiveContent() {
		DiskDirectiveContentContext _localctx = new DiskDirectiveContentContext(Context, State);
		EnterRule(_localctx, 112, RULE_diskDirectiveContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			parameterMap();
			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 645;
				Match(COMMA);
				State = 646;
				parameterMap();
				}
				}
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterMapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(KickAssemblerParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(KickAssemblerParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapItemsContext[] parameterMapItems() {
			return GetRuleContexts<ParameterMapItemsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapItemsContext parameterMapItems(int i) {
			return GetRuleContext<ParameterMapItemsContext>(i);
		}
		public ParameterMapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterMap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterParameterMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitParameterMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterMapContext parameterMap() {
		ParameterMapContext _localctx = new ParameterMapContext(Context, State);
		EnterRule(_localctx, 114, RULE_parameterMap);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(OPEN_BRACKET);
			State = 656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UNQUOTED_STRING) {
				{
				{
				State = 653;
				parameterMapItems();
				}
				}
				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 659;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterMapItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapItemContext[] parameterMapItem() {
			return GetRuleContexts<ParameterMapItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterMapItemContext parameterMapItem(int i) {
			return GetRuleContext<ParameterMapItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public ParameterMapItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterMapItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterParameterMapItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitParameterMapItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterMapItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterMapItemsContext parameterMapItems() {
		ParameterMapItemsContext _localctx = new ParameterMapItemsContext(Context, State);
		EnterRule(_localctx, 116, RULE_parameterMapItems);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			parameterMapItem();
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 662;
				Match(COMMA);
				State = 663;
				parameterMapItem();
				}
				}
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterMapItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ParameterMapItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterMapItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterParameterMapItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitParameterMapItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterMapItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterMapItemContext parameterMapItem() {
		ParameterMapItemContext _localctx = new ParameterMapItemContext(Context, State);
		EnterRule(_localctx, 118, RULE_parameterMapItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			Match(UNQUOTED_STRING);
			State = 670;
			Match(ASSIGNMENT);
			State = 674;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEC_NUMBER:
			case HEX_NUMBER:
			case BIN_NUMBER:
				{
				State = 671;
				number();
				}
				break;
			case STRING:
				{
				State = 672;
				Match(STRING);
				}
				break;
			case TRUE:
			case FALSE:
				{
				State = 673;
				boolean();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(KickAssemblerParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public ModifyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modify; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterModify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitModify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModify(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifyContext modify() {
		ModifyContext _localctx = new ModifyContext(Context, State);
		EnterRule(_localctx, 120, RULE_modify);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(MODIFY);
			State = 677;
			Match(UNQUOTED_STRING);
			State = 678;
			Match(OPEN_PARENS);
			State = 679;
			Match(CLOSE_PARENS);
			State = 680;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileModifyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILEMODIFY() { return GetToken(KickAssemblerParser.FILEMODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		public FileModifyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileModify; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFileModify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFileModify(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileModify(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileModifyContext fileModify() {
		FileModifyContext _localctx = new FileModifyContext(Context, State);
		EnterRule(_localctx, 122, RULE_fileModify);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			Match(FILEMODIFY);
			State = 683;
			Match(UNQUOTED_STRING);
			State = 684;
			Match(OPEN_PARENS);
			State = 685;
			argument();
			State = 686;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(KickAssemblerParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext[] unit() {
			return GetRuleContexts<UnitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit(int i) {
			return GetRuleContext<UnitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KickAssemblerParser.COMMA, 0); }
		public AssertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAssert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAssert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertContext assert() {
		AssertContext _localctx = new AssertContext(Context, State);
		EnterRule(_localctx, 124, RULE_assert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(ASSERT);
			State = 689;
			Match(STRING);
			State = 690;
			unit();
			State = 691;
			Match(COMMA);
			State = 692;
			unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertErrorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERTERROR() { return GetToken(KickAssemblerParser.ASSERTERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public AssertErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertError; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAssertError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAssertError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertErrorContext assertError() {
		AssertErrorContext _localctx = new AssertErrorContext(Context, State);
		EnterRule(_localctx, 126, RULE_assertError);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 694;
			Match(ASSERTERROR);
			State = 695;
			Match(STRING);
			State = 696;
			unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudopcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public PseudopcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudopc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPseudopc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPseudopc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudopc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudopcContext pseudopc() {
		PseudopcContext _localctx = new PseudopcContext(Context, State);
		EnterRule(_localctx, 128, RULE_pseudopc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			numeric();
			State = 699;
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZP() { return GetToken(KickAssemblerParser.ZP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ZpArgumentListContext zpArgumentList() {
			return GetRuleContext<ZpArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		public ZpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterZp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitZp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZpContext zp() {
		ZpContext _localctx = new ZpContext(Context, State);
		EnterRule(_localctx, 130, RULE_zp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			Match(ZP);
			State = 702;
			Match(OPEN_BRACE);
			State = 703;
			zpArgumentList();
			State = 704;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZpArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ZpArgumentContext[] zpArgument() {
			return GetRuleContexts<ZpArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ZpArgumentContext zpArgument(int i) {
			return GetRuleContext<ZpArgumentContext>(i);
		}
		public ZpArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zpArgumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterZpArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitZpArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZpArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZpArgumentListContext zpArgumentList() {
		ZpArgumentListContext _localctx = new ZpArgumentListContext(Context, State);
		EnterRule(_localctx, 132, RULE_zpArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706;
			zpArgument();
			State = 710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==UNQUOTED_STRING) {
				{
				{
				State = 707;
				zpArgument();
				}
				}
				State = 712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZpArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtNameContext atName() {
			return GetRuleContext<AtNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KickAssemblerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTBYTE() { return GetToken(KickAssemblerParser.DOTBYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_NUMBER() { return GetToken(KickAssemblerParser.DEC_NUMBER, 0); }
		public ZpArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zpArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterZpArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitZpArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZpArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZpArgumentContext zpArgument() {
		ZpArgumentContext _localctx = new ZpArgumentContext(Context, State);
		EnterRule(_localctx, 134, RULE_zpArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			atName();
			State = 714;
			Match(COLON);
			State = 715;
			Match(DOTBYTE);
			State = 716;
			Match(DEC_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public FileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFileName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFileName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNameContext fileName() {
		FileNameContext _localctx = new FileNameContext(Context, State);
		EnterRule(_localctx, 136, RULE_fileName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorDefineContext preprocessorDefine() {
			return GetRuleContext<PreprocessorDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorUndefContext preprocessorUndef() {
			return GetRuleContext<PreprocessorUndefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorImportContext preprocessorImport() {
			return GetRuleContext<PreprocessorImportContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorImportIfContext preprocessorImportIf() {
			return GetRuleContext<PreprocessorImportIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorImportOnceContext preprocessorImportOnce() {
			return GetRuleContext<PreprocessorImportOnceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorIfContext preprocessorIf() {
			return GetRuleContext<PreprocessorIfContext>(0);
		}
		public PreprocessorDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorDirectiveContext preprocessorDirective() {
		PreprocessorDirectiveContext _localctx = new PreprocessorDirectiveContext(Context, State);
		EnterRule(_localctx, 138, RULE_preprocessorDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HASHDEFINE:
				{
				State = 720;
				preprocessorDefine();
				}
				break;
			case HASHUNDEF:
				{
				State = 721;
				preprocessorUndef();
				}
				break;
			case HASHIMPORT:
				{
				State = 722;
				preprocessorImport();
				}
				break;
			case HASHIMPORTIF:
				{
				State = 723;
				preprocessorImportIf();
				}
				break;
			case HASHIMPORTONCE:
				{
				State = 724;
				preprocessorImportOnce();
				}
				break;
			case HASHIF:
				{
				State = 725;
				preprocessorIf();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorDefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHDEFINE() { return GetToken(KickAssemblerParser.HASHDEFINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINED_TOKEN() { return GetToken(KickAssemblerParser.DEFINED_TOKEN, 0); }
		public PreprocessorDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorDefineContext preprocessorDefine() {
		PreprocessorDefineContext _localctx = new PreprocessorDefineContext(Context, State);
		EnterRule(_localctx, 140, RULE_preprocessorDefine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			Match(HASHDEFINE);
			State = 729;
			Match(DEFINED_TOKEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorUndefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHUNDEF() { return GetToken(KickAssemblerParser.HASHUNDEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED_TOKEN() { return GetToken(KickAssemblerParser.UNDEFINED_TOKEN, 0); }
		public PreprocessorUndefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorUndef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorUndef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorUndef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorUndef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorUndefContext preprocessorUndef() {
		PreprocessorUndefContext _localctx = new PreprocessorUndefContext(Context, State);
		EnterRule(_localctx, 142, RULE_preprocessorUndef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			Match(HASHUNDEF);
			State = 732;
			Match(UNDEFINED_TOKEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorImportContext : ParserRuleContext {
		public IToken fileReference;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHIMPORT() { return GetToken(KickAssemblerParser.HASHIMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public PreprocessorImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorImport; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorImport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorImport(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorImportContext preprocessorImport() {
		PreprocessorImportContext _localctx = new PreprocessorImportContext(Context, State);
		EnterRule(_localctx, 144, RULE_preprocessorImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			Match(HASHIMPORT);
			State = 735;
			_localctx.fileReference = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorImportIfContext : ParserRuleContext {
		public IToken fileReference;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHIMPORTIF() { return GetToken(KickAssemblerParser.HASHIMPORTIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IIF_CONDITION() { return GetToken(KickAssemblerParser.IIF_CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public PreprocessorImportIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorImportIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorImportIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorImportIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorImportIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorImportIfContext preprocessorImportIf() {
		PreprocessorImportIfContext _localctx = new PreprocessorImportIfContext(Context, State);
		EnterRule(_localctx, 146, RULE_preprocessorImportIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			Match(HASHIMPORTIF);
			State = 738;
			Match(IIF_CONDITION);
			State = 739;
			_localctx.fileReference = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorImportOnceContext : ParserRuleContext {
		public IToken fileReference;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHIMPORTONCE() { return GetToken(KickAssemblerParser.HASHIMPORTONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public PreprocessorImportOnceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorImportOnce; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorImportOnce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorImportOnce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorImportOnce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorImportOnceContext preprocessorImportOnce() {
		PreprocessorImportOnceContext _localctx = new PreprocessorImportOnceContext(Context, State);
		EnterRule(_localctx, 148, RULE_preprocessorImportOnce);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			Match(HASHIMPORTONCE);
			State = 742;
			_localctx.fileReference = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorIfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHIF() { return GetToken(KickAssemblerParser.HASHIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF_CONDITION() { return GetTokens(KickAssemblerParser.IF_CONDITION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_CONDITION(int i) {
			return GetToken(KickAssemblerParser.IF_CONDITION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorBlockContext[] preprocessorBlock() {
			return GetRuleContexts<PreprocessorBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorBlockContext preprocessorBlock(int i) {
			return GetRuleContext<PreprocessorBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHENDIF() { return GetToken(KickAssemblerParser.HASHENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HASHELIF() { return GetTokens(KickAssemblerParser.HASHELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHELIF(int i) {
			return GetToken(KickAssemblerParser.HASHELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHELSE() { return GetToken(KickAssemblerParser.HASHELSE, 0); }
		public PreprocessorIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorIfContext preprocessorIf() {
		PreprocessorIfContext _localctx = new PreprocessorIfContext(Context, State);
		EnterRule(_localctx, 150, RULE_preprocessorIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 744;
			Match(HASHIF);
			State = 745;
			Match(IF_CONDITION);
			State = 746;
			preprocessorBlock();
			State = 752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHELIF) {
				{
				{
				State = 747;
				Match(HASHELIF);
				State = 748;
				Match(IF_CONDITION);
				State = 749;
				preprocessorBlock();
				}
				}
				State = 754;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASHELSE) {
				{
				State = 755;
				Match(HASHELSE);
				State = 756;
				preprocessorBlock();
				}
			}

			State = 759;
			Match(HASHENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EolContext[] eol() {
			return GetRuleContexts<EolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EolContext eol(int i) {
			return GetRuleContext<EolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public PreprocessorBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorBlockContext preprocessorBlock() {
		PreprocessorBlockContext _localctx = new PreprocessorBlockContext(Context, State);
		EnterRule(_localctx, 152, RULE_preprocessorBlock);
		try {
			State = 766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HASHDEFINE:
			case HASHUNDEF:
			case HASHIF:
			case HASHIMPORT:
			case HASHIMPORTONCE:
			case HASHIMPORTIF:
			case DOTTEXT:
			case DOTENCODING:
			case DOTFILL:
			case DOTFILLWORD:
			case DOTLOHIFILL:
			case DOTCPU:
			case DOTBYTE:
			case DOTWORD:
			case DOTDWORD:
			case ASSERT:
			case ASSERTERROR:
			case PRINT:
			case PRINTNOW:
			case DOTVAR:
			case DOTIMPORT:
			case CONST:
			case IF:
			case ERRORIF:
			case EVAL:
			case ENUM:
			case FOR:
			case WHILE:
			case STRUCT:
			case FUNCTION:
			case RETURN:
			case MACRO:
			case PSEUDOCOMMAND:
			case NAMESPACE:
			case SEGMENT:
			case SEGMENTDEF:
			case SEGMENTOUT:
			case MODIFY:
			case FILEMODIFY:
			case PLUGIN:
			case LABEL:
			case FILE:
			case DISK:
			case PC:
			case BREAK:
			case WATCH:
			case ZP:
			case OPEN_BRACE:
			case COLON:
			case BANG:
			case AT:
			case LT:
			case GT:
			case OP_MULT_ASSIGNMENT:
			case DEC_NUMBER:
			case HEX_NUMBER:
			case BIN_NUMBER:
			case CHAR:
			case ADC:
			case AND:
			case ASL:
			case BCC:
			case BCS:
			case BEQ:
			case BIT:
			case BMI:
			case BNE:
			case BPL:
			case BRA:
			case BRK:
			case BVC:
			case BVS:
			case CLC:
			case CLD:
			case CLI:
			case CLV:
			case CMP:
			case CPX:
			case CPY:
			case DEC:
			case DEX:
			case DEY:
			case EOR:
			case INC:
			case INX:
			case INY:
			case JMP:
			case JSR:
			case LDA:
			case LDY:
			case LDX:
			case LSR:
			case NOP:
			case ORA:
			case PHA:
			case PHX:
			case PHY:
			case PHP:
			case PLA:
			case PLP:
			case PLY:
			case ROL:
			case ROR:
			case RTI:
			case RTS:
			case SBC:
			case SEC:
			case SED:
			case SEI:
			case STA:
			case STX:
			case STY:
			case STZ:
			case TAX:
			case TAY:
			case TSX:
			case TXA:
			case TXS:
			case TYA:
			case UNQUOTED_STRING:
			case DOT_UNQUOTED_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 761;
				eol();
				State = 762;
				unit();
				State = 763;
				eol();
				}
				break;
			case HASHENDIF:
			case HASHELSE:
			case HASHELIF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 765;
				eol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreprocessorConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorConditionContext[] preprocessorCondition() {
			return GetRuleContexts<PreprocessorConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreprocessorConditionContext preprocessorCondition(int i) {
			return GetRuleContext<PreprocessorConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(KickAssemblerParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(KickAssemblerParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(KickAssemblerParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(KickAssemblerParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(KickAssemblerParser.OP_NE, 0); }
		public PreprocessorConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preprocessorCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPreprocessorCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPreprocessorCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreprocessorCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreprocessorConditionContext preprocessorCondition() {
		return preprocessorCondition(0);
	}

	private PreprocessorConditionContext preprocessorCondition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PreprocessorConditionContext _localctx = new PreprocessorConditionContext(Context, _parentState);
		PreprocessorConditionContext _prevctx = _localctx;
		int _startState = 154;
		EnterRecursionRule(_localctx, 154, RULE_preprocessorCondition, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PARENS:
				{
				State = 769;
				Match(OPEN_PARENS);
				State = 770;
				preprocessorCondition(0);
				State = 771;
				Match(CLOSE_PARENS);
				}
				break;
			case BANG:
				{
				State = 773;
				Match(BANG);
				State = 774;
				preprocessorCondition(6);
				}
				break;
			case UNQUOTED_STRING:
				{
				State = 775;
				Match(UNQUOTED_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 792;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 790;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
					case 1:
						{
						_localctx = new PreprocessorConditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessorCondition);
						State = 778;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 779;
						Match(OP_AND);
						State = 780;
						preprocessorCondition(6);
						}
						break;
					case 2:
						{
						_localctx = new PreprocessorConditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessorCondition);
						State = 781;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 782;
						Match(OP_OR);
						State = 783;
						preprocessorCondition(5);
						}
						break;
					case 3:
						{
						_localctx = new PreprocessorConditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessorCondition);
						State = 784;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 785;
						Match(OP_EQ);
						State = 786;
						preprocessorCondition(4);
						}
						break;
					case 4:
						{
						_localctx = new PreprocessorConditionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_preprocessorCondition);
						State = 787;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 788;
						Match(OP_NE);
						State = 789;
						preprocessorCondition(3);
						}
						break;
					}
					} 
				}
				State = 794;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CpuDirectiveContext cpuDirective() {
			return GetRuleContext<CpuDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ByteDirectiveContext byteDirective() {
			return GetRuleContext<ByteDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WordDirectiveContext wordDirective() {
			return GetRuleContext<WordDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DwordDirectiveContext dwordDirective() {
			return GetRuleContext<DwordDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextDirectiveContext textDirective() {
			return GetRuleContext<TextDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FillDirectiveContext fillDirective() {
			return GetRuleContext<FillDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncodingDirectiveContext encodingDirective() {
			return GetRuleContext<EncodingDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDataDirectiveContext importDataDirective() {
			return GetRuleContext<ImportDataDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryDirectiveContext memoryDirective() {
			return GetRuleContext<MemoryDirectiveContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 156, RULE_directive);
		try {
			State = 804;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOTCPU:
				EnterOuterAlt(_localctx, 1);
				{
				State = 795;
				cpuDirective();
				}
				break;
			case DOTBYTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 796;
				byteDirective();
				}
				break;
			case DOTWORD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 797;
				wordDirective();
				}
				break;
			case DOTDWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 798;
				dwordDirective();
				}
				break;
			case DOTTEXT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 799;
				textDirective();
				}
				break;
			case DOTFILL:
			case DOTFILLWORD:
			case DOTLOHIFILL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 800;
				fillDirective();
				}
				break;
			case DOTENCODING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 801;
				encodingDirective();
				}
				break;
			case DOTIMPORT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 802;
				importDataDirective();
				}
				break;
			case PC:
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 803;
				memoryDirective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(KickAssemblerParser.OP_MULT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PC() { return GetToken(KickAssemblerParser.PC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public MemoryDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterMemoryDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitMemoryDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemoryDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemoryDirectiveContext memoryDirective() {
		MemoryDirectiveContext _localctx = new MemoryDirectiveContext(Context, State);
		EnterRule(_localctx, 158, RULE_memoryDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			_la = TokenStream.LA(1);
			if ( !(_la==PC || _la==OP_MULT_ASSIGNMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 807;
			number();
			State = 809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 808;
				Match(STRING);
				}
			}

			State = 812;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 811;
				Match(UNQUOTED_STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CpuDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTCPU() { return GetToken(KickAssemblerParser.DOTCPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU6502NOILLEGALS() { return GetToken(KickAssemblerParser.CPU6502NOILLEGALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU6502() { return GetToken(KickAssemblerParser.CPU6502, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DTV() { return GetToken(KickAssemblerParser.DTV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU65C02() { return GetToken(KickAssemblerParser.CPU65C02, 0); }
		public CpuDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cpuDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCpuDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCpuDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCpuDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CpuDirectiveContext cpuDirective() {
		CpuDirectiveContext _localctx = new CpuDirectiveContext(Context, State);
		EnterRule(_localctx, 160, RULE_cpuDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814;
			Match(DOTCPU);
			State = 815;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8053063680L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTBYTE() { return GetToken(KickAssemblerParser.DOTBYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		public ByteDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byteDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterByteDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitByteDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByteDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ByteDirectiveContext byteDirective() {
		ByteDirectiveContext _localctx = new ByteDirectiveContext(Context, State);
		EnterRule(_localctx, 162, RULE_byteDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(DOTBYTE);
			State = 818;
			numberList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTWORD() { return GetToken(KickAssemblerParser.DOTWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		public WordDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterWordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitWordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordDirectiveContext wordDirective() {
		WordDirectiveContext _localctx = new WordDirectiveContext(Context, State);
		EnterRule(_localctx, 164, RULE_wordDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(DOTWORD);
			State = 821;
			numberList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DwordDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDWORD() { return GetToken(KickAssemblerParser.DOTDWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		public DwordDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dwordDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDwordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDwordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDwordDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DwordDirectiveContext dwordDirective() {
		DwordDirectiveContext _localctx = new DwordDirectiveContext(Context, State);
		EnterRule(_localctx, 166, RULE_dwordDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(DOTDWORD);
			State = 824;
			numberList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTTEXT() { return GetToken(KickAssemblerParser.DOTTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public TextDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterTextDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitTextDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextDirectiveContext textDirective() {
		TextDirectiveContext _localctx = new TextDirectiveContext(Context, State);
		EnterRule(_localctx, 168, RULE_textDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 826;
			Match(DOTTEXT);
			State = 827;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KickAssemblerParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FillDirectiveArgumentsContext fillDirectiveArguments() {
			return GetRuleContext<FillDirectiveArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTFILL() { return GetToken(KickAssemblerParser.DOTFILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTFILLWORD() { return GetToken(KickAssemblerParser.DOTFILLWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTLOHIFILL() { return GetToken(KickAssemblerParser.DOTLOHIFILL, 0); }
		public FillDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFillDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFillDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillDirectiveContext fillDirective() {
		FillDirectiveContext _localctx = new FillDirectiveContext(Context, State);
		EnterRule(_localctx, 170, RULE_fillDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 829;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 830;
			number();
			State = 831;
			Match(COMMA);
			State = 832;
			fillDirectiveArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillDirectiveArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(KickAssemblerParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(KickAssemblerParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FillExpressionContext fillExpression() {
			return GetRuleContext<FillExpressionContext>(0);
		}
		public FillDirectiveArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillDirectiveArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFillDirectiveArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFillDirectiveArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillDirectiveArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillDirectiveArgumentsContext fillDirectiveArguments() {
		FillDirectiveArgumentsContext _localctx = new FillDirectiveArgumentsContext(Context, State);
		EnterRule(_localctx, 172, RULE_fillDirectiveArguments);
		try {
			State = 840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 834;
				number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 835;
				Match(OPEN_BRACKET);
				State = 836;
				numberList();
				State = 837;
				Match(CLOSE_BRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 839;
				fillExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillExpressionContext : ParserRuleContext {
		public FillExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFillExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFillExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillExpressionContext fillExpression() {
		FillExpressionContext _localctx = new FillExpressionContext(Context, State);
		EnterRule(_localctx, 174, RULE_fillExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTENCODING() { return GetToken(KickAssemblerParser.DOTENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public EncodingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEncodingDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEncodingDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingDirectiveContext encodingDirective() {
		EncodingDirectiveContext _localctx = new EncodingDirectiveContext(Context, State);
		EnterRule(_localctx, 176, RULE_encodingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			Match(DOTENCODING);
			State = 845;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDataDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTIMPORT() { return GetToken(KickAssemblerParser.DOTIMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(KickAssemblerParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode C64() { return GetToken(KickAssemblerParser.C64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(KickAssemblerParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(KickAssemblerParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ImportDataDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDataDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterImportDataDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitImportDataDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDataDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDataDirectiveContext importDataDirective() {
		ImportDataDirectiveContext _localctx = new ImportDataDirectiveContext(Context, State);
		EnterRule(_localctx, 178, RULE_importDataDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847;
			Match(DOTIMPORT);
			State = 848;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 221184L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 849;
			file();
			State = 856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 850;
				Match(COMMA);
				State = 851;
				number();
				State = 854;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 852;
					Match(COMMA);
					State = 853;
					number();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelNameContext : ParserRuleContext {
		public LabelNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelName; } }
	 
		public LabelNameContext() { }
		public virtual void CopyFrom(LabelNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiLabelContext : LabelNameContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(KickAssemblerParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public MultiLabelContext(LabelNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterMultiLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitMultiLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLabel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiAnonymousLabelContext : LabelNameContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(KickAssemblerParser.BANG, 0); }
		public MultiAnonymousLabelContext(LabelNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterMultiAnonymousLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitMultiAnonymousLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiAnonymousLabel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtNameLabelContext : LabelNameContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtNameContext atName() {
			return GetRuleContext<AtNameContext>(0);
		}
		public AtNameLabelContext(LabelNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAtNameLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAtNameLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtNameLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelNameContext labelName() {
		LabelNameContext _localctx = new LabelNameContext(Context, State);
		EnterRule(_localctx, 180, RULE_labelName);
		try {
			State = 862;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				_localctx = new MultiLabelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 858;
				Match(BANG);
				State = 859;
				Match(UNQUOTED_STRING);
				}
				break;
			case 2:
				_localctx = new MultiAnonymousLabelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 860;
				Match(BANG);
				}
				break;
			case 3:
				_localctx = new AtNameLabelContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 861;
				atName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(KickAssemblerParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public AtNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAtName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAtName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtNameContext atName() {
		AtNameContext _localctx = new AtNameContext(Context, State);
		EnterRule(_localctx, 182, RULE_atName);
		try {
			State = 867;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 864;
				Match(AT);
				State = 865;
				Match(UNQUOTED_STRING);
				}
				break;
			case UNQUOTED_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 866;
				Match(UNQUOTED_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 184, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public NumberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberListContext numberList() {
		NumberListContext _localctx = new NumberListContext(Context, State);
		EnterRule(_localctx, 186, RULE_numberList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			number();
			State = 876;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 872;
					Match(COMMA);
					State = 873;
					number();
					}
					} 
				}
				State = 878;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext[] numeric() {
			return GetRuleContexts<NumericContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric(int i) {
			return GetRuleContext<NumericContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public NumericListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumericList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumericList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericListContext numericList() {
		NumericListContext _localctx = new NumericListContext(Context, State);
		EnterRule(_localctx, 188, RULE_numericList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879;
			numeric();
			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 880;
				Match(COMMA);
				State = 881;
				numeric();
				}
				}
				State = 886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(KickAssemblerParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LohibyteContext lohibyte() {
			return GetRuleContext<LohibyteContext>(0);
		}
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 190, RULE_numeric);
		int _la;
		try {
			State = 892;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 887;
				Match(CHAR);
				}
				break;
			case LT:
			case GT:
			case DEC_NUMBER:
			case HEX_NUMBER:
			case BIN_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT || _la==GT) {
					{
					State = 888;
					lohibyte();
					}
				}

				State = 891;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecNumberContext decNumber() {
			return GetRuleContext<DecNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinNumberContext binNumber() {
			return GetRuleContext<BinNumberContext>(0);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 192, RULE_number);
		try {
			State = 897;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEC_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 894;
				decNumber();
				}
				break;
			case HEX_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 895;
				hexNumber();
				}
				break;
			case BIN_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 896;
				binNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LohibyteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(KickAssemblerParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(KickAssemblerParser.LT, 0); }
		public LohibyteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lohibyte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterLohibyte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitLohibyte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLohibyte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LohibyteContext lohibyte() {
		LohibyteContext _localctx = new LohibyteContext(Context, State);
		EnterRule(_localctx, 194, RULE_lohibyte);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			_la = TokenStream.LA(1);
			if ( !(_la==LT || _la==GT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_NUMBER() { return GetToken(KickAssemblerParser.DEC_NUMBER, 0); }
		public DecNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDecNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDecNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecNumberContext decNumber() {
		DecNumberContext _localctx = new DecNumberContext(Context, State);
		EnterRule(_localctx, 196, RULE_decNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			Match(DEC_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(KickAssemblerParser.HEX_NUMBER, 0); }
		public HexNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexNumberContext hexNumber() {
		HexNumberContext _localctx = new HexNumberContext(Context, State);
		EnterRule(_localctx, 198, RULE_hexNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			Match(HEX_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_NUMBER() { return GetToken(KickAssemblerParser.BIN_NUMBER, 0); }
		public BinNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBinNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBinNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinNumberContext binNumber() {
		BinNumberContext _localctx = new BinNumberContext(Context, State);
		EnterRule(_localctx, 200, RULE_binNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			Match(BIN_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(KickAssemblerParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(KickAssemblerParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 202, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public OpcodeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcodeExtension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterOpcodeExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitOpcodeExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcodeExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeExtensionContext opcodeExtension() {
		OpcodeExtensionContext _localctx = new OpcodeExtensionContext(Context, State);
		EnterRule(_localctx, 204, RULE_opcodeExtension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullOpcodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeContext opcode() {
			return GetRuleContext<OpcodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KickAssemblerParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeExtensionContext opcodeExtension() {
			return GetRuleContext<OpcodeExtensionContext>(0);
		}
		public FullOpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullOpcode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFullOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFullOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullOpcode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullOpcodeContext fullOpcode() {
		FullOpcodeContext _localctx = new FullOpcodeContext(Context, State);
		EnterRule(_localctx, 206, RULE_fullOpcode);
		try {
			State = 916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 911;
				opcode();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 912;
				opcode();
				State = 913;
				Match(DOT);
				State = 914;
				opcodeExtension();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC() { return GetToken(KickAssemblerParser.ADC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(KickAssemblerParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL() { return GetToken(KickAssemblerParser.ASL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCC() { return GetToken(KickAssemblerParser.BCC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCS() { return GetToken(KickAssemblerParser.BCS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEQ() { return GetToken(KickAssemblerParser.BEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(KickAssemblerParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BMI() { return GetToken(KickAssemblerParser.BMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNE() { return GetToken(KickAssemblerParser.BNE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BPL() { return GetToken(KickAssemblerParser.BPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRA() { return GetToken(KickAssemblerParser.BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRK() { return GetToken(KickAssemblerParser.BRK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVC() { return GetToken(KickAssemblerParser.BVC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVS() { return GetToken(KickAssemblerParser.BVS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLC() { return GetToken(KickAssemblerParser.CLC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLD() { return GetToken(KickAssemblerParser.CLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLI() { return GetToken(KickAssemblerParser.CLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLV() { return GetToken(KickAssemblerParser.CLV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP() { return GetToken(KickAssemblerParser.CMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPX() { return GetToken(KickAssemblerParser.CPX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPY() { return GetToken(KickAssemblerParser.CPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(KickAssemblerParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEX() { return GetToken(KickAssemblerParser.DEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEY() { return GetToken(KickAssemblerParser.DEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(KickAssemblerParser.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(KickAssemblerParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INX() { return GetToken(KickAssemblerParser.INX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INY() { return GetToken(KickAssemblerParser.INY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JMP() { return GetToken(KickAssemblerParser.JMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSR() { return GetToken(KickAssemblerParser.JSR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA() { return GetToken(KickAssemblerParser.LDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY() { return GetToken(KickAssemblerParser.LDY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX() { return GetToken(KickAssemblerParser.LDX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR() { return GetToken(KickAssemblerParser.LSR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP() { return GetToken(KickAssemblerParser.NOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA() { return GetToken(KickAssemblerParser.ORA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHA() { return GetToken(KickAssemblerParser.PHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHX() { return GetToken(KickAssemblerParser.PHX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHY() { return GetToken(KickAssemblerParser.PHY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHP() { return GetToken(KickAssemblerParser.PHP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLA() { return GetToken(KickAssemblerParser.PLA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLP() { return GetToken(KickAssemblerParser.PLP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLY() { return GetToken(KickAssemblerParser.PLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL() { return GetToken(KickAssemblerParser.ROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR() { return GetToken(KickAssemblerParser.ROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTI() { return GetToken(KickAssemblerParser.RTI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTS() { return GetToken(KickAssemblerParser.RTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC() { return GetToken(KickAssemblerParser.SBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC() { return GetToken(KickAssemblerParser.SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SED() { return GetToken(KickAssemblerParser.SED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEI() { return GetToken(KickAssemblerParser.SEI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA() { return GetToken(KickAssemblerParser.STA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STX() { return GetToken(KickAssemblerParser.STX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STY() { return GetToken(KickAssemblerParser.STY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STZ() { return GetToken(KickAssemblerParser.STZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAX() { return GetToken(KickAssemblerParser.TAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAY() { return GetToken(KickAssemblerParser.TAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSX() { return GetToken(KickAssemblerParser.TSX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXA() { return GetToken(KickAssemblerParser.TXA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXS() { return GetToken(KickAssemblerParser.TXS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYA() { return GetToken(KickAssemblerParser.TYA, 0); }
		public OpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeContext opcode() {
		OpcodeContext _localctx = new OpcodeContext(Context, State);
		EnterRule(_localctx, 208, RULE_opcode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & 2305843009213693951L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLACK() { return GetToken(KickAssemblerParser.BLACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITE() { return GetToken(KickAssemblerParser.WHITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RED() { return GetToken(KickAssemblerParser.RED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYAN() { return GetToken(KickAssemblerParser.CYAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURPLE() { return GetToken(KickAssemblerParser.PURPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREEN() { return GetToken(KickAssemblerParser.GREEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLUE() { return GetToken(KickAssemblerParser.BLUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YELLOW() { return GetToken(KickAssemblerParser.YELLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORANGE() { return GetToken(KickAssemblerParser.ORANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BROWN() { return GetToken(KickAssemblerParser.BROWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHT_RED() { return GetToken(KickAssemblerParser.LIGHT_RED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DARK_GRAY() { return GetToken(KickAssemblerParser.DARK_GRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DARK_GREY() { return GetToken(KickAssemblerParser.DARK_GREY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAY() { return GetToken(KickAssemblerParser.GRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREY() { return GetToken(KickAssemblerParser.GREY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHT_GREEN() { return GetToken(KickAssemblerParser.LIGHT_GREEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHT_BLUE() { return GetToken(KickAssemblerParser.LIGHT_BLUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHT_GRAY() { return GetToken(KickAssemblerParser.LIGHT_GRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIGHT_GREY() { return GetToken(KickAssemblerParser.LIGHT_GREY, 0); }
		public ColorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterColor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitColor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorContext color() {
		ColorContext _localctx = new ColorContext(Context, State);
		EnterRule(_localctx, 210, RULE_color);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & 524287L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_ABS_CONST() { return GetToken(KickAssemblerParser.ADC_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_ABSX_CONST() { return GetToken(KickAssemblerParser.ADC_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_ABSY_CONST() { return GetToken(KickAssemblerParser.ADC_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_IMM_CONST() { return GetToken(KickAssemblerParser.ADC_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_IZPX_CONST() { return GetToken(KickAssemblerParser.ADC_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_IZPY_CONST() { return GetToken(KickAssemblerParser.ADC_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_ZP_CONST() { return GetToken(KickAssemblerParser.ADC_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC_ZPX_CONST() { return GetToken(KickAssemblerParser.ADC_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AHX_ABSY_CONST() { return GetToken(KickAssemblerParser.AHX_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AHX_IZPY_CONST() { return GetToken(KickAssemblerParser.AHX_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALR_IMM_CONST() { return GetToken(KickAssemblerParser.ALR_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANC_IMM_CONST() { return GetToken(KickAssemblerParser.ANC_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANC2_IMM_CONST() { return GetToken(KickAssemblerParser.ANC2_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ABS_CONST() { return GetToken(KickAssemblerParser.AND_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ABSX_CONST() { return GetToken(KickAssemblerParser.AND_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ABSY_CONST() { return GetToken(KickAssemblerParser.AND_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_IMM_CONST() { return GetToken(KickAssemblerParser.AND_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_IZPX_CONST() { return GetToken(KickAssemblerParser.AND_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_IZPY_CONST() { return GetToken(KickAssemblerParser.AND_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ZP_CONST() { return GetToken(KickAssemblerParser.AND_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ZPX_CONST() { return GetToken(KickAssemblerParser.AND_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANE_IMM_CONST() { return GetToken(KickAssemblerParser.ANE_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARR_IMM_CONST() { return GetToken(KickAssemblerParser.ARR_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL_CONST() { return GetToken(KickAssemblerParser.ASL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL_ABS_CONST() { return GetToken(KickAssemblerParser.ASL_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL_ABSX_CONST() { return GetToken(KickAssemblerParser.ASL_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL_ZP_CONST() { return GetToken(KickAssemblerParser.ASL_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL_ZPX_CONST() { return GetToken(KickAssemblerParser.ASL_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASR_IMM_CONST() { return GetToken(KickAssemblerParser.ASR_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AXS_IMM_CONST() { return GetToken(KickAssemblerParser.AXS_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCC_REL_CONST() { return GetToken(KickAssemblerParser.BCC_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCS_REL_CONST() { return GetToken(KickAssemblerParser.BCS_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEQ_REL_CONST() { return GetToken(KickAssemblerParser.BEQ_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_ABS_CONST() { return GetToken(KickAssemblerParser.BIT_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_ABSX_CONST() { return GetToken(KickAssemblerParser.BIT_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_IMM_CONST() { return GetToken(KickAssemblerParser.BIT_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_ZP_CONST() { return GetToken(KickAssemblerParser.BIT_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_ZPX_CONST() { return GetToken(KickAssemblerParser.BIT_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BMI_REL_CONST() { return GetToken(KickAssemblerParser.BMI_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNE_REL_CONST() { return GetToken(KickAssemblerParser.BNE_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BPL_REL_CONST() { return GetToken(KickAssemblerParser.BPL_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRA_REL_CONST() { return GetToken(KickAssemblerParser.BRA_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRK_CONST() { return GetToken(KickAssemblerParser.BRK_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVC_REL_CONST() { return GetToken(KickAssemblerParser.BVC_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVS_REL_CONST() { return GetToken(KickAssemblerParser.BVS_REL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLC_CONST() { return GetToken(KickAssemblerParser.CLC_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLD_CONST() { return GetToken(KickAssemblerParser.CLD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLI_CONST() { return GetToken(KickAssemblerParser.CLI_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLV_CONST() { return GetToken(KickAssemblerParser.CLV_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_ABS_CONST() { return GetToken(KickAssemblerParser.CMP_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_ABSX_CONST() { return GetToken(KickAssemblerParser.CMP_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_ABSY_CONST() { return GetToken(KickAssemblerParser.CMP_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_IMM_CONST() { return GetToken(KickAssemblerParser.CMP_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_IZPX_CONST() { return GetToken(KickAssemblerParser.CMP_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_IZPY_CONST() { return GetToken(KickAssemblerParser.CMP_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_ZP_CONST() { return GetToken(KickAssemblerParser.CMP_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP_ZPX_CONST() { return GetToken(KickAssemblerParser.CMP_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPX_ABS_CONST() { return GetToken(KickAssemblerParser.CPX_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPX_IMM_CONST() { return GetToken(KickAssemblerParser.CPX_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPX_ZP_CONST() { return GetToken(KickAssemblerParser.CPX_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPY_ABS_CONST() { return GetToken(KickAssemblerParser.CPY_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPY_IMM_CONST() { return GetToken(KickAssemblerParser.CPY_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPY_ZP_CONST() { return GetToken(KickAssemblerParser.CPY_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_ABS_CONST() { return GetToken(KickAssemblerParser.DCM_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_ABSX_CONST() { return GetToken(KickAssemblerParser.DCM_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_ABSY_CONST() { return GetToken(KickAssemblerParser.DCM_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_IZPX_CONST() { return GetToken(KickAssemblerParser.DCM_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_IZPY_CONST() { return GetToken(KickAssemblerParser.DCM_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_ZP_CONST() { return GetToken(KickAssemblerParser.DCM_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCM_ZPX_CONST() { return GetToken(KickAssemblerParser.DCM_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_ABS_CONST() { return GetToken(KickAssemblerParser.DCP_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_ABSX_CONST() { return GetToken(KickAssemblerParser.DCP_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_ABSY_CONST() { return GetToken(KickAssemblerParser.DCP_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_IZPX_CONST() { return GetToken(KickAssemblerParser.DCP_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_IZPY_CONST() { return GetToken(KickAssemblerParser.DCP_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_ZP_CONST() { return GetToken(KickAssemblerParser.DCP_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCP_ZPX_CONST() { return GetToken(KickAssemblerParser.DCP_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_CONST() { return GetToken(KickAssemblerParser.DEC_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_ABS_CONST() { return GetToken(KickAssemblerParser.DEC_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_ABSX_CONST() { return GetToken(KickAssemblerParser.DEC_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_ZP_CONST() { return GetToken(KickAssemblerParser.DEC_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_ZPX_CONST() { return GetToken(KickAssemblerParser.DEC_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEX_CONST() { return GetToken(KickAssemblerParser.DEX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEY_CONST() { return GetToken(KickAssemblerParser.DEY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_ABS_CONST() { return GetToken(KickAssemblerParser.EOR_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_ABSX_CONST() { return GetToken(KickAssemblerParser.EOR_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_ABSY_CONST() { return GetToken(KickAssemblerParser.EOR_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_IMM_CONST() { return GetToken(KickAssemblerParser.EOR_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_IZPX_CONST() { return GetToken(KickAssemblerParser.EOR_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_IZPY_CONST() { return GetToken(KickAssemblerParser.EOR_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_ZP_CONST() { return GetToken(KickAssemblerParser.EOR_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR_ZPX_CONST() { return GetToken(KickAssemblerParser.EOR_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_CONST() { return GetToken(KickAssemblerParser.INC_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_ABS_CONST() { return GetToken(KickAssemblerParser.INC_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_ABSX_CONST() { return GetToken(KickAssemblerParser.INC_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_ZP_CONST() { return GetToken(KickAssemblerParser.INC_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_ZPX_CONST() { return GetToken(KickAssemblerParser.INC_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_ABS_CONST() { return GetToken(KickAssemblerParser.INS_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_ABSX_CONST() { return GetToken(KickAssemblerParser.INS_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_ABSY_CONST() { return GetToken(KickAssemblerParser.INS_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_IZPX_CONST() { return GetToken(KickAssemblerParser.INS_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_IZPY_CONST() { return GetToken(KickAssemblerParser.INS_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_ZP_CONST() { return GetToken(KickAssemblerParser.INS_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INS_ZPX_CONST() { return GetToken(KickAssemblerParser.INS_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INX_CONST() { return GetToken(KickAssemblerParser.INX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INY_CONST() { return GetToken(KickAssemblerParser.INY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_ABS_CONST() { return GetToken(KickAssemblerParser.ISB_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_ABSX_CONST() { return GetToken(KickAssemblerParser.ISB_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_ABSY_CONST() { return GetToken(KickAssemblerParser.ISB_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_IZPX_CONST() { return GetToken(KickAssemblerParser.ISB_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_IZPY_CONST() { return GetToken(KickAssemblerParser.ISB_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_ZP_CONST() { return GetToken(KickAssemblerParser.ISB_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISB_ZPX_CONST() { return GetToken(KickAssemblerParser.ISB_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_ABS_CONST() { return GetToken(KickAssemblerParser.ISC_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_ABSX_CONST() { return GetToken(KickAssemblerParser.ISC_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_ABSY_CONST() { return GetToken(KickAssemblerParser.ISC_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_IZPX_CONST() { return GetToken(KickAssemblerParser.ISC_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_IZPY_CONST() { return GetToken(KickAssemblerParser.ISC_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_ZP_CONST() { return GetToken(KickAssemblerParser.ISC_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISC_ZPX_CONST() { return GetToken(KickAssemblerParser.ISC_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JMP_ABS_CONST() { return GetToken(KickAssemblerParser.JMP_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JMP_IND_CONST() { return GetToken(KickAssemblerParser.JMP_IND_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSR_ABS_CONST() { return GetToken(KickAssemblerParser.JSR_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAE_ABSY_CONST() { return GetToken(KickAssemblerParser.LAE_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAS_ABSY_CONST() { return GetToken(KickAssemblerParser.LAS_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_ABS_CONST() { return GetToken(KickAssemblerParser.LAX_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_ABSY_CONST() { return GetToken(KickAssemblerParser.LAX_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_IMM_CONST() { return GetToken(KickAssemblerParser.LAX_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_IZPX_CONST() { return GetToken(KickAssemblerParser.LAX_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_IZPY_CONST() { return GetToken(KickAssemblerParser.LAX_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_ZP_CONST() { return GetToken(KickAssemblerParser.LAX_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAX_ZPY_CONST() { return GetToken(KickAssemblerParser.LAX_ZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_ABS_CONST() { return GetToken(KickAssemblerParser.LDA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_ABSX_CONST() { return GetToken(KickAssemblerParser.LDA_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_ABSY_CONST() { return GetToken(KickAssemblerParser.LDA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_IMM_CONST() { return GetToken(KickAssemblerParser.LDA_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_IZPX_CONST() { return GetToken(KickAssemblerParser.LDA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_IZPY_CONST() { return GetToken(KickAssemblerParser.LDA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_ZP_CONST() { return GetToken(KickAssemblerParser.LDA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA_ZPX_CONST() { return GetToken(KickAssemblerParser.LDA_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDS_ABSY_CONST() { return GetToken(KickAssemblerParser.LDS_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX_ABS_CONST() { return GetToken(KickAssemblerParser.LDX_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX_ABSY_CONST() { return GetToken(KickAssemblerParser.LDX_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX_IMM_CONST() { return GetToken(KickAssemblerParser.LDX_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX_ZP_CONST() { return GetToken(KickAssemblerParser.LDX_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX_ZPY_CONST() { return GetToken(KickAssemblerParser.LDX_ZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY_ABS_CONST() { return GetToken(KickAssemblerParser.LDY_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY_ABSX_CONST() { return GetToken(KickAssemblerParser.LDY_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY_IMM_CONST() { return GetToken(KickAssemblerParser.LDY_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY_ZP_CONST() { return GetToken(KickAssemblerParser.LDY_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY_ZPX_CONST() { return GetToken(KickAssemblerParser.LDY_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR_CONST() { return GetToken(KickAssemblerParser.LSR_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR_ABS_CONST() { return GetToken(KickAssemblerParser.LSR_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR_ABSX_CONST() { return GetToken(KickAssemblerParser.LSR_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR_ZP_CONST() { return GetToken(KickAssemblerParser.LSR_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR_ZPX_CONST() { return GetToken(KickAssemblerParser.LSR_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_ABS_CONST() { return GetToken(KickAssemblerParser.LXA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_ABSY_CONST() { return GetToken(KickAssemblerParser.LXA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_IMM_CONST() { return GetToken(KickAssemblerParser.LXA_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_IZPX_CONST() { return GetToken(KickAssemblerParser.LXA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_IZPY_CONST() { return GetToken(KickAssemblerParser.LXA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_ZP_CONST() { return GetToken(KickAssemblerParser.LXA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LXA_ZPY_CONST() { return GetToken(KickAssemblerParser.LXA_ZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_CONST() { return GetToken(KickAssemblerParser.NOP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_ABS_CONST() { return GetToken(KickAssemblerParser.NOP_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_ABSX_CONST() { return GetToken(KickAssemblerParser.NOP_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_IMM_CONST() { return GetToken(KickAssemblerParser.NOP_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_ZP_CONST() { return GetToken(KickAssemblerParser.NOP_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP_ZPX_CONST() { return GetToken(KickAssemblerParser.NOP_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_ABS_CONST() { return GetToken(KickAssemblerParser.ORA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_ABSX_CONST() { return GetToken(KickAssemblerParser.ORA_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_ABSY_CONST() { return GetToken(KickAssemblerParser.ORA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_IMM_CONST() { return GetToken(KickAssemblerParser.ORA_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_IZPX_CONST() { return GetToken(KickAssemblerParser.ORA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_IZPY_CONST() { return GetToken(KickAssemblerParser.ORA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_ZP_CONST() { return GetToken(KickAssemblerParser.ORA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA_ZPX_CONST() { return GetToken(KickAssemblerParser.ORA_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHA_CONST() { return GetToken(KickAssemblerParser.PHA_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHP_CONST() { return GetToken(KickAssemblerParser.PHP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHX_CONST() { return GetToken(KickAssemblerParser.PHX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHY_CONST() { return GetToken(KickAssemblerParser.PHY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLA_CONST() { return GetToken(KickAssemblerParser.PLA_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLP_CONST() { return GetToken(KickAssemblerParser.PLP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLX_CONST() { return GetToken(KickAssemblerParser.PLX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLY_CONST() { return GetToken(KickAssemblerParser.PLY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_ABS_CONST() { return GetToken(KickAssemblerParser.RLA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_ABSX_CONST() { return GetToken(KickAssemblerParser.RLA_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_ABSY_CONST() { return GetToken(KickAssemblerParser.RLA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_IZPX_CONST() { return GetToken(KickAssemblerParser.RLA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_IZPY_CONST() { return GetToken(KickAssemblerParser.RLA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_ZP_CONST() { return GetToken(KickAssemblerParser.RLA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLA_ZPX_CONST() { return GetToken(KickAssemblerParser.RLA_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB0_ZP_CONST() { return GetToken(KickAssemblerParser.RMB0_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB1_ZP_CONST() { return GetToken(KickAssemblerParser.RMB1_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB2_ZP_CONST() { return GetToken(KickAssemblerParser.RMB2_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB3_ZP_CONST() { return GetToken(KickAssemblerParser.RMB3_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB4_ZP_CONST() { return GetToken(KickAssemblerParser.RMB4_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB5_ZP_CONST() { return GetToken(KickAssemblerParser.RMB5_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB6_ZP_CONST() { return GetToken(KickAssemblerParser.RMB6_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RMB7_ZP_CONST() { return GetToken(KickAssemblerParser.RMB7_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL_CONST() { return GetToken(KickAssemblerParser.ROL_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL_ABS_CONST() { return GetToken(KickAssemblerParser.ROL_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL_ABSX_CONST() { return GetToken(KickAssemblerParser.ROL_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL_ZP_CONST() { return GetToken(KickAssemblerParser.ROL_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL_ZPX_CONST() { return GetToken(KickAssemblerParser.ROL_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR_CONST() { return GetToken(KickAssemblerParser.ROR_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR_ABS_CONST() { return GetToken(KickAssemblerParser.ROR_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR_ABSX_CONST() { return GetToken(KickAssemblerParser.ROR_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR_ZP_CONST() { return GetToken(KickAssemblerParser.ROR_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR_ZPX_CONST() { return GetToken(KickAssemblerParser.ROR_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_ABS_CONST() { return GetToken(KickAssemblerParser.RRA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_ABSX_CONST() { return GetToken(KickAssemblerParser.RRA_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_ABSY_CONST() { return GetToken(KickAssemblerParser.RRA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_IZPX_CONST() { return GetToken(KickAssemblerParser.RRA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_IZPY_CONST() { return GetToken(KickAssemblerParser.RRA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_ZP_CONST() { return GetToken(KickAssemblerParser.RRA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRA_ZPX_CONST() { return GetToken(KickAssemblerParser.RRA_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTI_CONST() { return GetToken(KickAssemblerParser.RTI_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTS_CONST() { return GetToken(KickAssemblerParser.RTS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAC_IMM_CONST() { return GetToken(KickAssemblerParser.SAC_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAX_ABS_CONST() { return GetToken(KickAssemblerParser.SAX_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAX_IZPX_CONST() { return GetToken(KickAssemblerParser.SAX_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAX_ZP_CONST() { return GetToken(KickAssemblerParser.SAX_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAX_ZPY_CONST() { return GetToken(KickAssemblerParser.SAX_ZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_ABS_CONST() { return GetToken(KickAssemblerParser.SBC_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_ABSX_CONST() { return GetToken(KickAssemblerParser.SBC_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_ABSY_CONST() { return GetToken(KickAssemblerParser.SBC_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_IMM_CONST() { return GetToken(KickAssemblerParser.SBC_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_IZPX_CONST() { return GetToken(KickAssemblerParser.SBC_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_IZPY_CONST() { return GetToken(KickAssemblerParser.SBC_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_ZP_CONST() { return GetToken(KickAssemblerParser.SBC_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC_ZPX_CONST() { return GetToken(KickAssemblerParser.SBC_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC2_IMM_CONST() { return GetToken(KickAssemblerParser.SBC2_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBX_IMM_CONST() { return GetToken(KickAssemblerParser.SBX_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC_CONST() { return GetToken(KickAssemblerParser.SEC_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SED_CONST() { return GetToken(KickAssemblerParser.SED_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEI_CONST() { return GetToken(KickAssemblerParser.SEI_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA_ABSY_CONST() { return GetToken(KickAssemblerParser.SHA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA_IZPY_CONST() { return GetToken(KickAssemblerParser.SHA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHS_ABSY_CONST() { return GetToken(KickAssemblerParser.SHS_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHX_ABSY_CONST() { return GetToken(KickAssemblerParser.SHX_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHY_ABSX_CONST() { return GetToken(KickAssemblerParser.SHY_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIR_IMM_CONST() { return GetToken(KickAssemblerParser.SIR_IMM_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_ABS_CONST() { return GetToken(KickAssemblerParser.SLO_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_ABSX_CONST() { return GetToken(KickAssemblerParser.SLO_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_ABSY_CONST() { return GetToken(KickAssemblerParser.SLO_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_IZPX_CONST() { return GetToken(KickAssemblerParser.SLO_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_IZPY_CONST() { return GetToken(KickAssemblerParser.SLO_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_ZP_CONST() { return GetToken(KickAssemblerParser.SLO_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLO_ZPX_CONST() { return GetToken(KickAssemblerParser.SLO_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB0_ZP_CONST() { return GetToken(KickAssemblerParser.SMB0_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB1_ZP_CONST() { return GetToken(KickAssemblerParser.SMB1_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB2_ZP_CONST() { return GetToken(KickAssemblerParser.SMB2_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB3_ZP_CONST() { return GetToken(KickAssemblerParser.SMB3_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB4_ZP_CONST() { return GetToken(KickAssemblerParser.SMB4_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB5_ZP_CONST() { return GetToken(KickAssemblerParser.SMB5_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB6_ZP_CONST() { return GetToken(KickAssemblerParser.SMB6_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMB7_ZP_CONST() { return GetToken(KickAssemblerParser.SMB7_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_ABS_CONST() { return GetToken(KickAssemblerParser.SRE_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_ABSX_CONST() { return GetToken(KickAssemblerParser.SRE_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_ABSY_CONST() { return GetToken(KickAssemblerParser.SRE_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_IZPX_CONST() { return GetToken(KickAssemblerParser.SRE_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_IZPY_CONST() { return GetToken(KickAssemblerParser.SRE_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_ZP_CONST() { return GetToken(KickAssemblerParser.SRE_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRE_ZPX_CONST() { return GetToken(KickAssemblerParser.SRE_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_ABS_CONST() { return GetToken(KickAssemblerParser.STA_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_ABSX_CONST() { return GetToken(KickAssemblerParser.STA_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_ABSY_CONST() { return GetToken(KickAssemblerParser.STA_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_IZPX_CONST() { return GetToken(KickAssemblerParser.STA_IZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_IZPY_CONST() { return GetToken(KickAssemblerParser.STA_IZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_ZP_CONST() { return GetToken(KickAssemblerParser.STA_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA_ZPX_CONST() { return GetToken(KickAssemblerParser.STA_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STP_CONST() { return GetToken(KickAssemblerParser.STP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STX_ABS_CONST() { return GetToken(KickAssemblerParser.STX_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STX_ZP_CONST() { return GetToken(KickAssemblerParser.STX_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STX_ZPY_CONST() { return GetToken(KickAssemblerParser.STX_ZPY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STY_ABS_CONST() { return GetToken(KickAssemblerParser.STY_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STY_ZP_CONST() { return GetToken(KickAssemblerParser.STY_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STY_ZPX_CONST() { return GetToken(KickAssemblerParser.STY_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STZ_ABS_CONST() { return GetToken(KickAssemblerParser.STZ_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STZ_ABSX_CONST() { return GetToken(KickAssemblerParser.STZ_ABSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STZ_ZP_CONST() { return GetToken(KickAssemblerParser.STZ_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STZ_ZPX_CONST() { return GetToken(KickAssemblerParser.STZ_ZPX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAS_ABSY_CONST() { return GetToken(KickAssemblerParser.TAS_ABSY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAX_CONST() { return GetToken(KickAssemblerParser.TAX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAY_CONST() { return GetToken(KickAssemblerParser.TAY_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRB_ABS_CONST() { return GetToken(KickAssemblerParser.TRB_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRB_ZP_CONST() { return GetToken(KickAssemblerParser.TRB_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSB_ABS_CONST() { return GetToken(KickAssemblerParser.TSB_ABS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSB_ZP_CONST() { return GetToken(KickAssemblerParser.TSB_ZP_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSX_CONST() { return GetToken(KickAssemblerParser.TSX_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXA_CONST() { return GetToken(KickAssemblerParser.TXA_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXS_CONST() { return GetToken(KickAssemblerParser.TXS_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYA_CONST() { return GetToken(KickAssemblerParser.TYA_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAI_CONST() { return GetToken(KickAssemblerParser.WAI_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XAA_IMM_CONST() { return GetToken(KickAssemblerParser.XAA_IMM_CONST, 0); }
		public OpcodeConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcodeConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterOpcodeConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitOpcodeConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcodeConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeConstantContext opcodeConstant() {
		OpcodeConstantContext _localctx = new OpcodeConstantContext(Context, State);
		EnterRule(_localctx, 212, RULE_opcodeConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & -1L) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & -1L) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & -1L) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & -1L) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & 1099511627775L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 77: return preprocessorCondition_sempred((PreprocessorConditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 19);
		case 1: return Precpred(Context, 18);
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 16);
		case 4: return Precpred(Context, 15);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 14);
		case 8: return Precpred(Context, 13);
		}
		return true;
	}
	private bool preprocessorCondition_sempred(PreprocessorConditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,514,925,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,1,0,1,0,1,1,1,1,1,1,1,2,1,2,4,2,222,8,2,11,2,12,
		2,223,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,234,8,2,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,3,3,244,8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,255,8,
		5,1,6,3,6,258,8,6,1,6,1,6,3,6,262,8,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
		1,8,1,8,1,9,1,9,1,9,5,9,277,8,9,10,9,12,9,280,9,9,1,10,4,10,283,8,10,11,
		10,12,10,284,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,3,10,304,8,10,1,11,1,11,1,11,1,11,1,11,1,11,
		3,11,312,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,335,8,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		5,12,367,8,12,10,12,12,12,370,9,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,
		1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		3,16,393,8,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,3,18,402,8,18,1,18,1,
		18,1,19,1,19,1,19,3,19,409,8,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,
		446,8,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,3,24,456,8,24,1,25,1,
		25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,
		28,3,28,474,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,
		1,31,3,31,488,8,31,1,32,1,32,3,32,492,8,32,1,33,1,33,1,33,1,34,1,34,1,
		34,1,34,1,34,1,34,1,34,1,34,3,34,505,8,34,1,34,1,34,1,34,3,34,510,8,34,
		1,35,1,35,1,35,3,35,515,8,35,1,35,1,35,1,36,1,36,1,36,5,36,522,8,36,10,
		36,12,36,525,9,36,1,37,1,37,1,37,3,37,530,8,37,1,38,1,38,1,38,3,38,535,
		8,38,1,38,1,38,3,38,539,8,38,1,38,1,38,3,38,543,8,38,1,38,1,38,3,38,547,
		8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,
		1,41,1,41,5,41,564,8,41,10,41,12,41,567,9,41,1,41,3,41,570,8,41,1,42,1,
		42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,
		45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,5,47,598,8,47,10,
		47,12,47,601,9,47,1,48,1,48,1,48,3,48,606,8,48,1,49,1,49,1,49,1,49,1,50,
		1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,623,8,51,1,52,1,
		52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,3,55,638,8,55,
		1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,5,56,648,8,56,10,56,12,56,651,
		9,56,1,57,1,57,5,57,655,8,57,10,57,12,57,658,9,57,1,57,1,57,1,58,1,58,
		1,58,5,58,665,8,58,10,58,12,58,668,9,58,1,59,1,59,1,59,1,59,1,59,3,59,
		675,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,
		62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,
		65,1,65,1,65,1,65,1,66,1,66,5,66,709,8,66,10,66,12,66,712,9,66,1,67,1,
		67,1,67,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,727,8,69,
		1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,74,
		1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,5,75,751,8,75,10,75,12,75,754,
		9,75,1,75,1,75,3,75,758,8,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,3,76,767,
		8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,777,8,77,1,77,1,77,1,
		77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,5,77,791,8,77,10,77,12,
		77,794,9,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,805,8,78,
		1,79,1,79,1,79,3,79,810,8,79,1,79,3,79,813,8,79,1,80,1,80,1,80,1,81,1,
		81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,85,1,
		85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,3,86,841,8,86,1,87,1,87,1,88,1,88,
		1,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,855,8,89,3,89,857,8,89,1,
		90,1,90,1,90,1,90,3,90,863,8,90,1,91,1,91,1,91,3,91,868,8,91,1,92,1,92,
		1,93,1,93,1,93,5,93,875,8,93,10,93,12,93,878,9,93,1,94,1,94,1,94,5,94,
		883,8,94,10,94,12,94,886,9,94,1,95,1,95,3,95,890,8,95,1,95,3,95,893,8,
		95,1,96,1,96,1,96,3,96,898,8,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,
		100,1,101,1,101,1,102,1,102,1,103,1,103,1,103,1,103,1,103,3,103,917,8,
		103,1,104,1,104,1,105,1,105,1,106,1,106,1,106,0,2,24,154,107,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
		140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
		176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
		212,0,13,1,0,504,505,1,0,98,99,3,0,103,105,107,107,132,133,2,0,110,111,
		120,123,2,0,65,65,126,126,1,0,29,32,1,0,19,21,2,0,13,14,16,17,1,0,110,
		111,1,0,137,138,1,0,147,207,1,0,69,87,1,0,208,503,964,0,214,1,0,0,0,2,
		216,1,0,0,0,4,233,1,0,0,0,6,243,1,0,0,0,8,245,1,0,0,0,10,254,1,0,0,0,12,
		257,1,0,0,0,14,263,1,0,0,0,16,267,1,0,0,0,18,273,1,0,0,0,20,303,1,0,0,
		0,22,311,1,0,0,0,24,334,1,0,0,0,26,371,1,0,0,0,28,373,1,0,0,0,30,377,1,
		0,0,0,32,392,1,0,0,0,34,394,1,0,0,0,36,396,1,0,0,0,38,405,1,0,0,0,40,412,
		1,0,0,0,42,445,1,0,0,0,44,447,1,0,0,0,46,450,1,0,0,0,48,455,1,0,0,0,50,
		457,1,0,0,0,52,460,1,0,0,0,54,463,1,0,0,0,56,466,1,0,0,0,58,475,1,0,0,
		0,60,482,1,0,0,0,62,487,1,0,0,0,64,489,1,0,0,0,66,493,1,0,0,0,68,509,1,
		0,0,0,70,511,1,0,0,0,72,518,1,0,0,0,74,526,1,0,0,0,76,531,1,0,0,0,78,548,
		1,0,0,0,80,554,1,0,0,0,82,569,1,0,0,0,84,571,1,0,0,0,86,573,1,0,0,0,88,
		580,1,0,0,0,90,583,1,0,0,0,92,590,1,0,0,0,94,594,1,0,0,0,96,602,1,0,0,
		0,98,607,1,0,0,0,100,611,1,0,0,0,102,622,1,0,0,0,104,624,1,0,0,0,106,628,
		1,0,0,0,108,632,1,0,0,0,110,635,1,0,0,0,112,644,1,0,0,0,114,652,1,0,0,
		0,116,661,1,0,0,0,118,669,1,0,0,0,120,676,1,0,0,0,122,682,1,0,0,0,124,
		688,1,0,0,0,126,694,1,0,0,0,128,698,1,0,0,0,130,701,1,0,0,0,132,706,1,
		0,0,0,134,713,1,0,0,0,136,718,1,0,0,0,138,726,1,0,0,0,140,728,1,0,0,0,
		142,731,1,0,0,0,144,734,1,0,0,0,146,737,1,0,0,0,148,741,1,0,0,0,150,744,
		1,0,0,0,152,766,1,0,0,0,154,776,1,0,0,0,156,804,1,0,0,0,158,806,1,0,0,
		0,160,814,1,0,0,0,162,817,1,0,0,0,164,820,1,0,0,0,166,823,1,0,0,0,168,
		826,1,0,0,0,170,829,1,0,0,0,172,840,1,0,0,0,174,842,1,0,0,0,176,844,1,
		0,0,0,178,847,1,0,0,0,180,862,1,0,0,0,182,867,1,0,0,0,184,869,1,0,0,0,
		186,871,1,0,0,0,188,879,1,0,0,0,190,892,1,0,0,0,192,897,1,0,0,0,194,899,
		1,0,0,0,196,901,1,0,0,0,198,903,1,0,0,0,200,905,1,0,0,0,202,907,1,0,0,
		0,204,909,1,0,0,0,206,916,1,0,0,0,208,918,1,0,0,0,210,920,1,0,0,0,212,
		922,1,0,0,0,214,215,6,0,-1,0,215,1,1,0,0,0,216,217,3,4,2,0,217,218,5,0,
		0,1,218,3,1,0,0,0,219,221,3,6,3,0,220,222,5,97,0,0,221,220,1,0,0,0,222,
		223,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,226,3,
		4,2,0,226,234,1,0,0,0,227,228,3,6,3,0,228,229,3,0,0,0,229,230,3,4,2,0,
		230,234,1,0,0,0,231,234,3,6,3,0,232,234,1,0,0,0,233,219,1,0,0,0,233,227,
		1,0,0,0,233,231,1,0,0,0,233,232,1,0,0,0,234,5,1,0,0,0,235,244,3,12,6,0,
		236,244,3,10,5,0,237,244,3,156,78,0,238,244,3,16,8,0,239,244,3,14,7,0,
		240,244,3,42,21,0,241,244,3,138,69,0,242,244,3,8,4,0,243,235,1,0,0,0,243,
		236,1,0,0,0,243,237,1,0,0,0,243,238,1,0,0,0,243,239,1,0,0,0,243,240,1,
		0,0,0,243,241,1,0,0,0,243,242,1,0,0,0,244,7,1,0,0,0,245,246,7,0,0,0,246,
		9,1,0,0,0,247,248,3,180,90,0,248,249,5,96,0,0,249,250,3,6,3,0,250,255,
		1,0,0,0,251,252,3,180,90,0,252,253,5,96,0,0,253,255,1,0,0,0,254,247,1,
		0,0,0,254,251,1,0,0,0,255,11,1,0,0,0,256,258,5,96,0,0,257,256,1,0,0,0,
		257,258,1,0,0,0,258,259,1,0,0,0,259,261,3,206,103,0,260,262,3,18,9,0,261,
		260,1,0,0,0,261,262,1,0,0,0,262,13,1,0,0,0,263,264,5,88,0,0,264,265,3,
		4,2,0,265,266,5,89,0,0,266,15,1,0,0,0,267,268,5,504,0,0,268,269,5,96,0,
		0,269,270,5,88,0,0,270,271,3,4,2,0,271,272,5,89,0,0,272,17,1,0,0,0,273,
		278,3,20,10,0,274,275,5,95,0,0,275,277,3,20,10,0,276,274,1,0,0,0,277,280,
		1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,19,1,0,0,0,280,278,1,0,0,0,
		281,283,7,1,0,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,
		1,0,0,0,285,304,1,0,0,0,286,287,5,3,0,0,287,304,3,212,106,0,288,289,5,
		3,0,0,289,304,3,190,95,0,290,291,5,92,0,0,291,292,3,18,9,0,292,293,5,93,
		0,0,293,304,1,0,0,0,294,295,5,90,0,0,295,296,3,18,9,0,296,297,5,91,0,0,
		297,304,1,0,0,0,298,304,3,22,11,0,299,300,5,100,0,0,300,304,3,24,12,0,
		301,304,3,24,12,0,302,304,5,100,0,0,303,282,1,0,0,0,303,286,1,0,0,0,303,
		288,1,0,0,0,303,290,1,0,0,0,303,294,1,0,0,0,303,298,1,0,0,0,303,299,1,
		0,0,0,303,301,1,0,0,0,303,302,1,0,0,0,304,21,1,0,0,0,305,306,3,180,90,
		0,306,307,5,99,0,0,307,312,1,0,0,0,308,309,3,180,90,0,309,310,5,98,0,0,
		310,312,1,0,0,0,311,305,1,0,0,0,311,308,1,0,0,0,312,23,1,0,0,0,313,314,
		6,12,-1,0,314,315,5,92,0,0,315,316,3,24,12,0,316,317,5,93,0,0,317,335,
		1,0,0,0,318,319,5,90,0,0,319,320,3,24,12,0,320,321,5,91,0,0,321,335,1,
		0,0,0,322,323,5,98,0,0,323,335,3,24,12,12,324,325,5,99,0,0,325,335,3,24,
		12,11,326,335,3,36,18,0,327,335,3,38,19,0,328,335,3,190,95,0,329,335,3,
		212,106,0,330,335,3,210,105,0,331,335,3,202,101,0,332,335,3,180,90,0,333,
		335,5,143,0,0,334,313,1,0,0,0,334,318,1,0,0,0,334,322,1,0,0,0,334,324,
		1,0,0,0,334,326,1,0,0,0,334,327,1,0,0,0,334,328,1,0,0,0,334,329,1,0,0,
		0,334,330,1,0,0,0,334,331,1,0,0,0,334,332,1,0,0,0,334,333,1,0,0,0,335,
		368,1,0,0,0,336,337,10,19,0,0,337,338,3,26,13,0,338,339,3,24,12,20,339,
		367,1,0,0,0,340,341,10,18,0,0,341,342,5,100,0,0,342,367,3,24,12,19,343,
		344,10,17,0,0,344,345,5,101,0,0,345,367,3,24,12,18,346,347,10,16,0,0,347,
		348,5,98,0,0,348,367,3,24,12,17,349,350,10,15,0,0,350,351,5,99,0,0,351,
		367,3,24,12,16,352,353,10,10,0,0,353,354,3,34,17,0,354,355,3,24,12,11,
		355,367,1,0,0,0,356,357,10,9,0,0,357,358,5,112,0,0,358,359,3,24,12,0,359,
		360,5,96,0,0,360,361,3,24,12,10,361,367,1,0,0,0,362,363,10,14,0,0,363,
		367,5,115,0,0,364,365,10,13,0,0,365,367,5,116,0,0,366,336,1,0,0,0,366,
		340,1,0,0,0,366,343,1,0,0,0,366,346,1,0,0,0,366,349,1,0,0,0,366,352,1,
		0,0,0,366,356,1,0,0,0,366,362,1,0,0,0,366,364,1,0,0,0,367,370,1,0,0,0,
		368,366,1,0,0,0,368,369,1,0,0,0,369,25,1,0,0,0,370,368,1,0,0,0,371,372,
		7,2,0,0,372,27,1,0,0,0,373,374,5,504,0,0,374,375,5,109,0,0,375,376,3,24,
		12,0,376,29,1,0,0,0,377,378,5,504,0,0,378,379,3,32,16,0,379,31,1,0,0,0,
		380,381,5,98,0,0,381,393,5,98,0,0,382,383,5,99,0,0,383,393,5,99,0,0,384,
		385,5,98,0,0,385,393,5,109,0,0,386,387,5,99,0,0,387,393,5,109,0,0,388,
		389,5,100,0,0,389,393,5,109,0,0,390,391,5,101,0,0,391,393,5,109,0,0,392,
		380,1,0,0,0,392,382,1,0,0,0,392,384,1,0,0,0,392,386,1,0,0,0,392,388,1,
		0,0,0,392,390,1,0,0,0,393,33,1,0,0,0,394,395,7,3,0,0,395,35,1,0,0,0,396,
		397,5,143,0,0,397,398,5,94,0,0,398,399,5,143,0,0,399,401,5,92,0,0,400,
		402,3,18,9,0,401,400,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,404,5,
		93,0,0,404,37,1,0,0,0,405,406,5,504,0,0,406,408,5,92,0,0,407,409,3,18,
		9,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,411,5,93,0,0,411,
		39,1,0,0,0,412,413,3,24,12,0,413,41,1,0,0,0,414,446,3,44,22,0,415,446,
		3,46,23,0,416,446,3,52,26,0,417,446,3,54,27,0,418,446,3,56,28,0,419,446,
		3,58,29,0,420,446,3,60,30,0,421,446,3,64,32,0,422,446,3,66,33,0,423,446,
		3,70,35,0,424,446,3,76,38,0,425,446,3,78,39,0,426,446,3,80,40,0,427,446,
		3,86,43,0,428,446,3,90,45,0,429,446,3,92,46,0,430,446,3,96,48,0,431,446,
		3,98,49,0,432,446,3,102,51,0,433,446,3,104,52,0,434,446,3,106,53,0,435,
		446,3,100,50,0,436,446,3,108,54,0,437,446,3,110,55,0,438,446,3,120,60,
		0,439,446,3,122,61,0,440,446,3,88,44,0,441,446,3,124,62,0,442,446,3,126,
		63,0,443,446,3,128,64,0,444,446,3,130,65,0,445,414,1,0,0,0,445,415,1,0,
		0,0,445,416,1,0,0,0,445,417,1,0,0,0,445,418,1,0,0,0,445,419,1,0,0,0,445,
		420,1,0,0,0,445,421,1,0,0,0,445,422,1,0,0,0,445,423,1,0,0,0,445,424,1,
		0,0,0,445,425,1,0,0,0,445,426,1,0,0,0,445,427,1,0,0,0,445,428,1,0,0,0,
		445,429,1,0,0,0,445,430,1,0,0,0,445,431,1,0,0,0,445,432,1,0,0,0,445,433,
		1,0,0,0,445,434,1,0,0,0,445,435,1,0,0,0,445,436,1,0,0,0,445,437,1,0,0,
		0,445,438,1,0,0,0,445,439,1,0,0,0,445,440,1,0,0,0,445,441,1,0,0,0,445,
		442,1,0,0,0,445,443,1,0,0,0,445,444,1,0,0,0,446,43,1,0,0,0,447,448,5,35,
		0,0,448,449,3,24,12,0,449,45,1,0,0,0,450,451,5,36,0,0,451,452,3,24,12,
		0,452,47,1,0,0,0,453,456,3,50,25,0,454,456,3,28,14,0,455,453,1,0,0,0,455,
		454,1,0,0,0,456,49,1,0,0,0,457,458,5,38,0,0,458,459,3,28,14,0,459,51,1,
		0,0,0,460,461,5,37,0,0,461,462,3,28,14,0,462,53,1,0,0,0,463,464,5,40,0,
		0,464,465,3,28,14,0,465,55,1,0,0,0,466,467,5,41,0,0,467,468,5,92,0,0,468,
		469,3,24,12,0,469,470,5,93,0,0,470,473,3,6,3,0,471,472,5,42,0,0,472,474,
		3,6,3,0,473,471,1,0,0,0,473,474,1,0,0,0,474,57,1,0,0,0,475,476,5,43,0,
		0,476,477,5,92,0,0,477,478,3,24,12,0,478,479,5,93,0,0,479,480,5,95,0,0,
		480,481,5,143,0,0,481,59,1,0,0,0,482,483,5,44,0,0,483,484,3,62,31,0,484,
		61,1,0,0,0,485,488,3,28,14,0,486,488,3,30,15,0,487,485,1,0,0,0,487,486,
		1,0,0,0,488,63,1,0,0,0,489,491,5,66,0,0,490,492,5,143,0,0,491,490,1,0,
		0,0,491,492,1,0,0,0,492,65,1,0,0,0,493,494,5,67,0,0,494,495,3,68,34,0,
		495,67,1,0,0,0,496,510,3,24,12,0,497,498,3,24,12,0,498,499,5,95,0,0,499,
		500,3,24,12,0,500,510,1,0,0,0,501,502,3,24,12,0,502,504,5,95,0,0,503,505,
		3,24,12,0,504,503,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,507,5,95,
		0,0,507,508,5,143,0,0,508,510,1,0,0,0,509,496,1,0,0,0,509,497,1,0,0,0,
		509,501,1,0,0,0,510,69,1,0,0,0,511,512,5,45,0,0,512,514,5,88,0,0,513,515,
		3,72,36,0,514,513,1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,517,5,89,
		0,0,517,71,1,0,0,0,518,523,3,74,37,0,519,520,5,95,0,0,520,522,3,74,37,
		0,521,519,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,
		73,1,0,0,0,525,523,1,0,0,0,526,529,5,504,0,0,527,528,5,109,0,0,528,530,
		3,192,96,0,529,527,1,0,0,0,529,530,1,0,0,0,530,75,1,0,0,0,531,532,5,46,
		0,0,532,534,5,92,0,0,533,535,3,48,24,0,534,533,1,0,0,0,534,535,1,0,0,0,
		535,536,1,0,0,0,536,538,5,97,0,0,537,539,3,40,20,0,538,537,1,0,0,0,538,
		539,1,0,0,0,539,540,1,0,0,0,540,542,5,97,0,0,541,543,3,24,12,0,542,541,
		1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,546,5,93,0,0,545,547,3,6,3,
		0,546,545,1,0,0,0,546,547,1,0,0,0,547,77,1,0,0,0,548,549,5,47,0,0,549,
		550,5,92,0,0,550,551,3,40,20,0,551,552,5,93,0,0,552,553,3,6,3,0,553,79,
		1,0,0,0,554,555,5,48,0,0,555,556,5,504,0,0,556,557,5,88,0,0,557,558,3,
		82,41,0,558,559,5,89,0,0,559,81,1,0,0,0,560,565,3,84,42,0,561,562,5,95,
		0,0,562,564,3,84,42,0,563,561,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,
		565,566,1,0,0,0,566,570,1,0,0,0,567,565,1,0,0,0,568,570,1,0,0,0,569,560,
		1,0,0,0,569,568,1,0,0,0,570,83,1,0,0,0,571,572,5,504,0,0,572,85,1,0,0,
		0,573,574,5,50,0,0,574,575,3,182,91,0,575,576,5,92,0,0,576,577,3,82,41,
		0,577,578,5,93,0,0,578,579,3,14,7,0,579,87,1,0,0,0,580,581,5,51,0,0,581,
		582,3,24,12,0,582,89,1,0,0,0,583,584,5,52,0,0,584,585,3,182,91,0,585,586,
		5,92,0,0,586,587,3,82,41,0,587,588,5,93,0,0,588,589,3,14,7,0,589,91,1,
		0,0,0,590,591,5,53,0,0,591,592,5,504,0,0,592,593,3,94,47,0,593,93,1,0,
		0,0,594,599,5,504,0,0,595,596,5,96,0,0,596,598,5,504,0,0,597,595,1,0,0,
		0,598,601,1,0,0,0,599,597,1,0,0,0,599,600,1,0,0,0,600,95,1,0,0,0,601,599,
		1,0,0,0,602,603,5,55,0,0,603,605,5,504,0,0,604,606,3,14,7,0,605,604,1,
		0,0,0,605,606,1,0,0,0,606,97,1,0,0,0,607,608,5,62,0,0,608,609,3,28,14,
		0,609,610,3,14,7,0,610,99,1,0,0,0,611,612,5,61,0,0,612,613,5,143,0,0,613,
		101,1,0,0,0,614,615,5,56,0,0,615,616,5,504,0,0,616,623,3,114,57,0,617,
		618,5,56,0,0,618,619,5,504,0,0,619,623,5,143,0,0,620,621,5,56,0,0,621,
		623,5,504,0,0,622,614,1,0,0,0,622,617,1,0,0,0,622,620,1,0,0,0,623,103,
		1,0,0,0,624,625,5,57,0,0,625,626,5,504,0,0,626,627,3,114,57,0,627,105,
		1,0,0,0,628,629,5,58,0,0,629,630,5,504,0,0,630,631,3,114,57,0,631,107,
		1,0,0,0,632,633,5,63,0,0,633,634,3,114,57,0,634,109,1,0,0,0,635,637,5,
		64,0,0,636,638,5,504,0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,
		0,639,640,3,114,57,0,640,641,5,88,0,0,641,642,3,112,56,0,642,643,5,89,
		0,0,643,111,1,0,0,0,644,649,3,114,57,0,645,646,5,95,0,0,646,648,3,114,
		57,0,647,645,1,0,0,0,648,651,1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,
		113,1,0,0,0,651,649,1,0,0,0,652,656,5,90,0,0,653,655,3,116,58,0,654,653,
		1,0,0,0,655,658,1,0,0,0,656,654,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,
		0,658,656,1,0,0,0,659,660,5,91,0,0,660,115,1,0,0,0,661,666,3,118,59,0,
		662,663,5,95,0,0,663,665,3,118,59,0,664,662,1,0,0,0,665,668,1,0,0,0,666,
		664,1,0,0,0,666,667,1,0,0,0,667,117,1,0,0,0,668,666,1,0,0,0,669,670,5,
		504,0,0,670,674,5,109,0,0,671,675,3,192,96,0,672,675,5,143,0,0,673,675,
		3,202,101,0,674,671,1,0,0,0,674,672,1,0,0,0,674,673,1,0,0,0,675,119,1,
		0,0,0,676,677,5,59,0,0,677,678,5,504,0,0,678,679,5,92,0,0,679,680,5,93,
		0,0,680,681,3,14,7,0,681,121,1,0,0,0,682,683,5,60,0,0,683,684,5,504,0,
		0,684,685,5,92,0,0,685,686,3,20,10,0,686,687,5,93,0,0,687,123,1,0,0,0,
		688,689,5,33,0,0,689,690,5,143,0,0,690,691,3,6,3,0,691,692,5,95,0,0,692,
		693,3,6,3,0,693,125,1,0,0,0,694,695,5,34,0,0,695,696,5,143,0,0,696,697,
		3,6,3,0,697,127,1,0,0,0,698,699,3,190,95,0,699,700,3,14,7,0,700,129,1,
		0,0,0,701,702,5,68,0,0,702,703,5,88,0,0,703,704,3,132,66,0,704,705,5,89,
		0,0,705,131,1,0,0,0,706,710,3,134,67,0,707,709,3,134,67,0,708,707,1,0,
		0,0,709,712,1,0,0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,133,1,0,0,0,712,
		710,1,0,0,0,713,714,3,182,91,0,714,715,5,96,0,0,715,716,5,26,0,0,716,717,
		5,139,0,0,717,135,1,0,0,0,718,719,5,504,0,0,719,137,1,0,0,0,720,727,3,
		140,70,0,721,727,3,142,71,0,722,727,3,144,72,0,723,727,3,146,73,0,724,
		727,3,148,74,0,725,727,3,150,75,0,726,720,1,0,0,0,726,721,1,0,0,0,726,
		722,1,0,0,0,726,723,1,0,0,0,726,724,1,0,0,0,726,725,1,0,0,0,727,139,1,
		0,0,0,728,729,5,4,0,0,729,730,5,506,0,0,730,141,1,0,0,0,731,732,5,5,0,
		0,732,733,5,508,0,0,733,143,1,0,0,0,734,735,5,10,0,0,735,736,5,143,0,0,
		736,145,1,0,0,0,737,738,5,12,0,0,738,739,5,513,0,0,739,740,5,143,0,0,740,
		147,1,0,0,0,741,742,5,11,0,0,742,743,5,143,0,0,743,149,1,0,0,0,744,745,
		5,6,0,0,745,746,5,510,0,0,746,752,3,152,76,0,747,748,5,9,0,0,748,749,5,
		510,0,0,749,751,3,152,76,0,750,747,1,0,0,0,751,754,1,0,0,0,752,750,1,0,
		0,0,752,753,1,0,0,0,753,757,1,0,0,0,754,752,1,0,0,0,755,756,5,8,0,0,756,
		758,3,152,76,0,757,755,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,760,
		5,7,0,0,760,151,1,0,0,0,761,762,3,0,0,0,762,763,3,6,3,0,763,764,3,0,0,
		0,764,767,1,0,0,0,765,767,3,0,0,0,766,761,1,0,0,0,766,765,1,0,0,0,767,
		153,1,0,0,0,768,769,6,77,-1,0,769,770,5,92,0,0,770,771,3,154,77,0,771,
		772,5,93,0,0,772,777,1,0,0,0,773,774,5,106,0,0,774,777,3,154,77,6,775,
		777,5,504,0,0,776,768,1,0,0,0,776,773,1,0,0,0,776,775,1,0,0,0,777,792,
		1,0,0,0,778,779,10,5,0,0,779,780,5,117,0,0,780,791,3,154,77,6,781,782,
		10,4,0,0,782,783,5,118,0,0,783,791,3,154,77,5,784,785,10,3,0,0,785,786,
		5,120,0,0,786,791,3,154,77,4,787,788,10,2,0,0,788,789,5,121,0,0,789,791,
		3,154,77,3,790,778,1,0,0,0,790,781,1,0,0,0,790,784,1,0,0,0,790,787,1,0,
		0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,155,1,0,0,0,794,
		792,1,0,0,0,795,805,3,160,80,0,796,805,3,162,81,0,797,805,3,164,82,0,798,
		805,3,166,83,0,799,805,3,168,84,0,800,805,3,170,85,0,801,805,3,176,88,
		0,802,805,3,178,89,0,803,805,3,158,79,0,804,795,1,0,0,0,804,796,1,0,0,
		0,804,797,1,0,0,0,804,798,1,0,0,0,804,799,1,0,0,0,804,800,1,0,0,0,804,
		801,1,0,0,0,804,802,1,0,0,0,804,803,1,0,0,0,805,157,1,0,0,0,806,807,7,
		4,0,0,807,809,3,192,96,0,808,810,5,143,0,0,809,808,1,0,0,0,809,810,1,0,
		0,0,810,812,1,0,0,0,811,813,5,504,0,0,812,811,1,0,0,0,812,813,1,0,0,0,
		813,159,1,0,0,0,814,815,5,25,0,0,815,816,7,5,0,0,816,161,1,0,0,0,817,818,
		5,26,0,0,818,819,3,186,93,0,819,163,1,0,0,0,820,821,5,27,0,0,821,822,3,
		186,93,0,822,165,1,0,0,0,823,824,5,28,0,0,824,825,3,186,93,0,825,167,1,
		0,0,0,826,827,5,15,0,0,827,828,5,143,0,0,828,169,1,0,0,0,829,830,7,6,0,
		0,830,831,3,192,96,0,831,832,5,95,0,0,832,833,3,172,86,0,833,171,1,0,0,
		0,834,841,3,192,96,0,835,836,5,90,0,0,836,837,3,186,93,0,837,838,5,91,
		0,0,838,841,1,0,0,0,839,841,3,174,87,0,840,834,1,0,0,0,840,835,1,0,0,0,
		840,839,1,0,0,0,841,173,1,0,0,0,842,843,1,0,0,0,843,175,1,0,0,0,844,845,
		5,18,0,0,845,846,5,143,0,0,846,177,1,0,0,0,847,848,5,39,0,0,848,849,7,
		7,0,0,849,856,3,184,92,0,850,851,5,95,0,0,851,854,3,192,96,0,852,853,5,
		95,0,0,853,855,3,192,96,0,854,852,1,0,0,0,854,855,1,0,0,0,855,857,1,0,
		0,0,856,850,1,0,0,0,856,857,1,0,0,0,857,179,1,0,0,0,858,859,5,106,0,0,
		859,863,5,504,0,0,860,863,5,106,0,0,861,863,3,182,91,0,862,858,1,0,0,0,
		862,860,1,0,0,0,862,861,1,0,0,0,863,181,1,0,0,0,864,865,5,108,0,0,865,
		868,5,504,0,0,866,868,5,504,0,0,867,864,1,0,0,0,867,866,1,0,0,0,868,183,
		1,0,0,0,869,870,5,143,0,0,870,185,1,0,0,0,871,876,3,192,96,0,872,873,5,
		95,0,0,873,875,3,192,96,0,874,872,1,0,0,0,875,878,1,0,0,0,876,874,1,0,
		0,0,876,877,1,0,0,0,877,187,1,0,0,0,878,876,1,0,0,0,879,884,3,190,95,0,
		880,881,5,95,0,0,881,883,3,190,95,0,882,880,1,0,0,0,883,886,1,0,0,0,884,
		882,1,0,0,0,884,885,1,0,0,0,885,189,1,0,0,0,886,884,1,0,0,0,887,893,5,
		142,0,0,888,890,3,194,97,0,889,888,1,0,0,0,889,890,1,0,0,0,890,891,1,0,
		0,0,891,893,3,192,96,0,892,887,1,0,0,0,892,889,1,0,0,0,893,191,1,0,0,0,
		894,898,3,196,98,0,895,898,3,198,99,0,896,898,3,200,100,0,897,894,1,0,
		0,0,897,895,1,0,0,0,897,896,1,0,0,0,898,193,1,0,0,0,899,900,7,8,0,0,900,
		195,1,0,0,0,901,902,5,139,0,0,902,197,1,0,0,0,903,904,5,140,0,0,904,199,
		1,0,0,0,905,906,5,141,0,0,906,201,1,0,0,0,907,908,7,9,0,0,908,203,1,0,
		0,0,909,910,5,504,0,0,910,205,1,0,0,0,911,917,3,208,104,0,912,913,3,208,
		104,0,913,914,5,94,0,0,914,915,3,204,102,0,915,917,1,0,0,0,916,911,1,0,
		0,0,916,912,1,0,0,0,917,207,1,0,0,0,918,919,7,10,0,0,919,209,1,0,0,0,920,
		921,7,11,0,0,921,211,1,0,0,0,922,923,7,12,0,0,923,213,1,0,0,0,62,223,233,
		243,254,257,261,278,284,303,311,334,366,368,392,401,408,445,455,473,487,
		491,504,509,514,523,529,534,538,542,546,565,569,599,605,622,637,649,656,
		666,674,710,726,752,757,766,776,790,792,804,809,812,840,854,856,862,867,
		876,884,889,892,897,916
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Righthand.RetroDbgDataProvider.KickAssembler
