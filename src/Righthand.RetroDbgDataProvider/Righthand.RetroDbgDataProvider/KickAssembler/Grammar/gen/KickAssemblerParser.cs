//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/miha/Projects/rthand/c64/retro-dbg-data-provider/src/Righthand.RetroDbgDataProvider/Righthand.RetroDbgDataProvider/KickAssembler/Grammar/KickAssemblerParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class KickAssemblerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ONLYA=1, ABS=2, BINARY_TEXT=3, C64_TEXT=4, TEXT_TEXT=5, ASCII=6, PETSCII_MIXED=7, 
		PETSCII_UPPER=8, SCREENCODE_MIXED=9, SCREENCODE_UPPER=10, ENCODING=11, 
		FILL=12, FILLWORD=13, LOHIFILL=14, BYTE=15, WORD=16, DWORD=17, CPU=18, 
		CPU6502NOILLEGALS=19, CPU6502=20, DTV=21, CPU65C02=22, PRINT=23, PRINTNOW=24, 
		VAR=25, CONST=26, IF=27, ERRORIF=28, EVAL=29, BREAK=30, WATCH=31, OPEN_BRACE=32, 
		CLOSE_BRACE=33, OPEN_BRACKET=34, CLOSE_BRACKET=35, OPEN_PARENS=36, CLOSE_PARENS=37, 
		DOT=38, COMMA=39, COLON=40, SEMICOLON=41, PLUS=42, MINUS=43, STAR=44, 
		DIV=45, PERCENT=46, AMP=47, BITWISE_OR=48, CARET=49, BANG=50, TILDE=51, 
		ASSIGNMENT=52, LT=53, GT=54, INTERR=55, DOUBLE_COLON=56, OP_COALESCING=57, 
		OP_INC=58, OP_DEC=59, OP_AND=60, OP_OR=61, OP_PTR=62, OP_EQ=63, OP_NE=64, 
		OP_LE=65, OP_GE=66, OP_ADD_ASSIGNMENT=67, OP_SUB_ASSIGNMENT=68, OP_MULT_ASSIGNMENT=69, 
		OP_DIV_ASSIGNMENT=70, OP_MOD_ASSIGNMENT=71, OP_AND_ASSIGNMENT=72, OP_OR_ASSIGNMENT=73, 
		OP_XOR_ASSIGNMENT=74, OP_LEFT_SHIFT=75, OP_RIGHT_SHIFT=76, OP_LEFT_SHIFT_ASSIGNMENT=77, 
		OP_COALESCING_ASSIGNMENT=78, OP_RANGE=79, TRUE=80, FALSE=81, DEC_NUMBER=82, 
		HEX_NUMBER=83, BIN_NUMBER=84, CHAR=85, STRING=86, HASH=87, DOUBLE_QUOTE=88, 
		UNQUOTED_STRING=89, SYMBOL=90, SINGLE_LINE_COMMENT=91, MULTI_LINE_COMMENT=92, 
		EOL=93, WS=94, ADC=95, AND=96, ASL=97, BCC=98, BCS=99, BEQ=100, BIT=101, 
		BMI=102, BNE=103, BPL=104, BRA=105, BRK=106, BVC=107, BVS=108, CLC=109, 
		CLD=110, CLI=111, CLV=112, CMP=113, CPX=114, CPY=115, DEC=116, DEX=117, 
		DEY=118, EOR=119, INC=120, INX=121, INY=122, JMP=123, JSR=124, LDA=125, 
		LDY=126, LDX=127, LSR=128, NOP=129, ORA=130, PHA=131, PHX=132, PHY=133, 
		PHP=134, PLA=135, PLP=136, PLY=137, ROL=138, ROR=139, RTI=140, RTS=141, 
		SBC=142, SEC=143, SED=144, SEI=145, STA=146, STX=147, STY=148, STZ=149, 
		TAX=150, TAY=151, TSX=152, TXA=153, TXS=154, TYA=155;
	public const int
		RULE_program = 0, RULE_units = 1, RULE_unit = 2, RULE_label = 3, RULE_instruction = 4, 
		RULE_scope = 5, RULE_argumentList = 6, RULE_argument = 7, RULE_expression = 8, 
		RULE_binaryop = 9, RULE_assignment_expression = 10, RULE_shorthand_assignment_expression = 11, 
		RULE_unary_operator = 12, RULE_compareop = 13, RULE_classFunction = 14, 
		RULE_function = 15, RULE_condition = 16, RULE_compiler_statement = 17, 
		RULE_print = 18, RULE_printnow = 19, RULE_var = 20, RULE_const = 21, RULE_if = 22, 
		RULE_errorif = 23, RULE_eval = 24, RULE_break = 25, RULE_watch = 26, RULE_watchArguments = 27, 
		RULE_enum = 28, RULE_enumValues = 29, RULE_enumValue = 30, RULE_directive = 31, 
		RULE_memoryDirective = 32, RULE_cpuDirective = 33, RULE_byteDirective = 34, 
		RULE_wordDirective = 35, RULE_dwordDirective = 36, RULE_textDirective = 37, 
		RULE_fillDirective = 38, RULE_fillDirectiveArguments = 39, RULE_fillExpression = 40, 
		RULE_encodingDirective = 41, RULE_encodingDirectiveValue = 42, RULE_importFileDirective = 43, 
		RULE_importDataDirective = 44, RULE_labelName = 45, RULE_define = 46, 
		RULE_file = 47, RULE_numberList = 48, RULE_numericList = 49, RULE_numeric = 50, 
		RULE_number = 51, RULE_lohibyte = 52, RULE_decNumber = 53, RULE_hexNumber = 54, 
		RULE_binNumber = 55, RULE_boolean = 56, RULE_opcodeExtension = 57, RULE_fullOpcode = 58, 
		RULE_opcode = 59;
	public static readonly string[] ruleNames = {
		"program", "units", "unit", "label", "instruction", "scope", "argumentList", 
		"argument", "expression", "binaryop", "assignment_expression", "shorthand_assignment_expression", 
		"unary_operator", "compareop", "classFunction", "function", "condition", 
		"compiler_statement", "print", "printnow", "var", "const", "if", "errorif", 
		"eval", "break", "watch", "watchArguments", "enum", "enumValues", "enumValue", 
		"directive", "memoryDirective", "cpuDirective", "byteDirective", "wordDirective", 
		"dwordDirective", "textDirective", "fillDirective", "fillDirectiveArguments", 
		"fillExpression", "encodingDirective", "encodingDirectiveValue", "importFileDirective", 
		"importDataDirective", "labelName", "define", "file", "numberList", "numericList", 
		"numeric", "number", "lohibyte", "decNumber", "hexNumber", "binNumber", 
		"boolean", "opcodeExtension", "fullOpcode", "opcode"
	};

	private static readonly string[] _LiteralNames = {
		null, "'a'", "'abs'", "'binary'", "'c64'", "'text'", "'ascii'", "'petscii_mixed'", 
		"'petscii_upper'", "'screencode_mixed'", "'screencode_upper'", "'encoding'", 
		"'fill'", "'fillword'", "'lohifill'", null, null, null, "'cpu'", "'_6502NoIllegals'", 
		"'_6502'", "'dtv'", "'_65c02'", "'print'", "'printnow'", "'var'", "'const'", 
		"'if'", "'errorif'", "'eval'", "'break'", "'watch'", "'{'", "'}'", "'['", 
		"']'", "'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", 
		"'?'", "'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", 
		"'!='", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
		"'|='", "'^='", "'<<'", "'>>'", "'<<='", "'??='", "'..'", "'true'", "'false'", 
		null, null, null, null, null, "'#'", "'\"'", null, null, null, null, null, 
		null, "'adc'", "'and'", "'asl'", "'bcc'", "'bcs'", "'beq'", "'bit'", "'bmi'", 
		"'bne'", "'bpl'", "'bra'", "'brk'", "'bvc'", "'bvs'", "'clc'", "'cld'", 
		"'cli'", "'clv'", "'cmp'", "'cpx'", "'cpy'", "'dec'", "'dex'", "'dey'", 
		"'eor'", "'inc'", "'inx'", "'iny'", "'jmp'", "'jsr'", "'lda'", "'ldy'", 
		"'ldx'", "'lsr'", "'nop'", "'ora'", "'pha'", "'phx'", "'phy'", "'php'", 
		"'pla'", "'plp'", "'ply'", "'rol'", "'ror'", "'rti'", "'rts'", "'sbc'", 
		"'sec'", "'sed'", "'sei'", "'sta'", "'stx'", "'sty'", "'stz'", "'tax'", 
		"'tay'", "'tsx'", "'txa'", "'txs'", "'tya'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ONLYA", "ABS", "BINARY_TEXT", "C64_TEXT", "TEXT_TEXT", "ASCII", 
		"PETSCII_MIXED", "PETSCII_UPPER", "SCREENCODE_MIXED", "SCREENCODE_UPPER", 
		"ENCODING", "FILL", "FILLWORD", "LOHIFILL", "BYTE", "WORD", "DWORD", "CPU", 
		"CPU6502NOILLEGALS", "CPU6502", "DTV", "CPU65C02", "PRINT", "PRINTNOW", 
		"VAR", "CONST", "IF", "ERRORIF", "EVAL", "BREAK", "WATCH", "OPEN_BRACE", 
		"CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", 
		"DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", 
		"PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
		"LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", "OP_DEC", 
		"OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", 
		"OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", 
		"OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", 
		"OP_RIGHT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
		"OP_RANGE", "TRUE", "FALSE", "DEC_NUMBER", "HEX_NUMBER", "BIN_NUMBER", 
		"CHAR", "STRING", "HASH", "DOUBLE_QUOTE", "UNQUOTED_STRING", "SYMBOL", 
		"SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "EOL", "WS", "ADC", "AND", 
		"ASL", "BCC", "BCS", "BEQ", "BIT", "BMI", "BNE", "BPL", "BRA", "BRK", 
		"BVC", "BVS", "CLC", "CLD", "CLI", "CLV", "CMP", "CPX", "CPY", "DEC", 
		"DEX", "DEY", "EOR", "INC", "INX", "INY", "JMP", "JSR", "LDA", "LDY", 
		"LDX", "LSR", "NOP", "ORA", "PHA", "PHX", "PHY", "PHP", "PLA", "PLP", 
		"PLY", "ROL", "ROR", "RTI", "RTS", "SBC", "SEC", "SED", "SEI", "STA", 
		"STX", "STY", "STZ", "TAX", "TAY", "TSX", "TXA", "TXS", "TYA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KickAssemblerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static KickAssemblerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KickAssemblerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KickAssemblerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitsContext units() {
			return GetRuleContext<UnitsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			units();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext[] unit() {
			return GetRuleContexts<UnitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit(int i) {
			return GetRuleContext<UnitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(KickAssemblerParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(KickAssemblerParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(KickAssemblerParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(KickAssemblerParser.SEMICOLON, i);
		}
		public UnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_units; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitsContext units() {
		UnitsContext _localctx = new UnitsContext(Context, State);
		EnterRule(_localctx, 2, RULE_units);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			unit();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON || _la==EOL) {
				{
				{
				State = 123;
				_la = TokenStream.LA(1);
				if ( !(_la==SEMICOLON || _la==EOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 124;
				unit();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 4, RULE_unit);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				instruction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132;
				label();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 133;
				directive();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 134;
				scope();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelNameContext labelName() {
			return GetRuleContext<LabelNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 6, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			labelName();
			State = 138;
			instruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullOpcodeContext fullOpcode() {
			return GetRuleContext<FullOpcodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 8, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			fullOpcode();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 17944029766877957L) != 0)) {
				{
				State = 141;
				argumentList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(KickAssemblerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnitsContext units() {
			return GetRuleContext<UnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 10, RULE_scope);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNQUOTED_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				Match(UNQUOTED_STRING);
				State = 145;
				Match(COLON);
				State = 146;
				Match(OPEN_BRACE);
				State = 147;
				units();
				State = 148;
				Match(CLOSE_BRACE);
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150;
				Match(OPEN_BRACE);
				State = 151;
				units();
				State = 152;
				Match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 12, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			argument();
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 157;
				Match(COMMA);
				State = 158;
				argument();
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(KickAssemblerParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(KickAssemblerParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(KickAssemblerParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(KickAssemblerParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(KickAssemblerParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(KickAssemblerParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(KickAssemblerParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_argument);
		int _la;
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 164;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==PLUS || _la==MINUS );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				Match(HASH);
				State = 170;
				numeric();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 171;
				Match(OPEN_PARENS);
				State = 172;
				argumentList();
				State = 173;
				Match(CLOSE_PARENS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 175;
				Match(OPEN_BRACKET);
				State = 176;
				argumentList();
				State = 177;
				Match(CLOSE_BRACKET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 179;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(KickAssemblerParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(KickAssemblerParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassFunctionContext classFunction() {
			return GetRuleContext<ClassFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryopContext binaryop() {
			return GetRuleContext<BinaryopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(KickAssemblerParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KickAssemblerParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(KickAssemblerParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(KickAssemblerParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompareopContext compareop() {
			return GetRuleContext<CompareopContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 183;
				Match(OPEN_PARENS);
				State = 184;
				expression(0);
				State = 185;
				Match(CLOSE_PARENS);
				}
				break;
			case 2:
				{
				State = 187;
				Match(OPEN_BRACKET);
				State = 188;
				expression(0);
				State = 189;
				Match(CLOSE_BRACKET);
				}
				break;
			case 3:
				{
				State = 191;
				classFunction();
				}
				break;
			case 4:
				{
				State = 192;
				function();
				}
				break;
			case 5:
				{
				State = 193;
				Match(STRING);
				}
				break;
			case 6:
				{
				State = 194;
				numeric();
				}
				break;
			case 7:
				{
				State = 195;
				Match(STRING);
				}
				break;
			case 8:
				{
				State = 196;
				boolean();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 219;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 199;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 200;
						binaryop();
						State = 201;
						expression(13);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 203;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 204;
						Match(STAR);
						State = 205;
						expression(12);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 206;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 207;
						Match(DIV);
						State = 208;
						expression(11);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 209;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 210;
						Match(PLUS);
						State = 211;
						expression(10);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 212;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 213;
						Match(MINUS);
						State = 214;
						expression(9);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 215;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 216;
						compareop();
						State = 217;
						expression(8);
						}
						break;
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinaryopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(KickAssemblerParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(KickAssemblerParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(KickAssemblerParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(KickAssemblerParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEFT_SHIFT() { return GetToken(KickAssemblerParser.OP_LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RIGHT_SHIFT() { return GetToken(KickAssemblerParser.OP_RIGHT_SHIFT, 0); }
		public BinaryopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBinaryop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBinaryop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryopContext binaryop() {
		BinaryopContext _localctx = new BinaryopContext(Context, State);
		EnterRule(_localctx, 18, RULE_binaryop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & 805306391L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(UNQUOTED_STRING);
			State = 227;
			Match(ASSIGNMENT);
			State = 228;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shorthand_assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_operatorContext unary_operator() {
			return GetRuleContext<Unary_operatorContext>(0);
		}
		public Shorthand_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shorthand_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterShorthand_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitShorthand_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShorthand_assignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shorthand_assignment_expressionContext shorthand_assignment_expression() {
		Shorthand_assignment_expressionContext _localctx = new Shorthand_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_shorthand_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(UNQUOTED_STRING);
			State = 231;
			unary_operator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(KickAssemblerParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(KickAssemblerParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(KickAssemblerParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(KickAssemblerParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(KickAssemblerParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(KickAssemblerParser.DIV, 0); }
		public Unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitUnary_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operatorContext unary_operator() {
		Unary_operatorContext _localctx = new Unary_operatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_unary_operator);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233;
				Match(PLUS);
				State = 234;
				Match(PLUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				Match(MINUS);
				State = 236;
				Match(MINUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237;
				Match(PLUS);
				State = 238;
				Match(ASSIGNMENT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 239;
				Match(MINUS);
				State = 240;
				Match(ASSIGNMENT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 241;
				Match(STAR);
				State = 242;
				Match(ASSIGNMENT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 243;
				Match(DIV);
				State = 244;
				Match(ASSIGNMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(KickAssemblerParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(KickAssemblerParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(KickAssemblerParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(KickAssemblerParser.OP_GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(KickAssemblerParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(KickAssemblerParser.LT, 0); }
		public CompareopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCompareop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCompareop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareopContext compareop() {
		CompareopContext _localctx = new CompareopContext(Context, State);
		EnterRule(_localctx, 26, RULE_compareop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & 15363L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(KickAssemblerParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(KickAssemblerParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KickAssemblerParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ClassFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterClassFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitClassFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassFunctionContext classFunction() {
		ClassFunctionContext _localctx = new ClassFunctionContext(Context, State);
		EnterRule(_localctx, 28, RULE_classFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(STRING);
			State = 250;
			Match(DOT);
			State = 251;
			Match(STRING);
			State = 252;
			Match(OPEN_PARENS);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 17944029766877957L) != 0)) {
				{
				State = 253;
				argumentList();
				}
			}

			State = 256;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(STRING);
			State = 259;
			Match(OPEN_PARENS);
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 17944029766877957L) != 0)) {
				{
				State = 260;
				argumentList();
				}
			}

			State = 263;
			Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 32, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compiler_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KickAssemblerParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintnowContext printnow() {
			return GetRuleContext<PrintnowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstContext @const() {
			return GetRuleContext<ConstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorifContext errorif() {
			return GetRuleContext<ErrorifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvalContext eval() {
			return GetRuleContext<EvalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakContext @break() {
			return GetRuleContext<BreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WatchContext watch() {
			return GetRuleContext<WatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		public Compiler_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compiler_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCompiler_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCompiler_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompiler_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compiler_statementContext compiler_statement() {
		Compiler_statementContext _localctx = new Compiler_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_compiler_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(DOT);
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRINT:
				{
				State = 268;
				print();
				}
				break;
			case PRINTNOW:
				{
				State = 269;
				printnow();
				}
				break;
			case VAR:
				{
				State = 270;
				var();
				}
				break;
			case CONST:
				{
				State = 271;
				@const();
				}
				break;
			case IF:
				{
				State = 272;
				@if();
				}
				break;
			case ERRORIF:
				{
				State = 273;
				errorif();
				}
				break;
			case EVAL:
				{
				State = 274;
				eval();
				}
				break;
			case BREAK:
				{
				State = 275;
				@break();
				}
				break;
			case WATCH:
				{
				State = 276;
				watch();
				}
				break;
			case OPEN_BRACE:
				{
				State = 277;
				@enum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(KickAssemblerParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 36, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(PRINT);
			State = 281;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintnowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINTNOW() { return GetToken(KickAssemblerParser.PRINTNOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintnowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printnow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterPrintnow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitPrintnow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintnow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintnowContext printnow() {
		PrintnowContext _localctx = new PrintnowContext(Context, State);
		EnterRule(_localctx, 38, RULE_printnow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(PRINTNOW);
			State = 284;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(KickAssemblerParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 40, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			Match(VAR);
			State = 287;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(KickAssemblerParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstContext @const() {
		ConstContext _localctx = new ConstContext(Context, State);
		EnterRule(_localctx, 42, RULE_const);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(CONST);
			State = 290;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(KickAssemblerParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compiler_statementContext compiler_statement() {
			return GetRuleContext<Compiler_statementContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 44, RULE_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(IF);
			State = 293;
			Match(OPEN_PARENS);
			State = 294;
			expression(0);
			State = 295;
			Match(CLOSE_PARENS);
			State = 296;
			compiler_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORIF() { return GetToken(KickAssemblerParser.ERRORIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(KickAssemblerParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(KickAssemblerParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KickAssemblerParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public ErrorifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterErrorif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitErrorif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorifContext errorif() {
		ErrorifContext _localctx = new ErrorifContext(Context, State);
		EnterRule(_localctx, 46, RULE_errorif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(ERRORIF);
			State = 299;
			Match(OPEN_PARENS);
			State = 300;
			expression(0);
			State = 301;
			Match(CLOSE_PARENS);
			State = 302;
			Match(COMMA);
			State = 303;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVAL() { return GetToken(KickAssemblerParser.EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public EvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalContext eval() {
		EvalContext _localctx = new EvalContext(Context, State);
		EnterRule(_localctx, 48, RULE_eval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(EVAL);
			State = 306;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(KickAssemblerParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public BreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakContext @break() {
		BreakContext _localctx = new BreakContext(Context, State);
		EnterRule(_localctx, 50, RULE_break);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(BREAK);
			State = 310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 309;
				Match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WATCH() { return GetToken(KickAssemblerParser.WATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WatchArgumentsContext watchArguments() {
			return GetRuleContext<WatchArgumentsContext>(0);
		}
		public WatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_watch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterWatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitWatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WatchContext watch() {
		WatchContext _localctx = new WatchContext(Context, State);
		EnterRule(_localctx, 52, RULE_watch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(WATCH);
			State = 313;
			watchArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WatchArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public WatchArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_watchArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterWatchArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitWatchArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWatchArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WatchArgumentsContext watchArguments() {
		WatchArgumentsContext _localctx = new WatchArgumentsContext(Context, State);
		EnterRule(_localctx, 54, RULE_watchArguments);
		int _la;
		try {
			State = 328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316;
				expression(0);
				State = 317;
				Match(COMMA);
				State = 318;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 320;
				expression(0);
				State = 321;
				Match(COMMA);
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & 8936830512136197L) != 0)) {
					{
					State = 322;
					expression(0);
					}
				}

				State = 325;
				Match(COMMA);
				State = 326;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(KickAssemblerParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValuesContext enumValues() {
			return GetRuleContext<EnumValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(KickAssemblerParser.CLOSE_BRACE, 0); }
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 56, RULE_enum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(OPEN_BRACE);
			State = 331;
			enumValues();
			State = 332;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public EnumValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEnumValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEnumValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValuesContext enumValues() {
		EnumValuesContext _localctx = new EnumValuesContext(Context, State);
		EnterRule(_localctx, 58, RULE_enumValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			enumValue();
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 335;
				Match(COMMA);
				State = 336;
				enumValue();
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_enumValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(UNQUOTED_STRING);
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 343;
				Match(ASSIGNMENT);
				State = 344;
				number();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KickAssemblerParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CpuDirectiveContext cpuDirective() {
			return GetRuleContext<CpuDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ByteDirectiveContext byteDirective() {
			return GetRuleContext<ByteDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WordDirectiveContext wordDirective() {
			return GetRuleContext<WordDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DwordDirectiveContext dwordDirective() {
			return GetRuleContext<DwordDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextDirectiveContext textDirective() {
			return GetRuleContext<TextDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FillDirectiveContext fillDirective() {
			return GetRuleContext<FillDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncodingDirectiveContext encodingDirective() {
			return GetRuleContext<EncodingDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportFileDirectiveContext importFileDirective() {
			return GetRuleContext<ImportFileDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDataDirectiveContext importDataDirective() {
			return GetRuleContext<ImportDataDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryDirectiveContext memoryDirective() {
			return GetRuleContext<MemoryDirectiveContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 62, RULE_directive);
		try {
			State = 360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347;
				Match(DOT);
				State = 357;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 348;
					cpuDirective();
					}
					break;
				case 2:
					{
					State = 349;
					byteDirective();
					}
					break;
				case 3:
					{
					State = 350;
					wordDirective();
					}
					break;
				case 4:
					{
					State = 351;
					dwordDirective();
					}
					break;
				case 5:
					{
					State = 352;
					textDirective();
					}
					break;
				case 6:
					{
					State = 353;
					fillDirective();
					}
					break;
				case 7:
					{
					State = 354;
					encodingDirective();
					}
					break;
				case 8:
					{
					State = 355;
					importFileDirective();
					}
					break;
				case 9:
					{
					State = 356;
					importDataDirective();
					}
					break;
				}
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 359;
				memoryDirective();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(KickAssemblerParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(KickAssemblerParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public MemoryDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterMemoryDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitMemoryDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemoryDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemoryDirectiveContext memoryDirective() {
		MemoryDirectiveContext _localctx = new MemoryDirectiveContext(Context, State);
		EnterRule(_localctx, 64, RULE_memoryDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(STAR);
			State = 363;
			Match(ASSIGNMENT);
			State = 364;
			number();
			State = 365;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CpuDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(KickAssemblerParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU6502NOILLEGALS() { return GetToken(KickAssemblerParser.CPU6502NOILLEGALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU6502() { return GetToken(KickAssemblerParser.CPU6502, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DTV() { return GetToken(KickAssemblerParser.DTV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU65C02() { return GetToken(KickAssemblerParser.CPU65C02, 0); }
		public CpuDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cpuDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterCpuDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitCpuDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCpuDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CpuDirectiveContext cpuDirective() {
		CpuDirectiveContext _localctx = new CpuDirectiveContext(Context, State);
		EnterRule(_localctx, 66, RULE_cpuDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			Match(CPU);
			State = 368;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7864320L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ByteDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(KickAssemblerParser.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		public ByteDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_byteDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterByteDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitByteDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByteDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ByteDirectiveContext byteDirective() {
		ByteDirectiveContext _localctx = new ByteDirectiveContext(Context, State);
		EnterRule(_localctx, 68, RULE_byteDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(BYTE);
			State = 371;
			numberList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD() { return GetToken(KickAssemblerParser.WORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		public WordDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterWordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitWordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordDirectiveContext wordDirective() {
		WordDirectiveContext _localctx = new WordDirectiveContext(Context, State);
		EnterRule(_localctx, 70, RULE_wordDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(WORD);
			State = 374;
			numberList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DwordDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DWORD() { return GetToken(KickAssemblerParser.DWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		public DwordDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dwordDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDwordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDwordDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDwordDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DwordDirectiveContext dwordDirective() {
		DwordDirectiveContext _localctx = new DwordDirectiveContext(Context, State);
		EnterRule(_localctx, 72, RULE_dwordDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			Match(DWORD);
			State = 377;
			numberList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_TEXT() { return GetToken(KickAssemblerParser.TEXT_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public TextDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterTextDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitTextDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextDirectiveContext textDirective() {
		TextDirectiveContext _localctx = new TextDirectiveContext(Context, State);
		EnterRule(_localctx, 74, RULE_textDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(TEXT_TEXT);
			State = 380;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(KickAssemblerParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FillDirectiveArgumentsContext fillDirectiveArguments() {
			return GetRuleContext<FillDirectiveArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILL() { return GetToken(KickAssemblerParser.FILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILLWORD() { return GetToken(KickAssemblerParser.FILLWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOHIFILL() { return GetToken(KickAssemblerParser.LOHIFILL, 0); }
		public FillDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFillDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFillDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillDirectiveContext fillDirective() {
		FillDirectiveContext _localctx = new FillDirectiveContext(Context, State);
		EnterRule(_localctx, 76, RULE_fillDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 383;
			number();
			State = 384;
			Match(COMMA);
			State = 385;
			fillDirectiveArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillDirectiveArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(KickAssemblerParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberListContext numberList() {
			return GetRuleContext<NumberListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(KickAssemblerParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FillExpressionContext fillExpression() {
			return GetRuleContext<FillExpressionContext>(0);
		}
		public FillDirectiveArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillDirectiveArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFillDirectiveArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFillDirectiveArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillDirectiveArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillDirectiveArgumentsContext fillDirectiveArguments() {
		FillDirectiveArgumentsContext _localctx = new FillDirectiveArgumentsContext(Context, State);
		EnterRule(_localctx, 78, RULE_fillDirectiveArguments);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEC_NUMBER:
			case HEX_NUMBER:
			case BIN_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387;
				number();
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				Match(OPEN_BRACKET);
				State = 389;
				numberList();
				State = 390;
				Match(CLOSE_BRACKET);
				}
				break;
			case Eof:
			case CLOSE_BRACE:
			case SEMICOLON:
			case EOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 392;
				fillExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FillExpressionContext : ParserRuleContext {
		public FillExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fillExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFillExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFillExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFillExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FillExpressionContext fillExpression() {
		FillExpressionContext _localctx = new FillExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_fillExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(KickAssemblerParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOUBLE_QUOTE() { return GetTokens(KickAssemblerParser.DOUBLE_QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTE(int i) {
			return GetToken(KickAssemblerParser.DOUBLE_QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncodingDirectiveValueContext encodingDirectiveValue() {
			return GetRuleContext<EncodingDirectiveValueContext>(0);
		}
		public EncodingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEncodingDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEncodingDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingDirectiveContext encodingDirective() {
		EncodingDirectiveContext _localctx = new EncodingDirectiveContext(Context, State);
		EnterRule(_localctx, 82, RULE_encodingDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			Match(ENCODING);
			State = 398;
			Match(DOUBLE_QUOTE);
			State = 399;
			encodingDirectiveValue();
			State = 400;
			Match(DOUBLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodingDirectiveValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(KickAssemblerParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PETSCII_MIXED() { return GetToken(KickAssemblerParser.PETSCII_MIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PETSCII_UPPER() { return GetToken(KickAssemblerParser.PETSCII_UPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCREENCODE_MIXED() { return GetToken(KickAssemblerParser.SCREENCODE_MIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCREENCODE_UPPER() { return GetToken(KickAssemblerParser.SCREENCODE_UPPER, 0); }
		public EncodingDirectiveValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodingDirectiveValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterEncodingDirectiveValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitEncodingDirectiveValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodingDirectiveValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodingDirectiveValueContext encodingDirectiveValue() {
		EncodingDirectiveValueContext _localctx = new EncodingDirectiveValueContext(Context, State);
		EnterRule(_localctx, 84, RULE_encodingDirectiveValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1984L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFileDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(KickAssemblerParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefineContext define() {
			return GetRuleContext<DefineContext>(0);
		}
		public ImportFileDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFileDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterImportFileDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitImportFileDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportFileDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportFileDirectiveContext importFileDirective() {
		ImportFileDirectiveContext _localctx = new ImportFileDirectiveContext(Context, State);
		EnterRule(_localctx, 86, RULE_importFileDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			Match(HASH);
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNQUOTED_STRING) {
				{
				State = 405;
				define();
				}
			}

			State = 408;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDataDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileContext file() {
			return GetRuleContext<FileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_TEXT() { return GetToken(KickAssemblerParser.BINARY_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode C64_TEXT() { return GetToken(KickAssemblerParser.C64_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_TEXT() { return GetToken(KickAssemblerParser.TEXT_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public ImportDataDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDataDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterImportDataDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitImportDataDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDataDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDataDirectiveContext importDataDirective() {
		ImportDataDirectiveContext _localctx = new ImportDataDirectiveContext(Context, State);
		EnterRule(_localctx, 88, RULE_importDataDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 56L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 411;
			file();
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 412;
				Match(COMMA);
				State = 413;
				number();
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 414;
					Match(COMMA);
					State = 415;
					number();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(KickAssemblerParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public LabelNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterLabelName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitLabelName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelNameContext labelName() {
		LabelNameContext _localctx = new LabelNameContext(Context, State);
		EnterRule(_localctx, 90, RULE_labelName);
		try {
			State = 424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420;
				Match(BANG);
				State = 421;
				Match(UNQUOTED_STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422;
				Match(BANG);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 423;
				Match(UNQUOTED_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(KickAssemblerParser.UNQUOTED_STRING, 0); }
		public DefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineContext define() {
		DefineContext _localctx = new DefineContext(Context, State);
		EnterRule(_localctx, 92, RULE_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KickAssemblerParser.STRING, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 94, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public NumberListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumberList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberListContext numberList() {
		NumberListContext _localctx = new NumberListContext(Context, State);
		EnterRule(_localctx, 96, RULE_numberList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			number();
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 431;
				Match(COMMA);
				State = 432;
				number();
				}
				}
				State = 437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext[] numeric() {
			return GetRuleContexts<NumericContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric(int i) {
			return GetRuleContext<NumericContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(KickAssemblerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(KickAssemblerParser.COMMA, i);
		}
		public NumericListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumericList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumericList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericListContext numericList() {
		NumericListContext _localctx = new NumericListContext(Context, State);
		EnterRule(_localctx, 98, RULE_numericList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			numeric();
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 439;
				Match(COMMA);
				State = 440;
				numeric();
				}
				}
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(KickAssemblerParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LohibyteContext lohibyte() {
			return GetRuleContext<LohibyteContext>(0);
		}
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 100, RULE_numeric);
		int _la;
		try {
			State = 451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				Match(CHAR);
				}
				break;
			case LT:
			case GT:
			case DEC_NUMBER:
			case HEX_NUMBER:
			case BIN_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT || _la==GT) {
					{
					State = 447;
					lohibyte();
					}
				}

				State = 450;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecNumberContext decNumber() {
			return GetRuleContext<DecNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexNumberContext hexNumber() {
			return GetRuleContext<HexNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinNumberContext binNumber() {
			return GetRuleContext<BinNumberContext>(0);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 102, RULE_number);
		try {
			State = 456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEC_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 453;
				decNumber();
				}
				break;
			case HEX_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454;
				hexNumber();
				}
				break;
			case BIN_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 455;
				binNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LohibyteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(KickAssemblerParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(KickAssemblerParser.LT, 0); }
		public LohibyteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lohibyte; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterLohibyte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitLohibyte(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLohibyte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LohibyteContext lohibyte() {
		LohibyteContext _localctx = new LohibyteContext(Context, State);
		EnterRule(_localctx, 104, RULE_lohibyte);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			_la = TokenStream.LA(1);
			if ( !(_la==LT || _la==GT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_NUMBER() { return GetToken(KickAssemblerParser.DEC_NUMBER, 0); }
		public DecNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterDecNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitDecNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecNumberContext decNumber() {
		DecNumberContext _localctx = new DecNumberContext(Context, State);
		EnterRule(_localctx, 106, RULE_decNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			Match(DEC_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(KickAssemblerParser.HEX_NUMBER, 0); }
		public HexNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexNumberContext hexNumber() {
		HexNumberContext _localctx = new HexNumberContext(Context, State);
		EnterRule(_localctx, 108, RULE_hexNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			Match(HEX_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_NUMBER() { return GetToken(KickAssemblerParser.BIN_NUMBER, 0); }
		public BinNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBinNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBinNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinNumberContext binNumber() {
		BinNumberContext _localctx = new BinNumberContext(Context, State);
		EnterRule(_localctx, 110, RULE_binNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(BIN_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(KickAssemblerParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(KickAssemblerParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 112, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLYA() { return GetToken(KickAssemblerParser.ONLYA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(KickAssemblerParser.ABS, 0); }
		public OpcodeExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcodeExtension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterOpcodeExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitOpcodeExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcodeExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeExtensionContext opcodeExtension() {
		OpcodeExtensionContext _localctx = new OpcodeExtensionContext(Context, State);
		EnterRule(_localctx, 114, RULE_opcodeExtension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			_la = TokenStream.LA(1);
			if ( !(_la==ONLYA || _la==ABS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullOpcodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeContext opcode() {
			return GetRuleContext<OpcodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(KickAssemblerParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpcodeExtensionContext opcodeExtension() {
			return GetRuleContext<OpcodeExtensionContext>(0);
		}
		public FullOpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullOpcode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterFullOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitFullOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullOpcode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullOpcodeContext fullOpcode() {
		FullOpcodeContext _localctx = new FullOpcodeContext(Context, State);
		EnterRule(_localctx, 116, RULE_fullOpcode);
		try {
			State = 475;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 470;
				opcode();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 471;
				opcode();
				State = 472;
				Match(DOT);
				State = 473;
				opcodeExtension();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADC() { return GetToken(KickAssemblerParser.ADC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(KickAssemblerParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASL() { return GetToken(KickAssemblerParser.ASL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCC() { return GetToken(KickAssemblerParser.BCC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BCS() { return GetToken(KickAssemblerParser.BCS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEQ() { return GetToken(KickAssemblerParser.BEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(KickAssemblerParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BMI() { return GetToken(KickAssemblerParser.BMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNE() { return GetToken(KickAssemblerParser.BNE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BPL() { return GetToken(KickAssemblerParser.BPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRA() { return GetToken(KickAssemblerParser.BRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRK() { return GetToken(KickAssemblerParser.BRK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVC() { return GetToken(KickAssemblerParser.BVC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BVS() { return GetToken(KickAssemblerParser.BVS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLC() { return GetToken(KickAssemblerParser.CLC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLD() { return GetToken(KickAssemblerParser.CLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLI() { return GetToken(KickAssemblerParser.CLI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLV() { return GetToken(KickAssemblerParser.CLV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMP() { return GetToken(KickAssemblerParser.CMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPX() { return GetToken(KickAssemblerParser.CPX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPY() { return GetToken(KickAssemblerParser.CPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(KickAssemblerParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEX() { return GetToken(KickAssemblerParser.DEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEY() { return GetToken(KickAssemblerParser.DEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOR() { return GetToken(KickAssemblerParser.EOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(KickAssemblerParser.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INX() { return GetToken(KickAssemblerParser.INX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INY() { return GetToken(KickAssemblerParser.INY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JMP() { return GetToken(KickAssemblerParser.JMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSR() { return GetToken(KickAssemblerParser.JSR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDA() { return GetToken(KickAssemblerParser.LDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDY() { return GetToken(KickAssemblerParser.LDY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LDX() { return GetToken(KickAssemblerParser.LDX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSR() { return GetToken(KickAssemblerParser.LSR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOP() { return GetToken(KickAssemblerParser.NOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORA() { return GetToken(KickAssemblerParser.ORA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHA() { return GetToken(KickAssemblerParser.PHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHX() { return GetToken(KickAssemblerParser.PHX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHY() { return GetToken(KickAssemblerParser.PHY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHP() { return GetToken(KickAssemblerParser.PHP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLA() { return GetToken(KickAssemblerParser.PLA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLP() { return GetToken(KickAssemblerParser.PLP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLY() { return GetToken(KickAssemblerParser.PLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL() { return GetToken(KickAssemblerParser.ROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR() { return GetToken(KickAssemblerParser.ROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTI() { return GetToken(KickAssemblerParser.RTI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTS() { return GetToken(KickAssemblerParser.RTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SBC() { return GetToken(KickAssemblerParser.SBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC() { return GetToken(KickAssemblerParser.SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SED() { return GetToken(KickAssemblerParser.SED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEI() { return GetToken(KickAssemblerParser.SEI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STA() { return GetToken(KickAssemblerParser.STA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STX() { return GetToken(KickAssemblerParser.STX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STY() { return GetToken(KickAssemblerParser.STY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STZ() { return GetToken(KickAssemblerParser.STZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAX() { return GetToken(KickAssemblerParser.TAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAY() { return GetToken(KickAssemblerParser.TAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TSX() { return GetToken(KickAssemblerParser.TSX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXA() { return GetToken(KickAssemblerParser.TXA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TXS() { return GetToken(KickAssemblerParser.TXS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYA() { return GetToken(KickAssemblerParser.TYA, 0); }
		public OpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.EnterOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IKickAssemblerParserListener typedListener = listener as IKickAssemblerParserListener;
			if (typedListener != null) typedListener.ExitOpcode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKickAssemblerParserVisitor<TResult> typedVisitor = visitor as IKickAssemblerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeContext opcode() {
		OpcodeContext _localctx = new OpcodeContext(Context, State);
		EnterRule(_localctx, 118, RULE_opcode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & 2305843009213693951L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,155,480,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,1,1,1,1,1,5,1,126,8,1,10,1,12,
		1,129,9,1,1,2,1,2,1,2,1,2,1,2,3,2,136,8,2,1,3,1,3,1,3,1,4,1,4,3,4,143,
		8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,155,8,5,1,6,1,6,1,6,5,
		6,160,8,6,10,6,12,6,163,9,6,1,7,4,7,166,8,7,11,7,12,7,167,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,181,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,198,8,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,220,8,8,10,
		8,12,8,223,9,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,246,8,12,1,13,1,13,
		1,14,1,14,1,14,1,14,1,14,3,14,255,8,14,1,14,1,14,1,15,1,15,1,15,3,15,262,
		8,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,3,17,279,8,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,
		21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,24,1,24,1,24,1,25,1,25,3,25,311,8,25,1,26,1,26,1,26,1,27,1,27,
		1,27,1,27,1,27,1,27,1,27,1,27,3,27,324,8,27,1,27,1,27,1,27,3,27,329,8,
		27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,5,29,338,8,29,10,29,12,29,341,9,
		29,1,30,1,30,1,30,3,30,346,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
		1,31,1,31,3,31,358,8,31,1,31,3,31,361,8,31,1,32,1,32,1,32,1,32,1,32,1,
		33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,
		37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,3,39,394,8,39,
		1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,43,1,43,3,43,407,8,43,1,
		43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,3,44,417,8,44,3,44,419,8,44,1,45,
		1,45,1,45,1,45,3,45,425,8,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,5,48,434,
		8,48,10,48,12,48,437,9,48,1,49,1,49,1,49,5,49,442,8,49,10,49,12,49,445,
		9,49,1,50,1,50,3,50,449,8,50,1,50,3,50,452,8,50,1,51,1,51,1,51,3,51,457,
		8,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,
		1,58,1,58,1,58,1,58,3,58,476,8,58,1,59,1,59,1,59,0,1,16,60,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
		60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
		106,108,110,112,114,116,118,0,12,2,0,41,41,93,93,1,0,42,43,3,0,47,49,51,
		51,75,76,2,0,53,54,63,66,1,0,19,22,1,0,12,14,1,0,6,10,1,0,3,5,1,0,53,54,
		1,0,80,81,1,0,1,2,1,0,95,155,490,0,120,1,0,0,0,2,122,1,0,0,0,4,135,1,0,
		0,0,6,137,1,0,0,0,8,140,1,0,0,0,10,154,1,0,0,0,12,156,1,0,0,0,14,180,1,
		0,0,0,16,197,1,0,0,0,18,224,1,0,0,0,20,226,1,0,0,0,22,230,1,0,0,0,24,245,
		1,0,0,0,26,247,1,0,0,0,28,249,1,0,0,0,30,258,1,0,0,0,32,265,1,0,0,0,34,
		267,1,0,0,0,36,280,1,0,0,0,38,283,1,0,0,0,40,286,1,0,0,0,42,289,1,0,0,
		0,44,292,1,0,0,0,46,298,1,0,0,0,48,305,1,0,0,0,50,308,1,0,0,0,52,312,1,
		0,0,0,54,328,1,0,0,0,56,330,1,0,0,0,58,334,1,0,0,0,60,342,1,0,0,0,62,360,
		1,0,0,0,64,362,1,0,0,0,66,367,1,0,0,0,68,370,1,0,0,0,70,373,1,0,0,0,72,
		376,1,0,0,0,74,379,1,0,0,0,76,382,1,0,0,0,78,393,1,0,0,0,80,395,1,0,0,
		0,82,397,1,0,0,0,84,402,1,0,0,0,86,404,1,0,0,0,88,410,1,0,0,0,90,424,1,
		0,0,0,92,426,1,0,0,0,94,428,1,0,0,0,96,430,1,0,0,0,98,438,1,0,0,0,100,
		451,1,0,0,0,102,456,1,0,0,0,104,458,1,0,0,0,106,460,1,0,0,0,108,462,1,
		0,0,0,110,464,1,0,0,0,112,466,1,0,0,0,114,468,1,0,0,0,116,475,1,0,0,0,
		118,477,1,0,0,0,120,121,3,2,1,0,121,1,1,0,0,0,122,127,3,4,2,0,123,124,
		7,0,0,0,124,126,3,4,2,0,125,123,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,
		0,127,128,1,0,0,0,128,3,1,0,0,0,129,127,1,0,0,0,130,136,1,0,0,0,131,136,
		3,8,4,0,132,136,3,6,3,0,133,136,3,62,31,0,134,136,3,10,5,0,135,130,1,0,
		0,0,135,131,1,0,0,0,135,132,1,0,0,0,135,133,1,0,0,0,135,134,1,0,0,0,136,
		5,1,0,0,0,137,138,3,90,45,0,138,139,3,8,4,0,139,7,1,0,0,0,140,142,3,116,
		58,0,141,143,3,12,6,0,142,141,1,0,0,0,142,143,1,0,0,0,143,9,1,0,0,0,144,
		145,5,89,0,0,145,146,5,40,0,0,146,147,5,32,0,0,147,148,3,2,1,0,148,149,
		5,33,0,0,149,155,1,0,0,0,150,151,5,32,0,0,151,152,3,2,1,0,152,153,5,33,
		0,0,153,155,1,0,0,0,154,144,1,0,0,0,154,150,1,0,0,0,155,11,1,0,0,0,156,
		161,3,14,7,0,157,158,5,39,0,0,158,160,3,14,7,0,159,157,1,0,0,0,160,163,
		1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,13,1,0,0,0,163,161,1,0,0,0,
		164,166,7,1,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,168,
		1,0,0,0,168,181,1,0,0,0,169,170,5,87,0,0,170,181,3,100,50,0,171,172,5,
		36,0,0,172,173,3,12,6,0,173,174,5,37,0,0,174,181,1,0,0,0,175,176,5,34,
		0,0,176,177,3,12,6,0,177,178,5,35,0,0,178,181,1,0,0,0,179,181,3,16,8,0,
		180,165,1,0,0,0,180,169,1,0,0,0,180,171,1,0,0,0,180,175,1,0,0,0,180,179,
		1,0,0,0,181,15,1,0,0,0,182,183,6,8,-1,0,183,184,5,36,0,0,184,185,3,16,
		8,0,185,186,5,37,0,0,186,198,1,0,0,0,187,188,5,34,0,0,188,189,3,16,8,0,
		189,190,5,35,0,0,190,198,1,0,0,0,191,198,3,28,14,0,192,198,3,30,15,0,193,
		198,5,86,0,0,194,198,3,100,50,0,195,198,5,86,0,0,196,198,3,112,56,0,197,
		182,1,0,0,0,197,187,1,0,0,0,197,191,1,0,0,0,197,192,1,0,0,0,197,193,1,
		0,0,0,197,194,1,0,0,0,197,195,1,0,0,0,197,196,1,0,0,0,198,221,1,0,0,0,
		199,200,10,12,0,0,200,201,3,18,9,0,201,202,3,16,8,13,202,220,1,0,0,0,203,
		204,10,11,0,0,204,205,5,44,0,0,205,220,3,16,8,12,206,207,10,10,0,0,207,
		208,5,45,0,0,208,220,3,16,8,11,209,210,10,9,0,0,210,211,5,42,0,0,211,220,
		3,16,8,10,212,213,10,8,0,0,213,214,5,43,0,0,214,220,3,16,8,9,215,216,10,
		7,0,0,216,217,3,26,13,0,217,218,3,16,8,8,218,220,1,0,0,0,219,199,1,0,0,
		0,219,203,1,0,0,0,219,206,1,0,0,0,219,209,1,0,0,0,219,212,1,0,0,0,219,
		215,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,17,1,0,
		0,0,223,221,1,0,0,0,224,225,7,2,0,0,225,19,1,0,0,0,226,227,5,89,0,0,227,
		228,5,52,0,0,228,229,3,16,8,0,229,21,1,0,0,0,230,231,5,89,0,0,231,232,
		3,24,12,0,232,23,1,0,0,0,233,234,5,42,0,0,234,246,5,42,0,0,235,236,5,43,
		0,0,236,246,5,43,0,0,237,238,5,42,0,0,238,246,5,52,0,0,239,240,5,43,0,
		0,240,246,5,52,0,0,241,242,5,44,0,0,242,246,5,52,0,0,243,244,5,45,0,0,
		244,246,5,52,0,0,245,233,1,0,0,0,245,235,1,0,0,0,245,237,1,0,0,0,245,239,
		1,0,0,0,245,241,1,0,0,0,245,243,1,0,0,0,246,25,1,0,0,0,247,248,7,3,0,0,
		248,27,1,0,0,0,249,250,5,86,0,0,250,251,5,38,0,0,251,252,5,86,0,0,252,
		254,5,36,0,0,253,255,3,12,6,0,254,253,1,0,0,0,254,255,1,0,0,0,255,256,
		1,0,0,0,256,257,5,37,0,0,257,29,1,0,0,0,258,259,5,86,0,0,259,261,5,36,
		0,0,260,262,3,12,6,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,
		264,5,37,0,0,264,31,1,0,0,0,265,266,3,16,8,0,266,33,1,0,0,0,267,278,5,
		38,0,0,268,279,3,36,18,0,269,279,3,38,19,0,270,279,3,40,20,0,271,279,3,
		42,21,0,272,279,3,44,22,0,273,279,3,46,23,0,274,279,3,48,24,0,275,279,
		3,50,25,0,276,279,3,52,26,0,277,279,3,56,28,0,278,268,1,0,0,0,278,269,
		1,0,0,0,278,270,1,0,0,0,278,271,1,0,0,0,278,272,1,0,0,0,278,273,1,0,0,
		0,278,274,1,0,0,0,278,275,1,0,0,0,278,276,1,0,0,0,278,277,1,0,0,0,279,
		35,1,0,0,0,280,281,5,23,0,0,281,282,3,16,8,0,282,37,1,0,0,0,283,284,5,
		24,0,0,284,285,3,16,8,0,285,39,1,0,0,0,286,287,5,25,0,0,287,288,3,20,10,
		0,288,41,1,0,0,0,289,290,5,26,0,0,290,291,3,20,10,0,291,43,1,0,0,0,292,
		293,5,27,0,0,293,294,5,36,0,0,294,295,3,16,8,0,295,296,5,37,0,0,296,297,
		3,34,17,0,297,45,1,0,0,0,298,299,5,28,0,0,299,300,5,36,0,0,300,301,3,16,
		8,0,301,302,5,37,0,0,302,303,5,39,0,0,303,304,5,86,0,0,304,47,1,0,0,0,
		305,306,5,29,0,0,306,307,3,20,10,0,307,49,1,0,0,0,308,310,5,30,0,0,309,
		311,5,86,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,51,1,0,0,0,312,313,5,
		31,0,0,313,314,3,54,27,0,314,53,1,0,0,0,315,329,3,16,8,0,316,317,3,16,
		8,0,317,318,5,39,0,0,318,319,3,16,8,0,319,329,1,0,0,0,320,321,3,16,8,0,
		321,323,5,39,0,0,322,324,3,16,8,0,323,322,1,0,0,0,323,324,1,0,0,0,324,
		325,1,0,0,0,325,326,5,39,0,0,326,327,5,86,0,0,327,329,1,0,0,0,328,315,
		1,0,0,0,328,316,1,0,0,0,328,320,1,0,0,0,329,55,1,0,0,0,330,331,5,32,0,
		0,331,332,3,58,29,0,332,333,5,33,0,0,333,57,1,0,0,0,334,339,3,60,30,0,
		335,336,5,39,0,0,336,338,3,60,30,0,337,335,1,0,0,0,338,341,1,0,0,0,339,
		337,1,0,0,0,339,340,1,0,0,0,340,59,1,0,0,0,341,339,1,0,0,0,342,345,5,89,
		0,0,343,344,5,52,0,0,344,346,3,102,51,0,345,343,1,0,0,0,345,346,1,0,0,
		0,346,61,1,0,0,0,347,357,5,38,0,0,348,358,3,66,33,0,349,358,3,68,34,0,
		350,358,3,70,35,0,351,358,3,72,36,0,352,358,3,74,37,0,353,358,3,76,38,
		0,354,358,3,82,41,0,355,358,3,86,43,0,356,358,3,88,44,0,357,348,1,0,0,
		0,357,349,1,0,0,0,357,350,1,0,0,0,357,351,1,0,0,0,357,352,1,0,0,0,357,
		353,1,0,0,0,357,354,1,0,0,0,357,355,1,0,0,0,357,356,1,0,0,0,358,361,1,
		0,0,0,359,361,3,64,32,0,360,347,1,0,0,0,360,359,1,0,0,0,361,63,1,0,0,0,
		362,363,5,44,0,0,363,364,5,52,0,0,364,365,3,102,51,0,365,366,5,86,0,0,
		366,65,1,0,0,0,367,368,5,18,0,0,368,369,7,4,0,0,369,67,1,0,0,0,370,371,
		5,15,0,0,371,372,3,96,48,0,372,69,1,0,0,0,373,374,5,16,0,0,374,375,3,96,
		48,0,375,71,1,0,0,0,376,377,5,17,0,0,377,378,3,96,48,0,378,73,1,0,0,0,
		379,380,5,5,0,0,380,381,5,86,0,0,381,75,1,0,0,0,382,383,7,5,0,0,383,384,
		3,102,51,0,384,385,5,39,0,0,385,386,3,78,39,0,386,77,1,0,0,0,387,394,3,
		102,51,0,388,389,5,34,0,0,389,390,3,96,48,0,390,391,5,35,0,0,391,394,1,
		0,0,0,392,394,3,80,40,0,393,387,1,0,0,0,393,388,1,0,0,0,393,392,1,0,0,
		0,394,79,1,0,0,0,395,396,1,0,0,0,396,81,1,0,0,0,397,398,5,11,0,0,398,399,
		5,88,0,0,399,400,3,84,42,0,400,401,5,88,0,0,401,83,1,0,0,0,402,403,7,6,
		0,0,403,85,1,0,0,0,404,406,5,87,0,0,405,407,3,92,46,0,406,405,1,0,0,0,
		406,407,1,0,0,0,407,408,1,0,0,0,408,409,5,86,0,0,409,87,1,0,0,0,410,411,
		7,7,0,0,411,418,3,94,47,0,412,413,5,39,0,0,413,416,3,102,51,0,414,415,
		5,39,0,0,415,417,3,102,51,0,416,414,1,0,0,0,416,417,1,0,0,0,417,419,1,
		0,0,0,418,412,1,0,0,0,418,419,1,0,0,0,419,89,1,0,0,0,420,421,5,50,0,0,
		421,425,5,89,0,0,422,425,5,50,0,0,423,425,5,89,0,0,424,420,1,0,0,0,424,
		422,1,0,0,0,424,423,1,0,0,0,425,91,1,0,0,0,426,427,5,89,0,0,427,93,1,0,
		0,0,428,429,5,86,0,0,429,95,1,0,0,0,430,435,3,102,51,0,431,432,5,39,0,
		0,432,434,3,102,51,0,433,431,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,
		436,1,0,0,0,436,97,1,0,0,0,437,435,1,0,0,0,438,443,3,100,50,0,439,440,
		5,39,0,0,440,442,3,100,50,0,441,439,1,0,0,0,442,445,1,0,0,0,443,441,1,
		0,0,0,443,444,1,0,0,0,444,99,1,0,0,0,445,443,1,0,0,0,446,452,5,85,0,0,
		447,449,3,104,52,0,448,447,1,0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,450,
		452,3,102,51,0,451,446,1,0,0,0,451,448,1,0,0,0,452,101,1,0,0,0,453,457,
		3,106,53,0,454,457,3,108,54,0,455,457,3,110,55,0,456,453,1,0,0,0,456,454,
		1,0,0,0,456,455,1,0,0,0,457,103,1,0,0,0,458,459,7,8,0,0,459,105,1,0,0,
		0,460,461,5,82,0,0,461,107,1,0,0,0,462,463,5,83,0,0,463,109,1,0,0,0,464,
		465,5,84,0,0,465,111,1,0,0,0,466,467,7,9,0,0,467,113,1,0,0,0,468,469,7,
		10,0,0,469,115,1,0,0,0,470,476,3,118,59,0,471,472,3,118,59,0,472,473,5,
		38,0,0,473,474,3,114,57,0,474,476,1,0,0,0,475,470,1,0,0,0,475,471,1,0,
		0,0,476,117,1,0,0,0,477,478,7,11,0,0,478,119,1,0,0,0,32,127,135,142,154,
		161,167,180,197,219,221,245,254,261,278,310,323,328,339,345,357,360,393,
		406,416,418,424,435,443,448,451,456,475
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
