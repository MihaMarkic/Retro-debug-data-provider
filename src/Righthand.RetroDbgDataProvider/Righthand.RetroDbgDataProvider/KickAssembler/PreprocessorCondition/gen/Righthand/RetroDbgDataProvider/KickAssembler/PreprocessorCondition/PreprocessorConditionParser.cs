//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/GitProjects/Righthand/C64/retro-dbg-data-provider/src/Righthand.RetroDbgDataProvider/Righthand.RetroDbgDataProvider/KickAssembler/PreprocessorCondition/PreprocessorConditionParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Righthand.RetroDbgDataProvider.KickAssembler.PreprocessorCondition {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PreprocessorConditionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, OPEN_PARENS=2, CLOSE_PARENS=3, BANG=4, OP_AND=5, OP_OR=6, OP_EQ=7, 
		OP_NE=8, UNQUOTED_STRING=9;
	public const int
		RULE_condition = 0;
	public static readonly string[] ruleNames = {
		"condition"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "'!'", "'&&'", "'||'", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "OPEN_PARENS", "CLOSE_PARENS", "BANG", "OP_AND", "OP_OR", 
		"OP_EQ", "OP_NE", "UNQUOTED_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PreprocessorConditionParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PreprocessorConditionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PreprocessorConditionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PreprocessorConditionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionBangContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(PreprocessorConditionParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ConditionBangContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorConditionParserListener typedListener = listener as IPreprocessorConditionParserListener;
			if (typedListener != null) typedListener.EnterConditionBang(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorConditionParserListener typedListener = listener as IPreprocessorConditionParserListener;
			if (typedListener != null) typedListener.ExitConditionBang(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorConditionParserVisitor<TResult> typedVisitor = visitor as IPreprocessorConditionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionBang(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionParensContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(PreprocessorConditionParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(PreprocessorConditionParser.CLOSE_PARENS, 0); }
		public ConditionParensContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorConditionParserListener typedListener = listener as IPreprocessorConditionParserListener;
			if (typedListener != null) typedListener.EnterConditionParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorConditionParserListener typedListener = listener as IPreprocessorConditionParserListener;
			if (typedListener != null) typedListener.ExitConditionParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorConditionParserVisitor<TResult> typedVisitor = visitor as IPreprocessorConditionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionOperationContext : ConditionContext {
		public ConditionContext left;
		public ConditionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(PreprocessorConditionParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(PreprocessorConditionParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(PreprocessorConditionParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(PreprocessorConditionParser.OP_NE, 0); }
		public ConditionOperationContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorConditionParserListener typedListener = listener as IPreprocessorConditionParserListener;
			if (typedListener != null) typedListener.EnterConditionOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorConditionParserListener typedListener = listener as IPreprocessorConditionParserListener;
			if (typedListener != null) typedListener.ExitConditionOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorConditionParserVisitor<TResult> typedVisitor = visitor as IPreprocessorConditionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionSymbolContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(PreprocessorConditionParser.UNQUOTED_STRING, 0); }
		public ConditionSymbolContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPreprocessorConditionParserListener typedListener = listener as IPreprocessorConditionParserListener;
			if (typedListener != null) typedListener.EnterConditionSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPreprocessorConditionParserListener typedListener = listener as IPreprocessorConditionParserListener;
			if (typedListener != null) typedListener.ExitConditionSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPreprocessorConditionParserVisitor<TResult> typedVisitor = visitor as IPreprocessorConditionParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		return condition(0);
	}

	private ConditionContext condition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionContext _localctx = new ConditionContext(Context, _parentState);
		ConditionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_condition, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PARENS:
				{
				_localctx = new ConditionParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 3;
				Match(OPEN_PARENS);
				State = 4;
				condition(0);
				State = 5;
				Match(CLOSE_PARENS);
				}
				break;
			case BANG:
				{
				_localctx = new ConditionBangContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7;
				Match(BANG);
				State = 8;
				condition(2);
				}
				break;
			case UNQUOTED_STRING:
				{
				_localctx = new ConditionSymbolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 9;
				Match(UNQUOTED_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 17;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionOperationContext(new ConditionContext(_parentctx, _parentState));
					((ConditionOperationContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_condition);
					State = 12;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 13;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 480L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 14;
					((ConditionOperationContext)_localctx).right = condition(5);
					}
					} 
				}
				State = 19;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return condition_sempred((ConditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool condition_sempred(ConditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,9,21,2,0,7,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,11,8,0,1,0,1,0,1,
		0,5,0,16,8,0,10,0,12,0,19,9,0,1,0,0,1,0,1,0,0,1,1,0,5,8,22,0,10,1,0,0,
		0,2,3,6,0,-1,0,3,4,5,2,0,0,4,5,3,0,0,0,5,6,5,3,0,0,6,11,1,0,0,0,7,8,5,
		4,0,0,8,11,3,0,0,2,9,11,5,9,0,0,10,2,1,0,0,0,10,7,1,0,0,0,10,9,1,0,0,0,
		11,17,1,0,0,0,12,13,10,4,0,0,13,14,7,0,0,0,14,16,3,0,0,5,15,12,1,0,0,0,
		16,19,1,0,0,0,17,15,1,0,0,0,17,18,1,0,0,0,18,1,1,0,0,0,19,17,1,0,0,0,2,
		10,17
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Righthand.RetroDbgDataProvider.KickAssembler.PreprocessorCondition
