//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/GitProjects/Righthand/C64/retro-dbg-data-provider/src/Righthand.RetroDbgDataProvider/Righthand.RetroDbgDataProvider/KickAssembler/PreprocessorCondition/PreprocessorConditionParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Righthand.RetroDbgDataProvider.KickAssembler.PreprocessorCondition {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IPreprocessorConditionParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class PreprocessorConditionParserBaseListener : IPreprocessorConditionParserListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionBang</c>
	/// labeled alternative in <see cref="PreprocessorConditionParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionBang([NotNull] PreprocessorConditionParser.ConditionBangContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionBang</c>
	/// labeled alternative in <see cref="PreprocessorConditionParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionBang([NotNull] PreprocessorConditionParser.ConditionBangContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionParens</c>
	/// labeled alternative in <see cref="PreprocessorConditionParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionParens([NotNull] PreprocessorConditionParser.ConditionParensContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionParens</c>
	/// labeled alternative in <see cref="PreprocessorConditionParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionParens([NotNull] PreprocessorConditionParser.ConditionParensContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionOperation</c>
	/// labeled alternative in <see cref="PreprocessorConditionParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionOperation([NotNull] PreprocessorConditionParser.ConditionOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionOperation</c>
	/// labeled alternative in <see cref="PreprocessorConditionParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionOperation([NotNull] PreprocessorConditionParser.ConditionOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionSymbol</c>
	/// labeled alternative in <see cref="PreprocessorConditionParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionSymbol([NotNull] PreprocessorConditionParser.ConditionSymbolContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionSymbol</c>
	/// labeled alternative in <see cref="PreprocessorConditionParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionSymbol([NotNull] PreprocessorConditionParser.ConditionSymbolContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Righthand.RetroDbgDataProvider.KickAssembler.PreprocessorCondition
